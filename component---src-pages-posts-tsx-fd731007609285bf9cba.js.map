{"version":3,"file":"component---src-pages-posts-tsx-fd731007609285bf9cba.js","mappings":"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","sources":["webpack://@vallista-land/blog/./src/components/SearchBox/index.tsx","webpack://@vallista-land/blog/./src/pages/posts.tsx"],"sourcesContent":["import { css } from '@emotion/react'\nimport styled from '@emotion/styled'\nimport { VFC } from 'react'\n\ntype SearchBoxSize = 'small' | 'large'\n\ninterface SearchBoxProps {\n  value: string\n  onSearch: (target: string) => void\n  size?: SearchBoxSize\n  placeholder?: string\n}\n\nexport const SearchBox: VFC<SearchBoxProps> = (props) => {\n  const { value, onSearch, size = 'small', placeholder } = props\n\n  const hasSearchText = value.length !== 0\n\n  return (\n    <Search hasSearchText={hasSearchText} size={size} placeholder={placeholder ?? ''}>\n      <Input value={value} onChange={(e) => onSearch(e.currentTarget.value)} />\n      <svg\n        viewBox='0 0 24 24'\n        width={sizeMapper[size]}\n        height={sizeMapper[size]}\n        stroke='currentColor'\n        strokeWidth='1.5'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n        fill='none'\n        shapeRendering='geometricPrecision'\n      >\n        <path d='M11 17.25a6.25 6.25 0 110-12.5 6.25 6.25 0 010 12.5z' />\n        <path d='M16 16l4.5 4.5' />\n      </svg>\n      <svg\n        onClick={() => onSearch('')}\n        viewBox='0 0 24 24'\n        width={sizeMapper[size]}\n        height={sizeMapper[size]}\n        stroke='currentColor'\n        strokeWidth='1.5'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n        fill='none'\n        shapeRendering='geometricPrecision'\n      >\n        <path d='M21 4H8l-7 8 7 8h13a2 2 0 002-2V6a2 2 0 00-2-2z' />\n        <path d='M18 9l-6 6' />\n        <path d='M12 9l6 6' />\n      </svg>\n    </Search>\n  )\n}\n\nconst sizeMapper = {\n  small: 15,\n  large: 24\n}\n\nconst Search = styled.label<{ hasSearchText: boolean; size: SearchBoxSize; placeholder: string }>`\n  position: relative;\n  width: 100%;\n  height: 30px;\n  border-radius: 15px;\n\n  ${({ theme, size, placeholder, hasSearchText }) => css`\n    background: ${theme.colors.PRIMARY.ACCENT_2};\n\n    &::before {\n      content: '${placeholder}';\n      font-size: 1rem;\n      position: absolute;\n      left: 2.5rem;\n      top: 50%;\n      transform: translateY(-50%);\n      color: ${theme.colors.PRIMARY.ACCENT_3};\n      font-weight: 500;\n\n      @media screen and (max-width: 1000px) {\n        font-size: 0.875rem;\n      }\n    }\n\n    ${hasSearchText &&\n    css`\n      &::before {\n        opacity: 0;\n      }\n    `}\n\n    ${size === 'large' &&\n    css`\n      height: 60px;\n      border-radius: 24px;\n\n      & input {\n        font-size: 1.5rem;\n        width: calc(100% - 6.25rem);\n        left: 3.125rem;\n      }\n\n      &::before {\n        left: 52px;\n        font-size: 1.5rem;\n\n        @media screen and (max-width: 1000px) {\n          font-size: 1.25rem;\n        }\n      }\n    `}\n  `}\n\n  & > svg {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n\n  ${({ theme, hasSearchText }) => css`\n    border: 1px solid transparent;\n    transition: border 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);\n\n    &:focus-within {\n      border: 1px solid ${theme.colors.PRIMARY.ACCENT_3};\n    }\n\n    & > svg:first-of-type {\n      left: 12px;\n      color: ${theme.colors.PRIMARY.ACCENT_4};\n    }\n\n    & > svg:last-of-type {\n      cursor: pointer;\n      opacity: ${hasSearchText ? 1 : 0};\n      right: 12px;\n      color: ${theme.colors.ERROR.DARK};\n    }\n  `}\n`\n\nconst Input = styled.input`\n  width: calc(100% - 5.3125rem);\n  position: relative;\n  left: 2.5rem;\n  top: 50%;\n  transform: translateY(-50%);\n  border: none;\n  background: none;\n  outline: none;\n\n  :focus {\n    background: none;\n  }\n`\n","import styled from '@emotion/styled'\nimport { Container, Spacer, Text } from '@vallista-land/core'\nimport { graphql } from 'gatsby'\nimport { useMemo, useState, VFC } from 'react'\n\nimport { ListTable } from '../components/ListTable'\nimport { SearchBox } from '../components/SearchBox'\nimport { IndexQuery, PageProps } from '../types/type'\nimport { toDate, getTime } from '../utils'\n\nconst PostsPage: VFC<PageProps<IndexQuery>> = (props) => {\n  const { data } = props\n  const { nodes } = data.allMarkdownRemark\n  const [search, setSearch] = useState('')\n\n  const sortPosts = useMemo(() => {\n    return nodes\n      .sort((a, b) => {\n        const base = toDate(a.frontmatter.date)\n        const target = toDate(b.frontmatter.date)\n\n        return target.getTime() - base.getTime()\n      })\n      .map((it) => {\n        const { slug } = it.fields\n        const { date, title: name } = it.frontmatter\n        const [, month, day] = getTime(date)\n        const time = toDate(date)\n\n        return {\n          time: time.getTime(),\n          date: `${Number(month)}월 ${day}일`,\n          name,\n          slug\n        }\n      })\n      .sort((a, b) => Number(b.time) - Number(a.time))\n  }, [nodes])\n\n  const posts = useMemo(() => {\n    const remake = nodes\n      .sort((a, b) => {\n        const base = toDate(a.frontmatter.date)\n        const target = toDate(b.frontmatter.date)\n\n        return target.getTime() - base.getTime()\n      })\n      .reduce<Record<string, Array<{ name: string; date: string; slug: string }>>>((acc, curr) => {\n        const { slug } = curr.fields\n        const { date, title: name } = curr.frontmatter\n        const [year, month, day] = getTime(date)\n\n        if (!acc[year]) acc[year] = []\n\n        acc[year].push({\n          name,\n          date: `${Number(month)}월 ${day}일`,\n          slug\n        })\n\n        return acc\n      }, {})\n\n    const values = Object.values(remake)\n    return Object.keys(remake)\n      .map((it, idx) => ({\n        year: it,\n        posts: values[idx]\n      }))\n      .sort((a, b) => Number(b.year) - Number(a.year))\n  }, [nodes])\n\n  const filteredSearchPosts = useMemo(() => sortPosts.filter((it) => it.name.includes(search)), [sortPosts, search])\n\n  const hasSearchText = search.length !== 0\n\n  return (\n    <Wrapper>\n      <Container>\n        <SearchBox value={search} onSearch={setSearch} size='large' placeholder='검색할 텍스트를 입력하세요.' />\n        <Spacer y={2} />\n      </Container>\n      {hasSearchText ? (\n        filteredSearchPosts.length === 0 ? (\n          <>\n            <Text size={20} weight={600}>\n              검색된 결과가 없어요 :(\n            </Text>\n            <Text size={20} weight={600}>\n              다른 결과를 검색해보시겠어요?\n            </Text>\n          </>\n        ) : (\n          <ListTable underline title='검색결과' list={filteredSearchPosts} />\n        )\n      ) : (\n        posts.map((it) => (\n          <Container key={it.year}>\n            <div>\n              <ListTable title={it.year} list={it.posts} underline />\n            </div>\n            <Spacer y={2} />\n          </Container>\n        ))\n      )}\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 900px;\n  padding: 2rem;\n`\nexport default PostsPage\n\nexport const pageQuery = graphql`\n  query BlogPostsQuery {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date\n          image {\n            publicURL\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["SearchBox","props","value","onSearch","size","placeholder","hasSearchText","length","Search","Input","onChange","e","currentTarget","viewBox","width","sizeMapper","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fill","shapeRendering","d","onClick","small","large","theme","css","colors","PRIMARY","ACCENT_2","ACCENT_3","ACCENT_4","ERROR","DARK","Wrapper","nodes","data","allMarkdownRemark","useState","search","setSearch","sortPosts","useMemo","sort","a","b","base","toDate","frontmatter","date","getTime","map","it","slug","fields","name","title","month","day","time","Number","posts","remake","reduce","acc","curr","year","push","values","Object","keys","idx","filteredSearchPosts","filter","includes","y","weight","ListTable","underline","list"],"sourceRoot":""}