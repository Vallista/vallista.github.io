{"version":3,"file":"component---src-pages-posts-tsx-e23ac0275f37d382557e.js","mappings":"gNAUA,IAyGMA,GAAO,wHAMb,UA/G8C,SAACC,GAC7C,IACQC,EADSD,EAATE,KACeC,kBAAfF,MACR,GAA4BG,EAAAA,EAAAA,UAAS,IAA9BC,EAAP,KAAeC,EAAf,KAEMC,GAAQC,EAAAA,EAAAA,UACZ,kBACEC,EAAAA,EAAAA,IAAgBR,GAAOS,MAAK,SAACC,EAAGC,GAC9B,IAAMC,GAAOC,EAAAA,EAAAA,IAAOH,EAAEI,YAAYC,MAGlC,OAFeF,EAAAA,EAAAA,IAAOF,EAAEG,YAAYC,MAEtBC,UAAYJ,EAAKI,eAEnC,CAAChB,IAGGiB,GAAYV,EAAAA,EAAAA,UAChB,kBACED,EAAMY,KAAI,SAACC,GACT,IAAQC,EAASD,EAAGE,OAAZD,KACR,EAA8BD,EAAGL,YAAzBC,EAAR,EAAQA,KAAaO,EAArB,EAAcC,MACd,GAAuBP,EAAAA,EAAAA,IAAQD,GAAtBS,EAAT,KAAgBC,EAAhB,KAGA,MAAO,CACLC,MAHWb,EAAAA,EAAAA,IAAOE,GAGPC,UACXD,KAASY,OAAOH,GAAZ,KAAuBG,OAAOF,GAA9B,IACJH,KAAAA,EACAF,KAAAA,QAGN,CAACd,IAGGsB,GAAQrB,EAAAA,EAAAA,UAAQ,WACpB,IAAMsB,EAASvB,EAAMwB,QAA4E,SAACC,EAAKC,GACrG,IAAQZ,EAASY,EAAKX,OAAdD,KACR,EAA8BY,EAAKlB,YAA3BC,EAAR,EAAQA,KAAaO,EAArB,EAAcC,MACd,GAA2BP,EAAAA,EAAAA,IAAQD,GAA5BkB,EAAP,KAAaT,EAAb,KAAoBC,EAApB,KAUA,OARKM,EAAIE,KAAOF,EAAIE,GAAQ,IAE5BF,EAAIE,GAAMC,KAAK,CACbZ,KAAAA,EACAP,KAASY,OAAOH,GAAZ,KAAuBG,OAAOF,GAA9B,IACJL,KAAAA,IAGKW,IACN,IAEGI,EAASC,OAAOD,OAAON,GAC7B,OAAOO,OAAOC,KAAKR,GAChBX,KAAI,SAACC,EAAImB,GAAL,MAAc,CACjBL,KAAMd,EACNb,MAAO6B,EAAOG,OAEf7B,MAAK,SAACC,EAAGC,GAAJ,OAAUgB,OAAOhB,EAAEsB,MAAQN,OAAOjB,EAAEuB,WAC3C,CAACjC,IAEEuC,GAAsBhC,EAAAA,EAAAA,UAC1B,kBAAMU,EAAUuB,QAAO,SAACrB,GAAD,OAAQA,EAAGG,KAAKmB,oBAAoBC,SAAStC,EAAOqC,0BAC3E,CAACxB,EAAWb,IAGRuC,EAAkC,IAAlBvC,EAAOwC,OAE7B,OACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAKtB,KAAK,UACV,UAACxB,EAAD,YACE,UAAC,KAAD,YACE,0BACE,SAAC,KAAD,CAAa+C,MAAOzC,EAAQ0C,SAAUzC,EAAW0C,KAAK,QAAQC,YAAY,uBAE5E,SAAC,KAAD,CAAQC,EAAG,OAEZN,EACgC,IAA/BJ,EAAoBK,QAClB,iCACE,SAAC,KAAD,CAAMG,KAAM,GAAIG,OAAQ,IAAxB,6BAGA,SAAC,KAAD,CAAMH,KAAM,GAAIG,OAAQ,IAAxB,kCAKF,SAAC,IAAD,CAAWC,WAAS,EAAC5B,MAAM,OAAO6B,KAAMb,IAG1CX,EAAMV,KAAI,SAACC,GAAD,OACR,UAAC,KAAD,YACE,0BACE,SAAC,IAAD,CAAWI,MAAOJ,EAAGc,KAAMmB,KAAMjC,EAAGb,MAAO6C,WAAS,OAEtD,SAAC,KAAD,CAAQF,EAAG,MAJG9B,EAAGc","sources":["webpack://@vallista-land/blog/./src/pages/posts.tsx"],"sourcesContent":["import styled from '@emotion/styled'\r\nimport { Container, Spacer, Text, SearchInput } from '@vallista-land/core'\r\nimport { graphql } from 'gatsby'\r\nimport { useMemo, useState, VFC } from 'react'\r\n\r\nimport { ListTable } from '../components/ListTable'\r\nimport { Seo } from '../components/Seo'\r\nimport { IndexQuery, PageProps } from '../types/type'\r\nimport { toDate, getTime, filteredByDraft } from '../utils'\r\n\r\nconst PostsPage: VFC<PageProps<IndexQuery>> = (props) => {\r\n  const { data } = props\r\n  const { nodes } = data.allMarkdownRemark\r\n  const [search, setSearch] = useState('')\r\n\r\n  const posts = useMemo(\r\n    () =>\r\n      filteredByDraft(nodes).sort((a, b) => {\r\n        const base = toDate(a.frontmatter.date)\r\n        const target = toDate(b.frontmatter.date)\r\n\r\n        return target.getTime() - base.getTime()\r\n      }),\r\n    [nodes]\r\n  )\r\n\r\n  const sortPosts = useMemo(\r\n    () =>\r\n      posts.map((it) => {\r\n        const { slug } = it.fields\r\n        const { date, title: name } = it.frontmatter\r\n        const [, month, day] = getTime(date)\r\n        const time = toDate(date)\r\n\r\n        return {\r\n          time: time.getTime(),\r\n          date: `${Number(month)}월 ${Number(day)}일`,\r\n          name,\r\n          slug\r\n        }\r\n      }),\r\n    [posts]\r\n  )\r\n\r\n  const views = useMemo(() => {\r\n    const remake = posts.reduce<Record<string, Array<{ name: string; date: string; slug: string }>>>((acc, curr) => {\r\n      const { slug } = curr.fields\r\n      const { date, title: name } = curr.frontmatter\r\n      const [year, month, day] = getTime(date)\r\n\r\n      if (!acc[year]) acc[year] = []\r\n\r\n      acc[year].push({\r\n        name,\r\n        date: `${Number(month)}월 ${Number(day)}일`,\r\n        slug\r\n      })\r\n\r\n      return acc\r\n    }, {})\r\n\r\n    const values = Object.values(remake)\r\n    return Object.keys(remake)\r\n      .map((it, idx) => ({\r\n        year: it,\r\n        posts: values[idx]\r\n      }))\r\n      .sort((a, b) => Number(b.year) - Number(a.year))\r\n  }, [nodes])\r\n\r\n  const filteredSearchPosts = useMemo(\r\n    () => sortPosts.filter((it) => it.name.toLocaleUpperCase().includes(search.toLocaleUpperCase())),\r\n    [sortPosts, search]\r\n  )\r\n\r\n  const hasSearchText = search.length !== 0\r\n\r\n  return (\r\n    <Container>\r\n      <Seo name='글 목록' />\r\n      <Wrapper>\r\n        <Container>\r\n          <div>\r\n            <SearchInput value={search} onChange={setSearch} size='large' placeholder='검색할 텍스트를 입력하세요.' />\r\n          </div>\r\n          <Spacer y={2} />\r\n        </Container>\r\n        {hasSearchText ? (\r\n          filteredSearchPosts.length === 0 ? (\r\n            <>\r\n              <Text size={20} weight={600}>\r\n                검색된 결과가 없어요 :(\r\n              </Text>\r\n              <Text size={20} weight={600}>\r\n                다른 결과를 검색해보시겠어요?\r\n              </Text>\r\n            </>\r\n          ) : (\r\n            <ListTable underline title='검색결과' list={filteredSearchPosts} />\r\n          )\r\n        ) : (\r\n          views.map((it) => (\r\n            <Container key={it.year}>\r\n              <div>\r\n                <ListTable title={it.year} list={it.posts} underline />\r\n              </div>\r\n              <Spacer y={2} />\r\n            </Container>\r\n          ))\r\n        )}\r\n      </Wrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.section`\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  max-width: 900px;\r\n  padding: 2rem;\r\n`\r\nexport default PostsPage\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostsQuery {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      nodes {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date\r\n          image {\r\n            publicURL\r\n          }\r\n          draft\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["Wrapper","props","nodes","data","allMarkdownRemark","useState","search","setSearch","posts","useMemo","filteredByDraft","sort","a","b","base","toDate","frontmatter","date","getTime","sortPosts","map","it","slug","fields","name","title","month","day","time","Number","views","remake","reduce","acc","curr","year","push","values","Object","keys","idx","filteredSearchPosts","filter","toLocaleUpperCase","includes","hasSearchText","length","value","onChange","size","placeholder","y","weight","underline","list"],"sourceRoot":""}