{"version":3,"file":"component---src-pages-posts-tsx-ad9a34a1ab0c046cadea.js","mappings":"0NAWA,IAoGMA,GAAO,wHAMb,UA1G8C,SAACC,GAC7C,IACQC,EADSD,EAATE,KACeC,kBAAfF,MACR,GAA4BG,EAAAA,EAAAA,UAAS,IAA9BC,EAAP,KAAeC,EAAf,KAEMC,GAAQC,EAAAA,EAAAA,UACZ,kBACEC,EAAAA,EAAAA,IAAgBR,GAAOS,MAAK,SAACC,EAAGC,GAC9B,IAAMC,GAAOC,EAAAA,EAAAA,IAAOH,EAAEI,YAAYC,MAGlC,OAFeF,EAAAA,EAAAA,IAAOF,EAAEG,YAAYC,MAEtBC,UAAYJ,EAAKI,eAEnC,CAAChB,IAGGiB,GAAYV,EAAAA,EAAAA,UAChB,kBACED,EAAMY,KAAI,SAACC,GACT,IAAQC,EAASD,EAAGE,OAAZD,KACR,EAA8BD,EAAGL,YAAzBC,EAAR,EAAQA,KAAaO,EAArB,EAAcC,MACd,GAAuBP,EAAAA,EAAAA,IAAQD,GAAtBS,EAAT,KAAgBC,EAAhB,KAGA,MAAO,CACLC,MAHWb,EAAAA,EAAAA,IAAOE,GAGPC,UACXD,KAASY,OAAOH,GAAZ,KAAuBG,OAAOF,GAA9B,IACJH,KAAAA,EACAF,KAAAA,QAGN,CAACd,IAGGsB,GAAQrB,EAAAA,EAAAA,UAAQ,WACpB,IAAMsB,EAASvB,EAAMwB,QAA4E,SAACC,EAAKC,GACrG,IAAQZ,EAASY,EAAKX,OAAdD,KACR,EAA8BY,EAAKlB,YAA3BC,EAAR,EAAQA,KAAaO,EAArB,EAAcC,MACd,GAA2BP,EAAAA,EAAAA,IAAQD,GAA5BkB,EAAP,KAAaT,EAAb,KAAoBC,EAApB,KAUA,OARKM,EAAIE,KAAOF,EAAIE,GAAQ,IAE5BF,EAAIE,GAAMC,KAAK,CACbZ,KAAAA,EACAP,KAASY,OAAOH,GAAZ,KAAuBG,OAAOF,GAA9B,IACJL,KAAAA,IAGKW,IACN,IAEGI,EAASC,OAAOD,OAAON,GAC7B,OAAOO,OAAOC,KAAKR,GAChBX,KAAI,SAACC,EAAImB,GAAL,MAAc,CACjBL,KAAMd,EACNb,MAAO6B,EAAOG,OAEf7B,MAAK,SAACC,EAAGC,GAAJ,OAAUgB,OAAOhB,EAAEsB,MAAQN,OAAOjB,EAAEuB,WAC3C,CAACjC,IAEEuC,GAAsBhC,EAAAA,EAAAA,UAAQ,kBAAMU,EAAUuB,QAAO,SAACrB,GAAD,OAAQA,EAAGG,KAAKmB,SAASrC,QAAU,CAACa,EAAWb,IAEpGsC,EAAkC,IAAlBtC,EAAOuC,OAE7B,OACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAKrB,KAAK,UACV,UAACxB,EAAD,YACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAW8C,MAAOxC,EAAQyC,SAAUxC,EAAWyC,KAAK,QAAQC,YAAY,qBACxE,SAAC,KAAD,CAAQC,EAAG,OAEZN,EACgC,IAA/BH,EAAoBI,QAClB,iCACE,SAAC,KAAD,CAAMG,KAAM,GAAIG,OAAQ,IAAxB,6BAGA,SAAC,KAAD,CAAMH,KAAM,GAAIG,OAAQ,IAAxB,kCAKF,SAAC,IAAD,CAAWC,WAAS,EAAC3B,MAAM,OAAO4B,KAAMZ,IAG1CX,EAAMV,KAAI,SAACC,GAAD,OACR,UAAC,KAAD,YACE,0BACE,SAAC,IAAD,CAAWI,MAAOJ,EAAGc,KAAMkB,KAAMhC,EAAGb,MAAO4C,WAAS,OAEtD,SAAC,KAAD,CAAQF,EAAG,MAJG7B,EAAGc","sources":["webpack://@vallista-land/blog/./src/pages/posts.tsx"],"sourcesContent":["import styled from '@emotion/styled'\nimport { Container, Spacer, Text } from '@vallista-land/core'\nimport { graphql } from 'gatsby'\nimport { useMemo, useState, VFC } from 'react'\n\nimport { ListTable } from '../components/ListTable'\nimport { SearchBox } from '../components/SearchBox'\nimport { Seo } from '../components/Seo'\nimport { IndexQuery, PageProps } from '../types/type'\nimport { toDate, getTime, filteredByDraft } from '../utils'\n\nconst PostsPage: VFC<PageProps<IndexQuery>> = (props) => {\n  const { data } = props\n  const { nodes } = data.allMarkdownRemark\n  const [search, setSearch] = useState('')\n\n  const posts = useMemo(\n    () =>\n      filteredByDraft(nodes).sort((a, b) => {\n        const base = toDate(a.frontmatter.date)\n        const target = toDate(b.frontmatter.date)\n\n        return target.getTime() - base.getTime()\n      }),\n    [nodes]\n  )\n\n  const sortPosts = useMemo(\n    () =>\n      posts.map((it) => {\n        const { slug } = it.fields\n        const { date, title: name } = it.frontmatter\n        const [, month, day] = getTime(date)\n        const time = toDate(date)\n\n        return {\n          time: time.getTime(),\n          date: `${Number(month)}월 ${Number(day)}일`,\n          name,\n          slug\n        }\n      }),\n    [posts]\n  )\n\n  const views = useMemo(() => {\n    const remake = posts.reduce<Record<string, Array<{ name: string; date: string; slug: string }>>>((acc, curr) => {\n      const { slug } = curr.fields\n      const { date, title: name } = curr.frontmatter\n      const [year, month, day] = getTime(date)\n\n      if (!acc[year]) acc[year] = []\n\n      acc[year].push({\n        name,\n        date: `${Number(month)}월 ${Number(day)}일`,\n        slug\n      })\n\n      return acc\n    }, {})\n\n    const values = Object.values(remake)\n    return Object.keys(remake)\n      .map((it, idx) => ({\n        year: it,\n        posts: values[idx]\n      }))\n      .sort((a, b) => Number(b.year) - Number(a.year))\n  }, [nodes])\n\n  const filteredSearchPosts = useMemo(() => sortPosts.filter((it) => it.name.includes(search)), [sortPosts, search])\n\n  const hasSearchText = search.length !== 0\n\n  return (\n    <Container>\n      <Seo name='글 목록' />\n      <Wrapper>\n        <Container>\n          <SearchBox value={search} onSearch={setSearch} size='large' placeholder='검색할 텍스트를 입력하세요.' />\n          <Spacer y={2} />\n        </Container>\n        {hasSearchText ? (\n          filteredSearchPosts.length === 0 ? (\n            <>\n              <Text size={20} weight={600}>\n                검색된 결과가 없어요 :(\n              </Text>\n              <Text size={20} weight={600}>\n                다른 결과를 검색해보시겠어요?\n              </Text>\n            </>\n          ) : (\n            <ListTable underline title='검색결과' list={filteredSearchPosts} />\n          )\n        ) : (\n          views.map((it) => (\n            <Container key={it.year}>\n              <div>\n                <ListTable title={it.year} list={it.posts} underline />\n              </div>\n              <Spacer y={2} />\n            </Container>\n          ))\n        )}\n      </Wrapper>\n    </Container>\n  )\n}\n\nconst Wrapper = styled.section`\n  margin: 0 auto;\n  width: 100%;\n  max-width: 900px;\n  padding: 2rem;\n`\nexport default PostsPage\n\nexport const pageQuery = graphql`\n  query BlogPostsQuery {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date\n          image {\n            publicURL\n          }\n          draft\n        }\n      }\n    }\n  }\n`\n"],"names":["Wrapper","props","nodes","data","allMarkdownRemark","useState","search","setSearch","posts","useMemo","filteredByDraft","sort","a","b","base","toDate","frontmatter","date","getTime","sortPosts","map","it","slug","fields","name","title","month","day","time","Number","views","remake","reduce","acc","curr","year","push","values","Object","keys","idx","filteredSearchPosts","filter","includes","hasSearchText","length","value","onSearch","size","placeholder","y","weight","underline","list"],"sourceRoot":""}