{"version":3,"file":"component---src-pages-posts-tsx-b5de7d67ecdb6dc101aa.js","mappings":"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","sources":["webpack://@vallista-land/blog/./src/pages/posts.tsx"],"sourcesContent":["import styled from '@emotion/styled'\nimport { useLocation } from '@reach/router'\nimport { Container, Spacer, Text } from '@vallista-land/core'\nimport { graphql } from 'gatsby'\nimport { useMemo, useState, VFC } from 'react'\n\nimport { ListTable } from '../components/ListTable'\nimport { SearchBox } from '../components/SearchBox'\nimport { IndexQuery, PageProps } from '../types/type'\nimport { toDate, getTime } from '../utils'\n\nconst PostsPage: VFC<PageProps<IndexQuery>> = (props) => {\n  const { data } = props\n  const { nodes } = data.allMarkdownRemark\n  const [search, setSearch] = useState('')\n  const location = useLocation()\n\n  const sortPosts = useMemo(() => {\n    return nodes\n      .filter((it) =>\n        !it.frontmatter.draft\n          ? true\n          : (typeof window === 'undefined' ? '' : location.host).includes('localhost')\n          ? true\n          : false\n      )\n      .sort((a, b) => {\n        const base = toDate(a.frontmatter.date)\n        const target = toDate(b.frontmatter.date)\n\n        return target.getTime() - base.getTime()\n      })\n      .map((it) => {\n        const { slug } = it.fields\n        const { date, title: name } = it.frontmatter\n        const [, month, day] = getTime(date)\n        const time = toDate(date)\n\n        return {\n          time: time.getTime(),\n          date: `${Number(month)}월 ${day}일`,\n          name,\n          slug\n        }\n      })\n      .sort((a, b) => Number(b.time) - Number(a.time))\n  }, [nodes])\n\n  const posts = useMemo(() => {\n    const remake = nodes\n      .filter((it) => (!it.frontmatter.draft ? true : location.hostname.includes('localhost') ? true : false))\n      .sort((a, b) => {\n        const base = toDate(a.frontmatter.date)\n        const target = toDate(b.frontmatter.date)\n\n        return target.getTime() - base.getTime()\n      })\n      .reduce<Record<string, Array<{ name: string; date: string; slug: string }>>>((acc, curr) => {\n        const { slug } = curr.fields\n        const { date, title: name } = curr.frontmatter\n        const [year, month, day] = getTime(date)\n\n        if (!acc[year]) acc[year] = []\n\n        acc[year].push({\n          name,\n          date: `${Number(month)}월 ${day}일`,\n          slug\n        })\n\n        return acc\n      }, {})\n\n    const values = Object.values(remake)\n    return Object.keys(remake)\n      .map((it, idx) => ({\n        year: it,\n        posts: values[idx]\n      }))\n      .sort((a, b) => Number(b.year) - Number(a.year))\n  }, [nodes])\n\n  const filteredSearchPosts = useMemo(() => sortPosts.filter((it) => it.name.includes(search)), [sortPosts, search])\n\n  const hasSearchText = search.length !== 0\n\n  return (\n    <Container>\n      <Wrapper>\n        <Container>\n          <SearchBox value={search} onSearch={setSearch} size='large' placeholder='검색할 텍스트를 입력하세요.' />\n          <Spacer y={2} />\n        </Container>\n        {hasSearchText ? (\n          filteredSearchPosts.length === 0 ? (\n            <>\n              <Text size={20} weight={600}>\n                검색된 결과가 없어요 :(\n              </Text>\n              <Text size={20} weight={600}>\n                다른 결과를 검색해보시겠어요?\n              </Text>\n            </>\n          ) : (\n            <ListTable underline title='검색결과' list={filteredSearchPosts} />\n          )\n        ) : (\n          posts.map((it) => (\n            <Container key={it.year}>\n              <div>\n                <ListTable title={it.year} list={it.posts} underline />\n              </div>\n              <Spacer y={2} />\n            </Container>\n          ))\n        )}\n      </Wrapper>\n    </Container>\n  )\n}\n\nconst Wrapper = styled.section`\n  margin: 0 auto;\n  width: 100%;\n  max-width: 900px;\n  padding: 2rem;\n`\nexport default PostsPage\n\nexport const pageQuery = graphql`\n  query BlogPostsQuery {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date\n          image {\n            publicURL\n          }\n          draft\n        }\n      }\n    }\n  }\n`\n"],"names":["Wrapper","props","nodes","data","allMarkdownRemark","useState","search","setSearch","location","useLocation","sortPosts","useMemo","filter","it","frontmatter","draft","window","host","includes","sort","a","b","base","toDate","date","getTime","map","slug","fields","name","title","month","day","time","Number","posts","remake","hostname","reduce","acc","curr","year","push","values","Object","keys","idx","filteredSearchPosts","hasSearchText","length","value","onSearch","size","placeholder","y","weight","underline","list"],"sourceRoot":""}