{"version":3,"file":"component---src-pages-posts-tsx-33858d14fb1ea34b8d98.js","mappings":"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","sources":["webpack://@vallista-land/blog/./src/components/SearchBox/index.tsx","webpack://@vallista-land/blog/./src/pages/posts.tsx"],"sourcesContent":["import { css } from '@emotion/react'\r\nimport styled from '@emotion/styled'\r\nimport { VFC } from 'react'\r\n\r\ntype SearchBoxSize = 'small' | 'large'\r\n\r\ninterface SearchBoxProps {\r\n  value: string\r\n  onSearch: (target: string) => void\r\n  size?: SearchBoxSize\r\n  placeholder?: string\r\n}\r\n\r\nexport const SearchBox: VFC<SearchBoxProps> = (props) => {\r\n  const { value, onSearch, size = 'small', placeholder } = props\r\n\r\n  const hasSearchText = value.length !== 0\r\n\r\n  return (\r\n    <Search hasSearchText={hasSearchText} size={size} placeholder={placeholder}>\r\n      <Input value={value} onChange={(e) => onSearch(e.currentTarget.value)} />\r\n      <svg\r\n        viewBox='0 0 24 24'\r\n        width={sizeMapper[size]}\r\n        height={sizeMapper[size]}\r\n        stroke='currentColor'\r\n        strokeWidth='1.5'\r\n        strokeLinecap='round'\r\n        strokeLinejoin='round'\r\n        fill='none'\r\n        shapeRendering='geometricPrecision'\r\n      >\r\n        <path d='M11 17.25a6.25 6.25 0 110-12.5 6.25 6.25 0 010 12.5z' />\r\n        <path d='M16 16l4.5 4.5' />\r\n      </svg>\r\n      <svg\r\n        onClick={() => onSearch('')}\r\n        viewBox='0 0 24 24'\r\n        width={sizeMapper[size]}\r\n        height={sizeMapper[size]}\r\n        stroke='currentColor'\r\n        strokeWidth='1.5'\r\n        strokeLinecap='round'\r\n        strokeLinejoin='round'\r\n        fill='none'\r\n        shapeRendering='geometricPrecision'\r\n      >\r\n        <path d='M21 4H8l-7 8 7 8h13a2 2 0 002-2V6a2 2 0 00-2-2z' />\r\n        <path d='M18 9l-6 6' />\r\n        <path d='M12 9l6 6' />\r\n      </svg>\r\n    </Search>\r\n  )\r\n}\r\n\r\nconst sizeMapper = {\r\n  small: 15,\r\n  large: 24\r\n}\r\n\r\nconst Search = styled.label<{ hasSearchText: boolean; size: SearchBoxSize; placeholder: string }>`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 30px;\r\n  border-radius: 15px;\r\n\r\n  ${({ theme, size, placeholder, hasSearchText }) => css`\r\n    background: ${theme.colors.PRIMARY.ACCENT_2};\r\n\r\n    &::before {\r\n      content: '${placeholder}';\r\n      font-size: 1rem;\r\n      position: absolute;\r\n      left: 41px;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      color: ${theme.colors.PRIMARY.ACCENT_3};\r\n      font-weight: 500;\r\n    }\r\n\r\n    ${hasSearchText &&\r\n    css`\r\n      &::before {\r\n        opacity: 0;\r\n      }\r\n    `}\r\n\r\n    ${size === 'large' &&\r\n    css`\r\n      height: 60px;\r\n      border-radius: 24px;\r\n\r\n      & input {\r\n        font-size: 1.5rem;\r\n        width: calc(100% - 100px);\r\n        left: 50px;\r\n      }\r\n\r\n      &::before {\r\n        left: 52px;\r\n        font-size: 1.5rem;\r\n      }\r\n    `}\r\n  `}\r\n\r\n  & > svg {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  ${({ theme, hasSearchText }) => css`\r\n    border: 1px solid transparent;\r\n    transition: border 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n\r\n    &:focus-within {\r\n      border: 1px solid ${theme.colors.PRIMARY.ACCENT_3};\r\n    }\r\n\r\n    & > svg:first-of-type {\r\n      left: 12px;\r\n      color: ${theme.colors.PRIMARY.ACCENT_4};\r\n    }\r\n\r\n    & > svg:last-of-type {\r\n      cursor: pointer;\r\n      opacity: ${hasSearchText ? 1 : 0};\r\n      right: 12px;\r\n      color: ${theme.colors.ERROR.DARK};\r\n    }\r\n  `}\r\n`\r\n\r\nconst Input = styled.input`\r\n  width: calc(100% - 85px);\r\n  position: relative;\r\n  left: 40px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  border: none;\r\n  background: none;\r\n  outline: none;\r\n\r\n  :focus {\r\n    background: none;\r\n  }\r\n`\r\n","import styled from '@emotion/styled'\r\nimport { Container, Spacer, Text } from '@vallista-land/core'\r\nimport { graphql } from 'gatsby'\r\nimport { useMemo, useState, VFC } from 'react'\r\n\r\nimport Layout from '../components/Layout'\r\nimport { ListTable } from '../components/ListTable'\r\nimport { SearchBox } from '../components/SearchBox'\r\nimport { IndexQuery, PageProps } from '../types/type'\r\nimport { toDate, getTime } from '../utils'\r\n\r\nconst PostsPage: VFC<PageProps<IndexQuery>> = (props) => {\r\n  const { data } = props\r\n  const { nodes } = data.allMarkdownRemark\r\n  const [search, setSearch] = useState('')\r\n\r\n  const sortPosts = useMemo(() => {\r\n    return nodes\r\n      .sort((a, b) => {\r\n        const base = toDate(a.frontmatter.date)\r\n        const target = toDate(b.frontmatter.date)\r\n\r\n        return target.getTime() - base.getTime()\r\n      })\r\n      .map((it) => {\r\n        const { slug } = it.fields\r\n        const { date, title: name } = it.frontmatter\r\n        const [, month, day] = getTime(date)\r\n        const time = toDate(date)\r\n\r\n        return {\r\n          time: time.getTime(),\r\n          date: `${Number(month)}월 ${day}일`,\r\n          name,\r\n          slug\r\n        }\r\n      })\r\n      .sort((a, b) => Number(b.time) - Number(a.time))\r\n  }, [nodes])\r\n\r\n  const posts = useMemo(() => {\r\n    const remake = nodes\r\n      .sort((a, b) => {\r\n        const base = toDate(a.frontmatter.date)\r\n        const target = toDate(b.frontmatter.date)\r\n\r\n        return target.getTime() - base.getTime()\r\n      })\r\n      .reduce<Record<string, Array<{ name: string; date: string; slug: string }>>>((acc, curr) => {\r\n        const { slug } = curr.fields\r\n        const { date, title: name } = curr.frontmatter\r\n        const [year, month, day] = getTime(date)\r\n\r\n        if (!acc[year]) acc[year] = []\r\n\r\n        acc[year].push({\r\n          name,\r\n          date: `${Number(month)}월 ${day}일`,\r\n          slug\r\n        })\r\n\r\n        return acc\r\n      }, {})\r\n\r\n    const values = Object.values(remake)\r\n    return Object.keys(remake)\r\n      .map((it, idx) => ({\r\n        year: it,\r\n        posts: values[idx]\r\n      }))\r\n      .sort((a, b) => Number(b.year) - Number(a.year))\r\n  }, [nodes])\r\n\r\n  const filteredSearchPosts = useMemo(() => sortPosts.filter((it) => it.name.includes(search)), [sortPosts, search])\r\n\r\n  const hasSearchText = search.length !== 0\r\n\r\n  return (\r\n    <Layout nodes={nodes}>\r\n      <Wrapper>\r\n        <Container>\r\n          <SearchBox value={search} onSearch={setSearch} size='large' placeholder='검색할 텍스트를 입력하세요.' />\r\n          <Spacer y={2} />\r\n        </Container>\r\n        {hasSearchText ? (\r\n          filteredSearchPosts.length === 0 ? (\r\n            <>\r\n              <Text size={20} weight={600}>\r\n                검색된 결과가 없어요 :(\r\n              </Text>\r\n              <Text size={20} weight={600}>\r\n                다른 결과를 검색해보시겠어요?\r\n              </Text>\r\n            </>\r\n          ) : (\r\n            <ListTable underline title='검색결과' list={filteredSearchPosts} />\r\n          )\r\n        ) : (\r\n          posts.map((it) => (\r\n            <Container key={it.year}>\r\n              <div>\r\n                <ListTable title={it.year} list={it.posts} underline />\r\n              </div>\r\n              <Spacer y={2} />\r\n            </Container>\r\n          ))\r\n        )}\r\n      </Wrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  padding: 2rem;\r\n`\r\nexport default PostsPage\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostsQuery {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      nodes {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date\r\n          image {\r\n            publicURL\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["SearchBox","props","value","onSearch","size","placeholder","hasSearchText","length","Search","Input","onChange","e","currentTarget","viewBox","width","sizeMapper","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fill","shapeRendering","d","onClick","small","large","theme","css","colors","PRIMARY","ACCENT_2","ACCENT_3","ACCENT_4","ERROR","DARK","Wrapper","nodes","data","allMarkdownRemark","useState","search","setSearch","sortPosts","useMemo","sort","a","b","base","toDate","frontmatter","date","getTime","map","it","slug","fields","name","title","month","day","time","Number","posts","remake","reduce","acc","curr","year","push","values","Object","keys","idx","filteredSearchPosts","filter","includes","Layout","y","weight","ListTable","underline","list"],"sourceRoot":""}