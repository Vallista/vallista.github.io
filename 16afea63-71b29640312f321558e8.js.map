{"version":3,"file":"16afea63-71b29640312f321558e8.js","mappings":"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","sources":["webpack://@vallista-land/blog/./src/components/Header/index.tsx"],"sourcesContent":["import { css } from '@emotion/react'\nimport styled from '@emotion/styled'\nimport { Modal, Spacer, Text, Toggle, useTheme } from '@vallista-land/core'\nimport { useEffect, useState, VFC } from 'react'\n\ninterface HeaderProps {\n  fold: boolean\n  folding: () => void\n}\n\nconst fontSizeControllerMapper = [14, 16, 18, 20]\n\nexport const Header: VFC<HeaderProps> = (props) => {\n  const { fold, folding } = props\n  const theme = useTheme()\n  const [mode, setMode] = useState<'light' | 'dark'>(() => {\n    if (typeof window === 'undefined') return 'light'\n    return (window.localStorage.getItem('theme') as 'light' | 'dark' | undefined) || 'light'\n  })\n  const [popup, setPopup] = useState(false)\n  const [textSize, setTextSize] = useState(16)\n\n  useEffect(() => {\n    if (!mode) return\n\n    theme.state.changeTheme(mode)\n    window.localStorage.setItem('theme', mode)\n  }, [mode])\n\n  useEffect(() => {\n    if (!document?.body?.parentElement) return\n    if (textSize === 16) {\n      const { fontSize, ...otherProps } = document.body.parentElement.style\n      ;(document.body.parentElement as any).style = otherProps\n      return\n    }\n\n    document.body.parentElement.style.fontSize = `${textSize}px`\n  }, [textSize])\n\n  return (\n    <Container fold={fold}>\n      <div>\n        <FoldingButton fold={fold} onClick={folding}>\n          <svg\n            viewBox='0 0 24 24'\n            width='18'\n            height='18'\n            stroke='currentColor'\n            strokeWidth='1.5'\n            strokeLinecap='round'\n            strokeLinejoin='round'\n            fill='none'\n            shapeRendering='geometricPrecision'\n          >\n            <rect x='3' y='3' width='18' height='18' rx='2' ry='2' />\n            <path d='M9 3v18' />\n          </svg>\n        </FoldingButton>\n        <Spacer />\n        <SettingButton popup={popup} onClick={() => setPopup(!popup)}>\n          <svg\n            viewBox='0 0 24 24'\n            width='18'\n            height='18'\n            stroke='currentColor'\n            strokeWidth='1.5'\n            strokeLinecap='round'\n            strokeLinejoin='round'\n            fill='none'\n            shapeRendering='geometricPrecision'\n          >\n            <circle cx='12' cy='12' r='3' />\n            <path d='M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 010 2.83 2 2 0 01-2.83 0l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-2 2 2 2 0 01-2-2v-.09A1.65 1.65 0 009 19.4a1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83 0 2 2 0 010-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 01-2-2 2 2 0 012-2h.09A1.65 1.65 0 004.6 9a1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 010-2.83 2 2 0 012.83 0l.06.06a1.65 1.65 0 001.82.33H9a1.65 1.65 0 001-1.51V3a2 2 0 012-2 2 2 0 012 2v.09a1.65 1.65 0 001 1.51 1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 0 2 2 0 010 2.83l-.06.06a1.65 1.65 0 00-.33 1.82V9a1.65 1.65 0 001.51 1H21a2 2 0 012 2 2 2 0 01-2 2h-.09a1.65 1.65 0 00-1.51 1z' />\n          </svg>\n        </SettingButton>\n      </div>\n      <ThemeToggleContainer>\n        <svg\n          viewBox='0 0 24 24'\n          width='18'\n          height='18'\n          stroke='currentColor'\n          strokeWidth='1.5'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n          fill='none'\n          shapeRendering='geometricPrecision'\n        >\n          <circle cx='12' cy='12' r='5' />\n          <path d='M12 1v2' />\n          <path d='M12 21v2' />\n          <path d='M4.22 4.22l1.42 1.42' />\n          <path d='M18.36 18.36l1.42 1.42' />\n          <path d='M1 12h2' />\n          <path d='M21 12h2' />\n          <path d='M4.22 19.78l1.42-1.42' />\n          <path d='M18.36 5.64l1.42-1.42' />\n        </svg>\n        <Toggle toggle={mode === 'dark'} size='medium' onChange={handleDarkModeToggle} color='pink' />\n        <svg\n          viewBox='0 0 24 24'\n          width='18'\n          height='18'\n          stroke='currentColor'\n          strokeWidth='1.5'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n          fill='none'\n          shapeRendering='geometricPrecision'\n        >\n          <path d='M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z' />\n        </svg>\n      </ThemeToggleContainer>\n      <Modal.Modal active={popup}>\n        <Modal.Body>\n          <Modal.Header>\n            <Modal.Title>설정</Modal.Title>\n            <Spacer y={2} />\n            <EnvironmentContainer>\n              <Text weight={500}>텍스트 크기</Text>\n              <SelectGaugeWrapper>\n                {fontSizeControllerMapper.map((it, idx, arr) => (\n                  <SelectGauge\n                    key={idx}\n                    value={it}\n                    idx={idx}\n                    max={arr.length}\n                    onClick={() => changeREM(it)}\n                    selected={textSize}\n                  />\n                ))}\n              </SelectGaugeWrapper>\n            </EnvironmentContainer>\n          </Modal.Header>\n        </Modal.Body>\n        <Modal.Actions>\n          <Modal.Action onClick={() => setPopup(false)}>\n            <Text>닫기</Text>\n          </Modal.Action>\n        </Modal.Actions>\n      </Modal.Modal>\n    </Container>\n  )\n\n  function handleDarkModeToggle(state: boolean): void {\n    if (state) {\n      setMode('dark')\n    } else {\n      setMode('light')\n    }\n  }\n\n  function changeREM(size: number): void {\n    setTextSize(size)\n  }\n}\n\nconst Container = styled.header<{ fold: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: fixed;\n  left: 400px;\n  top: 0;\n  width: calc(100% - 400px);\n  height: 43px;\n  padding: 0 1rem;\n  box-sizing: border-box;\n\n  ${({ theme, fold }) => css`\n    z-index: ${theme.layers.AFTER_STANDARD};\n    background-color: ${theme.colors.PRIMARY.ACCENT_1};\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);\n\n    ${fold &&\n    css`\n      width: calc(100% - 80px) !important;\n      left: 80px;\n    `}\n  `}\n\n  @media screen and (max-width: 1024px) {\n    left: 0;\n    width: 100% !important;\n  }\n`\n\nconst FoldingButton = styled.button<{ fold: boolean }>`\n  cursor: pointer;\n  border: none;\n  background: none;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  height: 18px;\n  transition: color 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);\n\n  ${({ theme, fold }) => css`\n    ${fold\n      ? css`\n          color: ${theme.colors.HIGHLIGHT.PINK};\n        `\n      : css`\n          &:hover {\n            color: ${theme.colors.PRIMARY.FOREGROUND};\n          }\n          color: ${theme.colors.PRIMARY.ACCENT_4};\n        `}\n  `}\n\n  @media screen and (max-width: 1024px) {\n    display: none;\n\n    & + span {\n      display: none;\n    }\n  }\n`\n\nconst SettingButton = styled.button<{ popup: boolean }>`\n  cursor: pointer;\n  border: none;\n  background: none;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  height: 18px;\n  transition: color 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);\n\n  ${({ theme, popup }) => css`\n    ${popup\n      ? css`\n          color: ${theme.colors.HIGHLIGHT.PINK};\n        `\n      : css`\n          &:hover {\n            color: ${theme.colors.PRIMARY.FOREGROUND};\n          }\n          color: ${theme.colors.PRIMARY.ACCENT_4};\n        `}\n  `}\n`\n\nconst ThemeToggleContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ${({ theme }) => css`\n    color: ${theme.colors.PRIMARY.FOREGROUND};\n  `}\n\n  & > label {\n    margin: 0 12px;\n  }\n`\n\nconst EnvironmentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nconst SelectGaugeWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 10px;\n  border-radius: 5px;\n  margin: 0.5rem 0;\n  ${({ theme }) => css`\n    background-color: ${theme.colors.PRIMARY.ACCENT_2};\n  `}\n`\n\nconst SelectGauge = styled.div<{ idx: number; max: number; value: number; selected: number }>`\n  position: absolute;\n  width: 12px;\n  height: 12px;\n  border-radius: 10px;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n\n  ${({ theme, idx, max, value, selected }) => css`\n    left: ${(idx / (max - 1)) * 100}%;\n    top: 50%;\n    background-color: ${selected === value ? theme.colors.HIGHLIGHT.PINK : theme.colors.PRIMARY.ACCENT_8};\n\n    &:first-of-type {\n      left: 1.5%;\n    }\n\n    &:last-of-type {\n      right: 95%;\n    }\n\n    &::after {\n      content: '${value}';\n      position: absolute;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      top: 30px;\n    }\n  `}\n`\n"],"names":["fontSizeControllerMapper","Header","props","fold","folding","theme","useTheme","useState","window","localStorage","getItem","mode","setMode","popup","setPopup","textSize","setTextSize","useEffect","state","changeTheme","setItem","document","body","parentElement","style","fontSize","otherProps","Container","FoldingButton","onClick","viewBox","width","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fill","shapeRendering","x","y","rx","ry","d","SettingButton","cx","cy","r","ThemeToggleContainer","toggle","size","onChange","color","active","EnvironmentContainer","weight","SelectGaugeWrapper","map","it","idx","arr","SelectGauge","value","max","length","selected","css","layers","AFTER_STANDARD","colors","PRIMARY","ACCENT_1","HIGHLIGHT","PINK","FOREGROUND","ACCENT_4","ACCENT_2","ACCENT_8"],"sourceRoot":""}