<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Today I Learned</title>
  
  <subtitle>Vallista On Stage</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://vallista.kr/"/>
  <updated>2020-06-14T12:14:12.480Z</updated>
  <id>https://vallista.kr/</id>
  
  <author>
    <name>Vallista</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>면접에서 의미있는 질문을 하고 있나요</title>
    <link href="https://vallista.kr/2020/06/14/%EB%A9%B4%EC%A0%91%EC%97%90%EC%84%9C-%EC%9D%98%EB%AF%B8%EC%9E%88%EB%8A%94-%EC%A7%88%EB%AC%B8%EC%9D%84-%ED%95%98%EA%B3%A0-%EC%9E%88%EB%82%98%EC%9A%94/"/>
    <id>https://vallista.kr/2020/06/14/면접에서-의미있는-질문을-하고-있나요/</id>
    <published>2020-06-14T12:14:12.000Z</published>
    <updated>2020-06-14T12:14:12.480Z</updated>
    
    <content type="html"><![CDATA[<p><img src="0.jpg" alt="image0"></p><p>개발을 하다보면 다양한 언어, 라이브러리 그리고 프레임워크와 마주하게 됩니다. 웹 개발을 예시로 질문을 해보면, <strong>React와 Vue와 같은 프레임워크(라이브러리)를 사용하는데있어 우리가 제대로 이해하고 사용하는 걸까요?</strong> 정도의 질문일 겁니다. 이 질문은 상당히 어렵습니다. 왜냐하면 React와 Vue가 제시하는 철학에 대한 이해를 동반해야하기 때문입니다. 이런 질문은 “우리는 라이브러리를 그냥 쓰기만 하면 되는 부분이다” 라고 이야기를 할 수 있겠으나 좀 더 잘 쓰기 위해 이런 질문에 대해서 한번 쯤 생각을 해보는 게 좋습니다.</p><h2 id="철학"><a href="#철학" class="headerlink" title="철학"></a>철학</h2><p>철학의 위키피디아 설명은 이렇습니다.</p><blockquote><p>철학(哲學, 고대 그리스어: φιλοσοφία, 영어: philosophy)은 세계와 인간의 삶에 대한 근본 원리 즉 인간의 본질, 세계관 등을 탐구하는 학문이다. 또한 존재, 지식, 가치, 이성, 인식 그리고 언어, 논리, 윤리 등의 일반적이며 기본적인 대상의 실체를 연구하는 학문이다. 이 말은 프로타고라스에 의해서 만들어졌다고 한다. 철학적 방법이란 질문, 비판적 토론, 이성적 주장, 그리고 체계적 진술을 포함한다.</p></blockquote><br><p>설명이 너무나 광범위합니다. 실제로 철학에 대한 설명이나 이야기에 대해서 저도 깊게 공부해보지 않았기 때문에, 철학에 대해 깊게 이야기는 해볼 수 없습니다.</p><p>다만, 이 글에서 <strong>철학</strong>이라고 이야기 하는 부분은 <strong>근본, 이해, 방향성</strong> 정도로 해석을 하여 사용했습니다. 아래와 같은 비유어로의 쓰임새라고 보시면 됩니다.</p><ul><li>“이번 임원진은 기업 경영에 철학이 없어.” : 여기서 철학은 ‘신념’ 정도의 의미로 쓰였다.</li><li>“이러한 주장은 경제학의 기본 철학이 됩니다.” : 여기서 철학은 ‘중심 생각(main idea)’ 또는 ‘대전제’ 정도로 쓰였다.</li><li>“당신이 그런 말도 할 줄 알고, 의외로 철학적인 면이 있네.” : 여기서 철학은 ‘추상적인 개념에 대해 고민하는’ 정도의 의미로 쓰였다.</li></ul><p>개인적으로 저는, 개발자로써 중요한 덕목 중에 하나로 개발함에 있어 <strong>왜 라고 나한테 질문이 돌아왔을 때, 이유를 말할 수 있어야 한다</strong> 를 한 가지로 꼽고 있습니다.</p><p>이 이야기는 <strong>왜 라고 말할 수 있어야 한다</strong>의 한 단계를 올라간 부분이라고 보시면 됩니다. 이 이야기를 갑자기 꺼내는 이유는 이 부분이 제가 이 글에서 이야기하는 철학과 관련되어 있기 때문입니다.</p><h2 id="왜라고-말할-수-있는가"><a href="#왜라고-말할-수-있는가" class="headerlink" title="왜라고 말할 수 있는가"></a>왜라고 말할 수 있는가</h2><p>개발자에게 있어 <strong>왜</strong> 는 중요하다고 생각합니다. 사고의 흐름이 무언가를 개발함에 있어 <strong>왜</strong>가 동반하지 않는다면 효율적인 결과를 낼 수 없다고 생각하기 때문입니다.</p><p>간단하게 웹 프론트엔드 면접에서 많이 질문되는 몇 가지 질문을 해보겠습니다.</p><ol><li>React와 Vue의 차이점이 무엇입니까?</li><li>React를 사용하는 이유는 무엇입니까?</li><li>JavaScript에서 Prototype은 무엇입니까?</li></ol><p>그렇다면 위 질문을 하는 까닭이 무엇일까요? 답변을 하기 전에 어떤 까닭으로 이런 질문을 하는지 고민을 해볼 필요성이 있습니다.</p><ol><li>React와 Vue 두 프레임워크를 사용을 해보았는가? 그렇다면 어떤 상황에서 React와 Vue를 사용해야할 지 알고 있는가?</li><li>기존 JavaScript 개발과 React 라이브러리(공식 사이트에서 라이브러리라고 하므로, 여기서도 라이브러리라고 정의하겠습니다.)를 사용하여 개발을 했을 때 어떤점이 이점이고, JavaScript 생태계에 대한 이해가 있는가?</li><li>JavaScript에서 객체의 생성이나 내부 동작에 대해서 이해하고 있는가?</li><li>생각하는 흐름을 알기 위해서</li></ol><blockquote><p>물론 위의 질문 뿐만 아니라, 면접을 열심히 준비했는가에 대한 척도로써 쓸 수도 있겠으나 이건 너무 오만하기 때문에 제외하도록 하겠습니다.</p></blockquote><br><p>개인적으로 생각하기에, <strong>이런 질문이 의미있는가?</strong> 를 한번 고민을 해볼 필요가 있을 것 같습니다. 불과 얼마 전까지 면접에서 저는 이런 질문을 하곤 했었습니다. 당시의 의도는 위에 작성한 이유를 알기 위해서 였습니다. 그런데, 지금와서 생각해보면 이러한 질문은 <strong>의미가 없어 보입니다</strong></p><p>왜 의미가 없냐면 아래와 같은 이유입니다.</p><ol><li>위의 질문은 실제로 개발 실력과 대다수가 거의 무관합니다.</li><li>면접 하루 전에만 외워도 답변할 수 있는 수준의 질문입니다.</li></ol><p>웹 상에서 몇 분만 서치해보면 나오는 <strong>왜</strong>보다, 본인이 정말 고민해보고 생각할 수 있을만한 질문을 하는게 더 좋은 질문임은 자명합니다. 그러면 아까까지 이야기를 게속 했었던 <strong>철학</strong>을 바탕으로 질문을 조금 돌려보도록 하겠습니다.</p><ol><li>React와 Vue에서 추구하는 개발론이 뭐가 다르기에 저마다 React와 Vue를 사용하나요?</li><li>JavaScript는 왜 Prototype을 사용하나요?</li></ol><p>어휘가 조금만 달라졌을 뿐인데, 풍성하게 답변할 수 있는 질문으로 변경이 되었습니다. 이 질문은 위의 질문처럼 의미가 없지 않습니다.</p><ol><li>React, Vue가 역설하는 철학에 대해서 이해를 한다면 그 철학을 이해한 코딩을 하도록 노력하므로 관련된 지식 습득을 했을 가능성이 높습니다.</li><li>Prototype의 사용 목적에 대해서는 일반적으로 “상속을 이용한 …” 으로 대답을 할 텐데, 왜 사용하냐고 물어보면 상속의 장점을 이야기 해야하므로 기본기에 대해서 파고들 수 있습니다. 이러한 기본기는 개발을 하는데 중요합니다.</li><li>만약 해당 질문에 대해 고민해 본 적이 없다면, 생각나는데로 이야기를 해달라고 요청하고, 생각의 흐름을 이끌어 낼 수 있습니다.</li></ol><p>“왜”를 말 할줄 아는 것은 중요합니다. 하지만 그 “왜”가 다른 사람들이 모두 이해한 “왜” 수준이면 조금 아쉽습니다.</p><h2 id="왜라고-말할-수-있되-조금-더-깊이"><a href="#왜라고-말할-수-있되-조금-더-깊이" class="headerlink" title="왜라고 말할 수 있되, 조금 더 깊이"></a>왜라고 말할 수 있되, 조금 더 깊이</h2><p>모두가 말할 수 있는 정도로 이야기를 하는 것도 나쁘지는 않습니다. 그렇다면 왜 더 깊이 알아야 할까요? 예시로, 자바스크립트에서 프로토타입에 대해서 이야기를 조금 더 해보도록 하겠습니다.</p><p>자바스크립트가 프로토타입 기반 언어라고 불린다고, 객체지향이 아닌게 아닙니다. <strong>객체지향의 한 갈래가 프로토타입 기반</strong> 인 것이죠. 객체의 단위는 class일 수도 있고 function일 수도 있습니다. 객체의 단위는 저마다 다르게 정의할 수 있기 때문이고, 구현하는 방법에 따라 다르기 때문입니다.</p><p>따라서, 프로토타입 기반- 는 <strong>소프트웨어 디자인 패턴</strong> 중 하나인 <strong>프로토타입 디자인 패턴</strong>과 연관이 있습니다. 그렇다면, 이 프로토타입 디자인 패턴이 왜 쓰이는 지 이해하면 JavaScript에서 채택한 이유도 알 수 있겠군요.</p><p>프로토타입 디자인 패턴은 여러 장점이 있지만, 그 중에서도 <strong>객체의 생성 비용을 효과적으로 줄일 수 있습니다</strong> 그렇다면 프로토타입 기반에서 추구하는 것 중 하나는 <strong>객체의 생성 비용을 효과적으로 줄일 수 있기 때문</strong> 이라고 볼 수 있겠군요. 그렇다면 JavaScript가 적용되던 환경은 객체의 생성 비용을 줄여야하는 환경이었음을 파악할 수 있습니다.</p><p>JavaScript가 도입되던 옛 환경은 메모리가 적었기 때문에 자바스크립트에서 추구하는 프로토타입 기반의 프로그래밍은 타당할 수 있습니다. 하지만 지금으로 와서는 그다지 와닿지 않는 것은 사실입니다. 왜냐하면 웹이 활동하는 영역이 너무나 커졌고, 그리고 디바이스의 발전으로 크롬에서는 툭하면 6기가를 먹질않나, 환경이 너무 좋아졌거든요.</p><p>그래서 함수 기반으로 개발하는 프로토타입 기반 시스템보다 클래스 기반 객체 모델이 더 많은 호응을 현 시점에도 얻고 있고, 자료형 관점에서 JavaScript는 너무나 많은 욕을 먹고있죠. 그렇기 때문에 ECMA Script 표준 4버전에서는 자바스크립트를 클래스 기반의 언어로 만드려 하고 있고, 그마저도 시원찮아서 TypeScript와 같은 언어가 나와 어셈블리가 JavaScript가 되어버리는 형태가 되어 버렸습니다. (이러한 형태의 이야기는 추후 글로 따로 만들어 이야기를 해보도록 하겠습니다.)</p><hr><p>자바스크립트 프로토타입으로 이야기를 해봤습니다. 물론 여기에 적은 내용보다 훨씬 더 많은 내용을 이야기 할 수 있겠으나, 이 글에서 이야기하고자 하는 내용이 아니므로 패스한 것들이 있습니다.</p><p>이 처럼 자바스크립트의 철학인 프로토타입에 대해 접근하고, 프로토타입에서 이야기하는 철학에 대해 접근하니 어떤 부분이 장점이고 어떤 부분이 단점인 지 알게 되었습니다. 그러면서 현재 자바스크립트가 나아가는 방향성도 알게 되었네요.</p><p>철학을 이해한다는 것은 처음에 언급한 <strong>근본, 이해, 방향성</strong> 을 보는 것입니다. 그렇기 때문에 앞으로 내가 어떤 방향으로 뭘 준비해야할 지 알게 됩니다.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>무작정 무언가를 공부하기 보다, 그 공부하는 대상의 철학을 고민해보면 의외로 쉽게 답을 낼 수 있습니다. 이 글을 황급히 작성하는 이유도 저희 팀 웹 프론트엔드 개발자를 뽑을때 어떤걸 봐야할까 고민을 하는 중 <strong>의미있는 질문을 하고 있을까?</strong> 라는 질문을 제게 되내이게 되었는데요 이 글은, 그런 고민을 정리한 글입니다.</p><p>면접은 사람을 평가하는 자리가 아니고 그 사람을 더 알기 위해서 있는 자리라고 생각합니다. 이러한 고민이 더 좋은 팀원을 얻는 과정이길 기대합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;0.jpg&quot; alt=&quot;image0&quot;&gt;&lt;/p&gt;
&lt;p&gt;개발을 하다보면 다양한 언어, 라이브러리 그리고 프레임워크와 마주하게 됩니다. 웹 개발을 예시로 질문을 해보면, &lt;strong&gt;React와 Vue와 같은 프레임워크(라이브러리)를
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 디자인 패턴 - 메멘토 패턴</title>
    <link href="https://vallista.kr/2020/06/07/TypeScript-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4/"/>
    <id>https://vallista.kr/2020/06/07/TypeScript-디자인-패턴-메멘토-패턴/</id>
    <published>2020-06-07T09:41:05.000Z</published>
    <updated>2020-06-07T09:41:05.988Z</updated>
    
    <content type="html"><![CDATA[<p><img src="0.jpg" alt="이미지0"></p><h2 id="메멘토-패턴"><a href="#메멘토-패턴" class="headerlink" title="메멘토 패턴"></a>메멘토 패턴</h2><p>설계 문제에 대해서 해답을 문서화 해놓은 디자인 패턴에는 생성, 구조, 행동, 동시실행과 같은 분류가 있습니다. 그 중에서 메멘토 패턴은 동작에 대한 패턴입니다.</p><p>메멘토 패턴은 초기 HP 제품을 위해 <code>Noah Thompson</code>과 <code>Dr.Drew Clinkenbeard</code>에 의해 제작되었으며, 객체는 <code>구현 변경 테스트 재사용이 쉬워야 한다</code> 는 것을 기술한 <code>23가지 GOF의 디자인패턴</code> 중 하나입니다.</p><p>이 패턴이 해결할 수 있는 문제는 <code>객체 내부 상태를 저장하므로써 객체 상태가 변경되었을 때 이전 상태로의 복구</code> 입니다. 즉, 쉽게 이야기 하면 이전 상태(원상태)로 되돌리는 역할을 합니다. 이 패턴이 주요로 사용되는 곳은 에러 콜백, 삭제에 대한 되돌림와 같은 유저 액션에 대해서도 충분히 대응이 가능합니다.</p><p>특히나 메멘토 패턴은 <code>캡슐화를 해치지 않는 선에서 내부 상태에 대한 원복</code>을 목표로 하기 때문에, 객체지향 관점에서 효과적이라 볼 수 있습니다. 하지만 캡슐화가 잘 된 객체는 데이터 구조가 잘 숨겨져 있기 때문에 객체의 외부에서 접근이 쉽지 않습니다. 어떻게 접근할 수 있을까요?</p><h2 id="메멘토-패턴-1"><a href="#메멘토-패턴-1" class="headerlink" title="메멘토 패턴"></a>메멘토 패턴</h2><p>메멘토 패턴은 캡슐화가 잘 된 객체에 접근할 수 있도록 3가지 객체로 이루어집니다.</p><h3 id="오리지네이터-Originator"><a href="#오리지네이터-Originator" class="headerlink" title="오리지네이터 (Originator)"></a>오리지네이터 (Originator)</h3><p>오리지네이터는 내부의 상태를 가지고 있는 객체입니다.</p><ul><li>객체에 내부 상태를 저장</li><li>객체로부터 이전 상태를 복구</li></ul><p>오리지네이터는 단독으로 객체에 접근할 수 있습니다.</p><h3 id="케어테이커-Caretaker"><a href="#케어테이커-Caretaker" class="headerlink" title="케어테이커 (Caretaker)"></a>케어테이커 (Caretaker)</h3><p>케어테이커는 오리지네이터에 대해서 액션을 제공하지만, 변경에 대한 취소 및 저장에 대해서만 제공합니다. 다른 기능도 제공하게 되면 단일-책임원칙에 위배되기 때문입니다.</p><h3 id="메멘토-Memento"><a href="#메멘토-Memento" class="headerlink" title="메멘토 (Memento)"></a>메멘토 (Memento)</h3><p>메멘토 객체는 Originator와 반대로, 변경되기 이 전의 상태를 갖고있는 객체입니다.</p><br><p>위의 3가지 객체는 아래의 순서대로 작동합니다.</p><ol><li>케어테이커는 오리지네이터에 대해서 변경에 대한 실행 취소를 진행합니다.</li><li>그러기 위해 오리지네이터에게 메멘토 객체를 요청합니다.</li><li>오리지네이터는 내부 상태를 변경하기위해서 메멘토 객체를 반환하며 케어테이커는 반환된 메멘토 객체를 적용합니다.</li></ol><br><p>케어테이커(클라이언트)는 오리지네이터로 부터 메멘토를 요청합니다. 이는 오리지네이터의 내부 상태를 저장하기 위함이며, 오리지네이터에게 메멘토를 다시 돌려줄 수 있습니다.</p><h2 id="구조"><a href="#구조" class="headerlink" title="구조"></a>구조</h2><p><img src="1.jpg" alt="이미지1"><br>(사진 1. 메멘토의 구조)</p><br><p><img src="2.jpg" alt="이미지2"><br>(사진 2. Saving, Restoring 프로세스)</p><br><p>이 프로세스를 React 프로젝트를 적용하기 이전에 코드를 살펴봅시다.</p><br><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> state1<span class="token punctuation">:</span> string  <span class="token keyword">public</span> state2<span class="token punctuation">:</span> string  <span class="token function">constructor</span><span class="token punctuation">(</span>state1<span class="token punctuation">:</span> string<span class="token punctuation">,</span> state2<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state1 <span class="token operator">=</span> state1    <span class="token keyword">this</span><span class="token punctuation">.</span>state2 <span class="token operator">=</span> state2  <span class="token punctuation">}</span>  <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Memento <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state1<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state2<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">restoreMemento</span><span class="token punctuation">(</span>memento<span class="token punctuation">:</span> Memento<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state1 <span class="token operator">=</span> memento<span class="token punctuation">.</span>state1    <span class="token keyword">this</span><span class="token punctuation">.</span>state2 <span class="token operator">=</span> memento<span class="token punctuation">.</span>state2  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>  readonly state1<span class="token punctuation">:</span> string  readonly state2<span class="token punctuation">:</span> string  <span class="token function">constructor</span><span class="token punctuation">(</span>state1<span class="token punctuation">:</span> string<span class="token punctuation">,</span> state2<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state1 <span class="token operator">=</span> state1    <span class="token keyword">this</span><span class="token punctuation">.</span>state2 <span class="token operator">=</span> state2  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CareTaker</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> memento<span class="token punctuation">:</span> Memento<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">saving</span><span class="token punctuation">(</span>originator<span class="token punctuation">:</span> Originator<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>memento<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">restoring</span><span class="token punctuation">(</span>originator<span class="token punctuation">:</span> Originator<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>memento<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    originator<span class="token punctuation">.</span><span class="token function">restoreMemento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>memento<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>memento<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> originator<span class="token punctuation">:</span> Originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">)</span><span class="token keyword">const</span> careTaker<span class="token punctuation">:</span> CareTaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CareTaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>careTaker<span class="token punctuation">.</span><span class="token function">saving</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>originator<span class="token punctuation">.</span>state1 <span class="token operator">=</span> <span class="token string">'second'</span>originator<span class="token punctuation">.</span>state2 <span class="token operator">=</span> <span class="token string">'two'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>careTaker<span class="token punctuation">.</span><span class="token function">restoring</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span></code></pre><p><code>careTaker</code> 객체는 originator 객체를 받아 저장 및 복원을 진행합니다. Originator는 Memento를 만들어낼 뿐이지, 자신의 상태에 대해서만 가지고 있습니다. 실제로 일을 하는 곳은 <code>CareTaker</code>라 보시면되고, 스냅샷을 <code>Memento</code>라고 이해하시면 되겠습니다.</p><p>그렇다면 이렇게 이해한 코드를 바탕으로 구현을 해보도록 합시다.</p><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><p>해당 코드는 <a href="https://github.com/Vallista/React-Memento-Pattern-Use-TypeScript" target="_blank" rel="noopener">React-Memento-Pattern-Use-TypeScript</a>에서 확인할 수 있습니다.</p><p><img src="https://github.com/Vallista/React-Memento-Pattern-Use-TypeScript/blob/master/screenshots/1.gif?raw=true" alt="1"><br>(사진 3. 실행 결과)</p><p>Todo List 예시를 사용하여 변화에 대해서 롤백할 수 있는 기능을 메멘토 패턴으로 추가를 해보겠습니다.</p><h3 id="모델"><a href="#모델" class="headerlink" title="모델"></a>모델</h3><p><strong>src/models/memento.ts</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IOriginator</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>  <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T  <span class="token function">restoreMemento</span><span class="token punctuation">(</span>memento<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CareTaker</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> mementoList<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">saving</span><span class="token punctuation">(</span>originator<span class="token punctuation">:</span> IOriginator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mementoList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">restoring</span><span class="token punctuation">(</span>originator<span class="token punctuation">:</span> IOriginator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mementoList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    originator<span class="token punctuation">.</span><span class="token function">restoreMemento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mementoList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>mementoList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mementoList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mementoList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>메멘토 패턴에 들어가는 기본적인 인터페이스와 클래스입니다.</p><p>IOriginator는 Original 객체에 대해서 느슨한 결합으로 추가할 수 있게 도와줍니다. 현재 객체의 상태에 대해서 저장하기 위해, Generic으로 T를 받아, 해당 타입을 반환하고 restore시 parameter로 받을 수 있도록 함수를 만듭니다.</p><p>CareTaker는 단독으로 사용될 수 있어야 합니다. 그렇기 때문에 느슨한 연결보다, 클래스로 기능을 명시합니다. CareTaker에서 진행할 내용은 저장과 롤백 두 가지 기능을 진행할 것 입니다. 해당 객체에 대해서 상태를 저장할 수 있도록 generic으로 T를 받고, T 타입에 대해서 상태를 여러개 물 수 있도록 T[] 와같은 배열 형태로 구현합니다. 이 배열은 힙으로 사용할 예정입니다. 저장할 때에는 T를 받아 push를 진행해주고, 롤백시에는 힙으로 사용하므로 가장 뒤에 있는 T를 가져와 적용하고, replacement 하도록 설계합니다.</p><br><p><strong>src/models/Removable</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">enum</span> RemoveState <span class="token punctuation">{</span>  IDLE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  REMOVE<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IRemovable</span> <span class="token punctuation">{</span>  <span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> RemoveState  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span></code></pre><p>Removable은 상태에 대한 enum 값과, 삭제가능한 객체인지를 알려주는 Interface로 구성됩니다. Removable을 구현하는 클래스는 느슨한 결합으로 쉽게 추가하고 붙일 수 있습니다.</p><br><p><strong>Todo.ts</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> IRemovable<span class="token punctuation">,</span> RemoveState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Removable"</span><span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token keyword">implements</span> <span class="token class-name">IRemovable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> removeState<span class="token punctuation">:</span> RemoveState  <span class="token keyword">private</span> readonly message<span class="token punctuation">:</span> string  <span class="token function">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>IDLE    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remove<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message  <span class="token punctuation">}</span>  <span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeState  <span class="token punctuation">}</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">!==</span> RemoveState<span class="token punctuation">.</span>REMOVE<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>REMOVE  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todo</code></pre><p>Todo 객체를 추상화한 Todo 클래스는 삭제상태와 메시지를 멤버 변수로 갖고 있습니다. 캡슐화를 완성하기 위해서 멤버변수는 은닉화를 해주었고, 외부 진입에 대해서 한정적이게 하도록 get 함수로 외부로의 연결통로를 두었습니다.</p><br><p><strong>TodoList.ts</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Todo <span class="token keyword">from</span> <span class="token string">"./Todo"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RemoveState<span class="token punctuation">,</span> IRemovable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Removable'</span><span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">implements</span> <span class="token class-name">IRemovable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> todos<span class="token punctuation">:</span> Todo<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">private</span> removeState<span class="token punctuation">:</span> RemoveState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>IDLE  <span class="token function">constructor</span><span class="token punctuation">(</span>todos<span class="token punctuation">:</span> Todo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>todos<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>todos <span class="token operator">=</span> todos      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span><span class="token string">'테스트'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remove<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span><span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> RemoveState<span class="token punctuation">.</span>REMOVE<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">!==</span> RemoveState<span class="token punctuation">.</span>REMOVE<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>REMOVE  <span class="token punctuation">}</span>  <span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeState  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TodoList</code></pre><p>TodoList는 생성 말고도 데이터를 덮어쓰기 가능하도록 constructor에 예외를 줍니다. 해당 부분은 뒤에서 설명이 좀 더 이루어 집니다.</p><br><p><strong>TodoListCollection.ts</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">"./TodoList"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> IOriginator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Memento"</span><span class="token keyword">import</span> Todo <span class="token keyword">from</span> <span class="token string">"./Todo"</span><span class="token keyword">class</span> <span class="token class-name">TodoListCollection</span> <span class="token keyword">implements</span> <span class="token class-name">IOriginator</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoListCollection</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> todoList<span class="token punctuation">:</span> TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todoList <span class="token operator">=</span> list  <span class="token punctuation">}</span>  <span class="token function">setTodoList</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todoList <span class="token operator">=</span> list  <span class="token punctuation">}</span>  <span class="token function">getTodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todoList  <span class="token punctuation">}</span>  <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> TodoListCollection <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TodoListCollection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>todoList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>list <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> todoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoList</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> todoList    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">restoreMemento</span><span class="token punctuation">(</span>memento<span class="token punctuation">:</span> TodoListCollection<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todoList <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getTodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TodoListCollection</code></pre><p>TodoListCollection은 실제 렌더링은 되지 않지만 상태를 갖고있는 Originator 클래스 입니다.</p><p>해당 클래스에서 메멘토를 만들고, 상태에 대해서 적용하는 코드가 탄생합니다.</p><p>createMemento에서는 TodoListCollection단위로 객체를 재 생성합니다. 이렇게 재생성 하는 이유는 JavaScript의 Prototype의 한계가 있기 때문입니다. 그래서 DeepCopy를 통해 데이터를 재바인딩 합니다.</p><h2 id="React-component-hooks-구현"><a href="#React-component-hooks-구현" class="headerlink" title="React component, hooks 구현"></a>React component, hooks 구현</h2><p>이제 이 모델을 사용해야하는데 React와 객체지향 모델과의 결합을 하는 예제는 많지 않기 때문에 생소할 수 있습니다. 그래서, 최근 가장 많이 사용한다는 hooks와 functional component 형태로 제작해보겠습니다.</p><br><p><strong>src/hooks/useTodo.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">'../models/TodoList'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CareTaker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../models/Memento'</span><span class="token punctuation">;</span><span class="token keyword">import</span> TodoListCollection <span class="token keyword">from</span> <span class="token string">'../models/TodoListCollection'</span><span class="token punctuation">;</span><span class="token keyword">const</span> careTaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CareTaker</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoListCollection</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoListCollection</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">useTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>todoListCollection<span class="token punctuation">,</span> setTodoListCollection<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> reRender <span class="token operator">=</span> <span class="token punctuation">(</span>other<span class="token punctuation">:</span> TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTodoListCollection</span><span class="token punctuation">(</span>      <span class="token punctuation">[</span><span class="token operator">...</span>todoListCollection<span class="token punctuation">,</span> <span class="token operator">...</span>other<span class="token punctuation">]</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> addTodoList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    originator<span class="token punctuation">.</span><span class="token function">setTodoList</span><span class="token punctuation">(</span>todoListCollection<span class="token punctuation">)</span>    careTaker<span class="token punctuation">.</span><span class="token function">saving</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>    <span class="token keyword">const</span> todoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">[</span>todoList<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token punctuation">(</span>TodoList<span class="token punctuation">:</span> TodoList<span class="token punctuation">,</span> message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    originator<span class="token punctuation">.</span><span class="token function">setTodoList</span><span class="token punctuation">(</span>todoListCollection<span class="token punctuation">)</span>    careTaker<span class="token punctuation">.</span><span class="token function">saving</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>    TodoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> allAddTodo <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    originator<span class="token punctuation">.</span><span class="token function">setTodoList</span><span class="token punctuation">(</span>todoListCollection<span class="token punctuation">)</span>    careTaker<span class="token punctuation">.</span><span class="token function">saving</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>    todoListCollection<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> allRemoveTodo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'정말 삭제하시겠습니까?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      originator<span class="token punctuation">.</span><span class="token function">setTodoList</span><span class="token punctuation">(</span>todoListCollection<span class="token punctuation">)</span>      careTaker<span class="token punctuation">.</span><span class="token function">saving</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>      todoListCollection<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          todo<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> rollback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    careTaker<span class="token punctuation">.</span><span class="token function">restoring</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originator<span class="token punctuation">)</span>    <span class="token function">setTodoListCollection</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">getTodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    todoListCollection<span class="token punctuation">,</span>    addTodoList<span class="token punctuation">,</span>    addTodo<span class="token punctuation">,</span>    allAddTodo<span class="token punctuation">,</span>    allRemoveTodo<span class="token punctuation">,</span>    rollback  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> useTodo</code></pre><p>custom hook인 useTodo 입니다. 모델과 대응되고 있으며, 모델의 코드를 프론트에 제공해주기 위해 리액트 코드로 변환하는 과정입니다.</p><ol><li>CareTaker와 originator를 최상단에 선언해줍니다. hooks안에 선언하면 매 갱신시마다 새로 할당이 되므로, 메모리에서 못써먹습니다. 그러므로 useHooks 파일이 불렸을 때 메모리에 로드되도록 선언합니다.</li><li>custom hooks의 todoListCollection을 useState로 상태를 만듭니다. 상태의 타입은 모델이므로 TodoList[]로 지정합니다. 해당 부분을 TodoListCollection Class로 하지 않는 이유는, 상태 변경으로 리스트 갱신이 React에서는 클래스 단일로 진행하기 어렵기 때문입니다.</li><li>reRender 함수는 shallow copy를 통해 React Component가 재랜더링 할 수 있도록 도와주는 함수입니다.</li><li>addTodoList, addTodo등 추가하거나 삭제하는 함수들의 내부에서는 상태 변경 전에 현재 스냅샷을 찍어 originator에 등록하고, careTaker에서 배열에 저장합니다.</li></ol><p>그리고 상태와 함수를 추출하여 밖으로 내보냅니다.</p><br><p><strong>src/components/Todo.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'../App.css'</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> Todo<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span>message<span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todo</code></pre><p>Todo Component는 간단하게 message만 prop으로 받아서 렌더링을 해줍니다.</p><br><p><strong>src/components/Todos.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'../App.css'</span><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">'../models/TodoList'</span><span class="token keyword">import</span> Todo <span class="token keyword">from</span> <span class="token string">'./Todo'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> convertNumberToKorean <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>  todos<span class="token punctuation">:</span> TodoList  index<span class="token punctuation">:</span> number  <span class="token function">addTodo</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">:</span> TodoList<span class="token punctuation">,</span> message<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">const</span> Todos<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> todos<span class="token punctuation">,</span> index<span class="token punctuation">,</span> addTodo <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">convertNumberToKorean</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Todo</span> <span class="token attr-name">message</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button</span> <span class="token attr-name">bottom-absolute"</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>todos<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>todos<span class="token punctuation">.</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 번째 테스트`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>      <span class="token attr-name">}</span><span class="token punctuation">></span></span><span class="token operator">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todos</code></pre><p>Todos에서는 TodoList 모델을 받아서 렌더링 해줍니다.</p><ol><li>index를 받는 이유는 실행하고 하나, 둘, 셋 등의 한국말로 텍스트를 띄워주기 위해 index 번호를 받습니다.</li><li>addTodo는 추가 된 후 렌더링을 해주어야 하므로 hooks에서 만든 함수를 Prop Drilling 으로 내려줍니다.</li><li>convertNumberToKorean은 하나, 둘, 셋 과 같이 한글 숫자로 번역해주도록 만든 함수입니다.</li></ol><br><h2 id="App-적용"><a href="#App-적용" class="headerlink" title="App 적용"></a>App 적용</h2><p>App에서 실제로 적용해줍니다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token keyword">import</span> useTodo <span class="token keyword">from</span> <span class="token string">'./hooks/useTodo'</span><span class="token keyword">import</span> Todos <span class="token keyword">from</span> <span class="token string">'./components/Todos'</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> todoListCollection<span class="token punctuation">,</span> addTodoList<span class="token punctuation">,</span> addTodo<span class="token punctuation">,</span> allAddTodo<span class="token punctuation">,</span> allRemoveTodo<span class="token punctuation">,</span> rollback <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">addTodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collection<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>todoListCollection<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todoList<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Todos</span> <span class="token attr-name">todos</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todoList<span class="token punctuation">}</span></span> <span class="token attr-name">index</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span> <span class="token attr-name">addTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>addTodo<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>addTodoList<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>콜렉션 추가<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">allAddTodo</span><span class="token punctuation">(</span><span class="token string">'전체 추가'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>전체 추가<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">allRemoveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>전체 삭제<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>롤백<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p><img src="https://github.com/Vallista/React-Memento-Pattern-Use-TypeScript/blob/master/screenshots/1.gif?raw=true" alt="2"><br>(사진 4: 결과)</p><p>실행을 해보면 롤백이 제대로 동작하는 걸 볼 수 있습니다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>메멘토 패턴을 사용해 현재 상태를 저장하고, 롤백하는 구현을 쉽게 진행하였습니다. 다만 상태가 많아지면 메모리를 많이 먹으므로 최대 배열의 갯수를 잡아 코딩을 진행하는게 좋습니다.</p><p>또한 메멘토 패턴은 커멘드 패턴을 통해 커맨드에 대한 롤백 및 미래에 대한 커맨드를 기억하고 추가하거나 하여 시뮬레이팅 시스템을 구현할 수도 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;0.jpg&quot; alt=&quot;이미지0&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;메멘토-패턴&quot;&gt;&lt;a href=&quot;#메멘토-패턴&quot; class=&quot;headerlink&quot; title=&quot;메멘토 패턴&quot;&gt;&lt;/a&gt;메멘토 패턴&lt;/h2&gt;&lt;p&gt;설계 문제에 대해서 해답을 문서화
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 디자인 패턴 - 옵저버 패턴</title>
    <link href="https://vallista.kr/2020/05/22/TypeScript-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4/"/>
    <id>https://vallista.kr/2020/05/22/TypeScript-디자인-패턴-옵저버-패턴/</id>
    <published>2020-05-22T11:30:33.000Z</published>
    <updated>2020-06-04T05:27:52.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="0.jpg" alt="이미지0"></p><h2 id="옵저버-패턴이란"><a href="#옵저버-패턴이란" class="headerlink" title="옵저버 패턴이란"></a>옵저버 패턴이란</h2><p>설계 문제에 대해서 해답을 문서화 해놓은 디자인 패턴에는 생성, 구조, 행동, 동시실행과 같은 분류가 있습니다. 그 중에서 옵저버 패턴은 행동과 관련된 디자인 패턴입니다.</p><p>옵저버 패턴은 감지할 객체의 클래스에 옵저버 인터페이스를 주고, 만든 객체를 옵저버 서버에 등록하여 옵저버 서버에서 함수를 호출해 인터페이스에 대응하는 함수를 실행합니다.</p><p>이 패턴은 개방 폐쇄 원칙을 지키게 도와주며, 캡슐화가 잘 된 객체를 만들 수 있도록 도와줍니다.</p><h2 id="옵저버-패턴"><a href="#옵저버-패턴" class="headerlink" title="옵저버 패턴"></a>옵저버 패턴</h2><p>아래의 코드는 <a href="https://github.com/Vallista/React-Observer-Pattern-Use-TypeScript" target="_blank" rel="noopener">React Observer Pattern Use TypeScript</a>에서 보실 수 있습니다.</p><p><img src="1.png" alt="1"><br>(그림 1: 옵저버 패턴의 구상도)</p><br><p>옵저버 패턴은 Observer Interface를 옵저빙할 객체에 상속하는 형태로 구현합니다. 그렇게 상속받은 객체를 배열로 저장해서 배열에서 For Loop를 돌려 모두에게 이벤트를 전파하는 방식입니다.</p><p>그렇다면 이 옵저버 패턴을 어디에 적용할 수 있을까요? 조금 억지스러운 감이 있지만, TodoList가 여러개 있을때 한번에 모든 Todo List의 Todo를 한개씩 생성하거나, 모든 Todo를 삭제하는 행동을 옵저버 패턴으로 구현할 수 있습니다.</p><br><p><img src="https://github.com/Vallista/React-Observer-Pattern-Use-TypeScript/raw/master/screenshots/2.gif?raw=true" alt="2"><br>(그림 2: 옵저버 패턴을 적용해 전체 추가와 전체 삭제 기능을 구현)</p><p>그림에 나오는 것처럼 옵저버 패턴을 적용해서 구현을 해보겠습니다.</p><h3 id="모델-구현"><a href="#모델-구현" class="headerlink" title="모델 구현"></a>모델 구현</h3><p>옵저버 패턴을 적용하기 전에, 프로젝트에 쓰일 추상화된 모델을 구현합시다. 프로젝트가 커져감에따라 객체지향 형태로 추상화해서 모델을 만드는 것은 필요합니다.</p><br><p><strong>Observer.ts</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IObserver</span> <span class="token punctuation">{</span>  <span class="token function">notifyAddTodo</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span>  <span class="token function">notifyRemoveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> observerCollection<span class="token punctuation">:</span> IObserver<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observerCollection <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">registration</span><span class="token punctuation">(</span>observer<span class="token punctuation">:</span> IObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observerCollection<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">notifyAddTodo</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observerCollection<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">notifyAddTodo</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">notifyRemoveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observerCollection<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">notifyRemoveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>먼저, 오늘의 주인공 Observer 입니다. Observer Interface에서는 이벤트 함수를 들고 있습니다. Todo를 모두 추가하거나 삭제하기 위한 이벤트 입니다. 이제 이 인터페이스는 객체에 적절히 추가될 것 입니다.</p><p>Subject 클래스는 IObserver Interface를 구현한 객체를 담는 배열을 들고 있고, 해당 이벤트를 발생시키기 위한 함수가 있습니다. Subject에서 notifyAddTodo, notifyRemoveTodo를 실행하면 배열을 돌면서 observerCollection에 있는 객체의 함수를 실행하게 됩니다. </p><p>Observer Collection에 Observer 객체를 등록시킬때는 registration 함수를 사용하여 등록합니다.</p><br><p><strong>src/models/Removable</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">enum</span> RemoveState <span class="token punctuation">{</span>  IDLE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  REMOVE<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IRemovable</span> <span class="token punctuation">{</span>  <span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> RemoveState  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span></code></pre><p>Removable은 상태에 대한 enum 값과, 삭제가능한 객체인지를 알려주는 Interface로 구성됩니다. Removable을 구현하는 클래스는 느슨한 결합으로 쉽게 추가하고 붙일 수 있습니다.</p><br><p><strong>Todo.ts</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> IRemovable<span class="token punctuation">,</span> RemoveState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Removable"</span><span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token keyword">implements</span> <span class="token class-name">IRemovable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> removeState<span class="token punctuation">:</span> RemoveState  <span class="token keyword">private</span> readonly message<span class="token punctuation">:</span> string  <span class="token function">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>IDLE    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remove<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message  <span class="token punctuation">}</span>  <span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeState  <span class="token punctuation">}</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">!==</span> RemoveState<span class="token punctuation">.</span>REMOVE<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>REMOVE  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todo</code></pre><p>Todo 객체를 추상화한 Todo 클래스는 삭제상태와 메시지를 멤버 변수로 갖고 있습니다. 캡슐화를 완성하기 위해서 멤버변수는 은닉화를 해주었고, 외부 진입에 대해서 한정적이게 하도록 get 함수로 외부로의 연결통로를 두었습니다.</p><br><p><strong>TodoList.ts</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Todo <span class="token keyword">from</span> <span class="token string">"./Todo"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RemoveState<span class="token punctuation">,</span> IRemovable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Removable'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> IObserver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Observer'</span><span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">implements</span> <span class="token class-name">IRemovable</span><span class="token punctuation">,</span> IObserver <span class="token punctuation">{</span>  <span class="token keyword">private</span> readonly todos<span class="token punctuation">:</span> Todo<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">private</span> removeState<span class="token punctuation">:</span> RemoveState  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span><span class="token string">'테스트'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>IDLE    <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remove<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>notifyAddTodo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notifyAddTodo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>notifyRemoveTodo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notifyRemoveTodo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span><span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> RemoveState<span class="token punctuation">.</span>REMOVE<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">!==</span> RemoveState<span class="token punctuation">.</span>REMOVE<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>removeState <span class="token operator">=</span> RemoveState<span class="token punctuation">.</span>REMOVE  <span class="token punctuation">}</span>  <span class="token function">getRemoveState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>removeState  <span class="token punctuation">}</span>  <span class="token function">notifyAddTodo</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">notifyRemoveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      todo<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TodoList</code></pre><p>TodoList는 Subject에서 제공한 함수를 동작시키기 위해 Observer Interface를 구현합니다. 그래서 이 TodoList를 받아, Observer Collection에서 동작시킬 것 입니다.</p><h2 id="React-component-hooks-구현"><a href="#React-component-hooks-구현" class="headerlink" title="React component, hooks 구현"></a>React component, hooks 구현</h2><p>이제 이 모델을 사용해야하는데 React와 객체지향 모델과의 결합을 하는 예제는 많지 않기 때문에 생소할 수 있습니다. 그래서, 최근 가장 많이 사용한다는 hooks와 functional component 형태로 제작해보겠습니다.</p><br><p><strong>src/hooks/useTodo.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">'../models/TodoList'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Subject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../models/Observer'</span><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">useTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>todoListCollection<span class="token punctuation">,</span> setTodoListCollection<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> reRender <span class="token operator">=</span> <span class="token punctuation">(</span>other<span class="token punctuation">:</span> TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTodoListCollection</span><span class="token punctuation">(</span>      <span class="token punctuation">[</span><span class="token operator">...</span>todoListCollection<span class="token punctuation">,</span> <span class="token operator">...</span>other<span class="token punctuation">]</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> addTodoList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> todoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">[</span>todoList<span class="token punctuation">]</span><span class="token punctuation">)</span>    subject<span class="token punctuation">.</span><span class="token function">registration</span><span class="token punctuation">(</span>todoList<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token punctuation">(</span>TodoList<span class="token punctuation">:</span> TodoList<span class="token punctuation">,</span> message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    TodoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> allAddTodo <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    subject<span class="token punctuation">.</span><span class="token function">notifyAddTodo</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> allRemoveTodo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'정말 삭제하시겠습니까?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subject<span class="token punctuation">.</span><span class="token function">notifyRemoveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">reRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    todoListCollection<span class="token punctuation">,</span>    addTodoList<span class="token punctuation">,</span>    addTodo<span class="token punctuation">,</span>    allAddTodo<span class="token punctuation">,</span>    allRemoveTodo  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> useTodo</code></pre><p>custom hook인 useTodo 입니다. 모델과 대응되고 있으며, 모델의 코드를 프론트에 제공해주기 위해 리액트 코드로 변환하는 과정입니다.</p><ol><li>Subject를 받아 hooks 밖에 생성을 합니다. hooks 밖에 생성하는 이유는 컴포넌트가 렌더 될 때마다 새로 custom hooks를 호출하기 때문에 hooks안에 넣으면 계속 동적할당하여 초기화합니다.</li><li>custom hooks의 todoListCollection을 useState로 상태를 만듭니다. 상태의 타입은 모델이므로 TodoList[]로 지정합니다.</li><li>reRender 함수는 shallow copy를 통해 React Component가 재랜더링 할 수 있도록 도와주는 함수입니다.</li><li>addTodoList 함수는 TodoList 모델을 생성하면서 registration으로 Subject에 등록합니다.</li><li>addTodo 함수는 해당 TodoList에 todo를 추가합니다.</li><li>allAddTodo, allRemoveTodo는 subject에 이벤트를 보내고 재랜더링합니다.</li></ol><p>그리고 상태와 함수를 추출하여 밖으로 내보냅니다.</p><br><p><strong>src/components/Todo.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'../App.css'</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> Todo<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span>message<span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todo</code></pre><p>Todo Component는 간단하게 message만 prop으로 받아서 렌더링을 해줍니다.</p><br><p><strong>src/components/Todos.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'../App.css'</span><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">'../models/TodoList'</span><span class="token keyword">import</span> Todo <span class="token keyword">from</span> <span class="token string">'./Todo'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> convertNumberToKorean <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>  todos<span class="token punctuation">:</span> TodoList  index<span class="token punctuation">:</span> number  <span class="token function">addTodo</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">:</span> TodoList<span class="token punctuation">,</span> message<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">const</span> Todos<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> todos<span class="token punctuation">,</span> index<span class="token punctuation">,</span> addTodo <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">convertNumberToKorean</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todos-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Todo</span> <span class="token attr-name">message</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button</span> <span class="token attr-name">bottom-absolute"</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>todos<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>todos<span class="token punctuation">.</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 번째 테스트`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>      <span class="token attr-name">}</span><span class="token punctuation">></span></span><span class="token operator">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todos</code></pre><p>Todos에서는 TodoList 모델을 받아서 렌더링 해줍니다.</p><ol><li>index를 받는 이유는 실행하고 하나, 둘, 셋 등의 한국말로 텍스트를 띄워주기 위해 index 번호를 받습니다.</li><li>addTodo는 추가 된 후 렌더링을 해주어야 하므로 hooks에서 만든 함수를 Prop Drilling 으로 내려줍니다.</li><li>convertNumberToKorean은 하나, 둘, 셋 과 같이 한글 숫자로 번역해주도록 만든 함수입니다.</li></ol><br><h2 id="App-적용"><a href="#App-적용" class="headerlink" title="App 적용"></a>App 적용</h2><p>App에서 실제로 적용해줍니다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token keyword">import</span> useTodo <span class="token keyword">from</span> <span class="token string">'./hooks/useTodo'</span><span class="token keyword">import</span> Todos <span class="token keyword">from</span> <span class="token string">'./components/Todos'</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> todoListCollection<span class="token punctuation">,</span> addTodoList<span class="token punctuation">,</span> addTodo<span class="token punctuation">,</span> allAddTodo<span class="token punctuation">,</span> allRemoveTodo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">addTodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collection<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>todoListCollection<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todoList<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Todos</span> <span class="token attr-name">todos</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todoList<span class="token punctuation">}</span></span> <span class="token attr-name">index</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span> <span class="token attr-name">addTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>addTodo<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>addTodoList<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>콜렉션 추가<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">allAddTodo</span><span class="token punctuation">(</span><span class="token string">'전체 추가'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>전체 추가<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">allRemoveTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>전체 삭제<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p><img src="https://github.com/Vallista/React-Observer-Pattern-Use-TypeScript/raw/master/screenshots/2.gif?raw=true" alt="2"></p><p>실행을 해보면 전체 추가, 삭제가 제대로 동작하는 걸 볼 수 있습니다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>옵저버 패턴을 사용하면 모델 내에서 해당 이벤트에 대한 처리를 할 수 있으므로 레거시 로직이 아닌, 기능상의 로직으로 모델에 남을 수 있습니다.</p><p>또, Subject에서 이벤트를 관리할 수 있으며 EventDispatcher를 만들어 서버 로그 및 서버 통신에 대한 결과값을 가공하는 형태로도 작성할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;0.jpg&quot; alt=&quot;이미지0&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;옵저버-패턴이란&quot;&gt;&lt;a href=&quot;#옵저버-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;옵저버 패턴이란&quot;&gt;&lt;/a&gt;옵저버 패턴이란&lt;/h2&gt;&lt;p&gt;설계 문제에 대해서
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 디자인 패턴 - 팩토리 패턴</title>
    <link href="https://vallista.kr/2020/05/05/TypeScript-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4/"/>
    <id>https://vallista.kr/2020/05/05/TypeScript-디자인-패턴-팩토리-패턴/</id>
    <published>2020-05-05T11:44:56.000Z</published>
    <updated>2020-06-04T05:27:52.903Z</updated>
    
    <content type="html"><![CDATA[<p><img src="0.jpg" alt="이미지0"></p><h2 id="팩토리-패턴이란"><a href="#팩토리-패턴이란" class="headerlink" title="팩토리 패턴이란"></a>팩토리 패턴이란</h2><p>설계 문제에 대해서 해답을 문서화 해놓은 디자인 패턴에는 생성, 구조, 행동, 동시실행과 같은 분류가 있습니다. 그 중에서 팩토리 패턴은 생성과 관련된 디자인 패턴 입니다.</p><p>팩토리 패턴은 말 그대로 공장이라고 생각하면 편합니다. 하나의 클래스나 객체를 생성하는데 쓰이며, 주요로 사용되는 것은 <strong>추상 팩토리</strong>와 <strong>팩토리 매서드</strong> 패턴이 있습니다.</p><p>오늘은 이 두 패턴에 대해서 알아볼 것이며, 이름이 비슷하다보니 햇갈릴 수도 있고, 정리가 안될수도 있는데 이를 타입스크립트로 코딩을 해보며 직접 알아보도록 합시다.</p><h2 id="팩토리-메서드-패턴"><a href="#팩토리-메서드-패턴" class="headerlink" title="팩토리 메서드 패턴"></a>팩토리 메서드 패턴</h2><p>팩토리 메서드는 부모 클래스에서 타입에 따라 클래스를 생성하는 방법입니다. 자식 클래스를 생성하는 상황에서 부모 클래스의 팩토리를 호출하여 생성해주는 방식으로 처리하며, 이러한 방법의 장점은 자식 클래스 생성에 대해 파편화를 막아주며, 자식 클래스가 늘어나는 상황에서 효과적으로 코드 수정을 할 수 있게 도와줍니다.</p><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">enum</span> InputType <span class="token punctuation">{</span>    DEFAULT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    ANIMATED<span class="token punctuation">,</span>    UNSHAPED<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">InputFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> InputType<span class="token punctuation">)</span><span class="token punctuation">:</span> Input <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> InputType<span class="token punctuation">.</span>ANIMATED<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnimatedInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> InputType<span class="token punctuation">.</span>UNSHAPED<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnShapedInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AnimatedInput</span> <span class="token keyword">extends</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input class="animated-input" />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UnShapedInput</span> <span class="token keyword">extends</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input class="unshaped-input" />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> inputArr<span class="token punctuation">:</span> Input<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>inputArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span>inputArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>ANIMATED<span class="token punctuation">)</span><span class="token punctuation">)</span>inputArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>UNSHAPED<span class="token punctuation">)</span><span class="token punctuation">)</span>inputArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>위 코드를 보면, InputArr 배열을 만들고 InputFactory로 넣어주었습니다. 그렇게 결과값을 보니 input element가 적절히 출력되는걸 볼 수 있습니다.</p><h3 id="언제-쓰이는가"><a href="#언제-쓰이는가" class="headerlink" title="언제 쓰이는가"></a>언제 쓰이는가</h3><p><img src="1.jpg" alt="이미지1"></p><p>팩토리 매서드 패턴이 사용되는 곳은 다양한 자식 클래스가 생기며 파편화되는 상황에서 매니지먼트를 하기위해 사용됩니다. 위의 예처럼 다양한 Input이 있고, 해당 Input 생성을 타입별로 생성을 해주고 있습니다. Input.InputFactory 사용만으로 다양한 타입에 대해서 생성을 쉽게 해줄 수 있습니다.</p><p>즉, 객체 생성을 팩토리 클래스로 위임하므로써 팩토리 클래스에서 객체를 생성합니다.</p><h3 id="심화"><a href="#심화" class="headerlink" title="심화"></a>심화</h3><p><img src="2.jpg" alt="이미지2"></p><p>그렇다면 팩토리 매서드 패턴을 이용해서 조금 심화된 위의 구조를 코드로 구현해보도록 합시다.</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">enum</span> InputType <span class="token punctuation">{</span>    DEFAULT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    ANIMATED<span class="token punctuation">,</span>    UNSHAPED<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">InputFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> InputType<span class="token punctuation">)</span><span class="token punctuation">:</span> Input <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> InputType<span class="token punctuation">.</span>ANIMATED<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnimatedInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> InputType<span class="token punctuation">.</span>UNSHAPED<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnShapedInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AnimatedInput</span> <span class="token keyword">extends</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input class="animated-input" />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UnShapedInput</span> <span class="token keyword">extends</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input class="unshaped-input" />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> ButtonType <span class="token punctuation">{</span>    DEFAULT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    IMAGE<span class="token punctuation">,</span>    TEXT<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IButton</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> string    src<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> string    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">ButtonFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> ButtonType<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token punctuation">,</span> src <span class="token punctuation">}</span><span class="token punctuation">:</span> IButton<span class="token punctuation">)</span><span class="token punctuation">:</span> Button <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>            <span class="token keyword">case</span> ButtonType<span class="token punctuation">.</span>IMAGE<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImageButton</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> src<span class="token operator">!</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> ButtonType<span class="token punctuation">.</span>TEXT<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;button></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/button>`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ImageButton</span> <span class="token keyword">extends</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>    src<span class="token punctuation">:</span> string    <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">,</span> src<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">=</span> src    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;button class="none">            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> alt="button-img"/>        &lt;/button>`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TextButton</span> <span class="token keyword">extends</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`            &lt;button class="none">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/button>        `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> FormType <span class="token punctuation">{</span>    ONE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    TWO<span class="token punctuation">,</span>    THREE<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">FormFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> FormType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">let</span> button <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> FormType<span class="token punctuation">.</span>ONE<span class="token punctuation">:</span>                input <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span>                button <span class="token operator">=</span> Button<span class="token punctuation">.</span><span class="token function">ButtonFactory</span><span class="token punctuation">(</span>ButtonType<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'버튼'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FormType<span class="token punctuation">.</span>TWO<span class="token punctuation">:</span>                input <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>ANIMATED<span class="token punctuation">)</span>                button <span class="token operator">=</span> Button<span class="token punctuation">.</span><span class="token function">ButtonFactory</span><span class="token punctuation">(</span>ButtonType<span class="token punctuation">.</span>IMAGE<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'버튼'</span><span class="token punctuation">,</span> src<span class="token punctuation">:</span> <span class="token string">'https://asdasd.net'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FormType<span class="token punctuation">.</span>THREE<span class="token punctuation">:</span>                input <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>UNSHAPED<span class="token punctuation">)</span>                button <span class="token operator">=</span> Button<span class="token punctuation">.</span><span class="token function">ButtonFactory</span><span class="token punctuation">(</span>ButtonType<span class="token punctuation">.</span>TEXT<span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'버튼'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;div>            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>input<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>button<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">        &lt;/div>`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Form<span class="token punctuation">.</span><span class="token function">FormFactory</span><span class="token punctuation">(</span>FormType<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Form<span class="token punctuation">.</span><span class="token function">FormFactory</span><span class="token punctuation">(</span>FormType<span class="token punctuation">.</span>TWO<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Form<span class="token punctuation">.</span><span class="token function">FormFactory</span><span class="token punctuation">(</span>FormType<span class="token punctuation">.</span>THREE<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>이번에는 Form을 만드는 코드입니다. 팩토리 메서드 패턴을 이용해 Input과 Button을 팩토리 메서드를 호출하여 생성했습니다.</p><p>이 코드가 원하는 결과값은 <code>ONE</code>에 해당하는 Form이면 기본 버튼과 인풋, <code>TWO</code>에 해당하는 Form이면 각각 인풋과 버튼 타입의 두 번째 요소 (ANIMATED, IMAGE) 그리고 <code>THREE</code>에 해당하는 Form이면 세 번째 요소 (UNSHAPED, TEXT)를 출력해야 합니다.</p><p>그래서 결과값이 만들어질 때 보면 각각의 요소가 타입에 맞게 정돈되어 들어가 있는 형태를 확인할 수 있죠. 하지만 이렇게 점점 비대해지다보면 Switch문의 내부가 복잡해질 것 입니다.</p><p>이러한 상황에서 사용할 수 있는게 바로 추상 팩토리 패턴입니다.</p><h2 id="추상-팩토리-패턴"><a href="#추상-팩토리-패턴" class="headerlink" title="추상 팩토리 패턴"></a>추상 팩토리 패턴</h2><p>추상 팩토리 패턴은 객체의 집합을 만들때 사용합니다. 관련이 있는 객체를 묶어 하나의 팩토리 클래스로 만든 후, 팩토리를 조건에 따라서 생성하도록 팩토리를 다시 만들어 객체를 생성합니다.</p><p>위의 예제를 추상 팩토리 패턴으로 설계를 변경해보도록 합시다.</p><p><img src="3.jpg" alt="이미지3"></p><p>간단하게 추상 팩토리 패턴을 적용해보았습니다. 여기서 중요한 점은, 팩토리 메서드로 직접 받던 부분을 클래스 단위로 묶어서 만들고, 그 클래스를 팩토리 메서드로 한번 더 묶었다는 점입니다.</p><h3 id="코드-1"><a href="#코드-1" class="headerlink" title="코드"></a>코드</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">enum</span> InputType <span class="token punctuation">{</span>    DEFAULT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    ANIMATED<span class="token punctuation">,</span>    UNSHAPED<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">InputFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> InputType<span class="token punctuation">)</span><span class="token punctuation">:</span> Input <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> InputType<span class="token punctuation">.</span>ANIMATED<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnimatedInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> InputType<span class="token punctuation">.</span>UNSHAPED<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnShapedInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AnimatedInput</span> <span class="token keyword">extends</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input class="animated-input" />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UnShapedInput</span> <span class="token keyword">extends</span> <span class="token class-name">Input</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;input class="unshaped-input" />`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> ButtonType <span class="token punctuation">{</span>    DEFAULT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    IMAGE<span class="token punctuation">,</span>    TEXT<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IButton</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> string    src<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> string    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">ButtonFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> ButtonType<span class="token punctuation">,</span> text<span class="token punctuation">:</span> string<span class="token punctuation">,</span> src<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Button <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>            <span class="token keyword">case</span> ButtonType<span class="token punctuation">.</span>IMAGE<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImageButton</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> src<span class="token operator">!</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> ButtonType<span class="token punctuation">.</span>TEXT<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TextButton</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;button></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/button>`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ImageButton</span> <span class="token keyword">extends</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>    src<span class="token operator">?</span><span class="token punctuation">:</span> string    <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">,</span> src<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">=</span> src    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;button class="none">            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> alt="button-img"/>        &lt;/button>`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TextButton</span> <span class="token keyword">extends</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`            &lt;button class="none">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/button>        `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IFormFactory</span> <span class="token punctuation">{</span>    <span class="token function">createInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Input    <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Button    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NormalForm</span> <span class="token keyword">implements</span> <span class="token class-name">IFormFactory</span> <span class="token punctuation">{</span>    <span class="token function">createInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Input <span class="token punctuation">{</span>        <span class="token keyword">return</span> Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Button <span class="token punctuation">{</span>        <span class="token keyword">return</span> Button<span class="token punctuation">.</span><span class="token function">ButtonFactory</span><span class="token punctuation">(</span>ButtonType<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`            &lt;div>                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/div>        `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AnimatedImageForm</span> <span class="token keyword">implements</span> <span class="token class-name">IFormFactory</span> <span class="token punctuation">{</span>    <span class="token function">createInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> AnimatedInput <span class="token punctuation">{</span>        <span class="token keyword">return</span> Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>ANIMATED<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ImageButton <span class="token punctuation">{</span>        <span class="token keyword">return</span> Button<span class="token punctuation">.</span><span class="token function">ButtonFactory</span><span class="token punctuation">(</span>ButtonType<span class="token punctuation">.</span>IMAGE<span class="token punctuation">,</span> <span class="token string">'image'</span><span class="token punctuation">,</span> <span class="token string">'hihi'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`            &lt;div>                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/div>        `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UnShapedTextForm</span> <span class="token keyword">implements</span> <span class="token class-name">IFormFactory</span> <span class="token punctuation">{</span>    <span class="token function">createInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> UnShapedInput <span class="token punctuation">{</span>        <span class="token keyword">return</span> Input<span class="token punctuation">.</span><span class="token function">InputFactory</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>UNSHAPED<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> TextButton <span class="token punctuation">{</span>        <span class="token keyword">return</span> Button<span class="token punctuation">.</span><span class="token function">ButtonFactory</span><span class="token punctuation">(</span>ButtonType<span class="token punctuation">.</span>TEXT<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`            &lt;div>                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/div>        `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> FormType <span class="token punctuation">{</span>    ONE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    TWO<span class="token punctuation">,</span>    THREE<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">FormFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> FormType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> factory<span class="token punctuation">:</span> IFormFactory <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> FormType<span class="token punctuation">.</span>ONE<span class="token punctuation">:</span>                factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NormalForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FormType<span class="token punctuation">.</span>TWO<span class="token punctuation">:</span>                factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatedImageForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FormType<span class="token punctuation">.</span>THREE<span class="token punctuation">:</span>                factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnShapedTextForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Form<span class="token punctuation">.</span><span class="token function">FormFactory</span><span class="token punctuation">(</span>FormType<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Form<span class="token punctuation">.</span><span class="token function">FormFactory</span><span class="token punctuation">(</span>FormType<span class="token punctuation">.</span>TWO<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Form<span class="token punctuation">.</span><span class="token function">FormFactory</span><span class="token punctuation">(</span>FormType<span class="token punctuation">.</span>THREE<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>코드상에서도 많이 변경되지 않았습니다. 지금의 경우 케이스가 적어 상대적으로 코드가 비대해졌지만, 추후 코드가 많아지고 파일 분리가 되면 장점을 발휘할 것입니다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>팩토리 메서드 패턴을 이용하여 객체 생성에 대해 쉽게 관리를 하고, 관리가 비대해지면 추상 팩토리 패턴을 이용해 팩토리 메서드로 생성하는 객체를 한 곳에 모아서 객체로 만들어 관리할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;0.jpg&quot; alt=&quot;이미지0&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;팩토리-패턴이란&quot;&gt;&lt;a href=&quot;#팩토리-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;팩토리 패턴이란&quot;&gt;&lt;/a&gt;팩토리 패턴이란&lt;/h2&gt;&lt;p&gt;설계 문제에 대해서
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="디자인 패턴" scheme="https://vallista.kr/tags/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/"/>
    
      <category term="TypeScript" scheme="https://vallista.kr/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>효율적인 Storybook 컴포넌트 구조 만들기</title>
    <link href="https://vallista.kr/2020/04/26/%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-Storybook-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B5%AC%EC%A1%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
    <id>https://vallista.kr/2020/04/26/효율적인-Storybook-컴포넌트-구조-만들기/</id>
    <published>2020-04-26T06:19:08.000Z</published>
    <updated>2020-06-04T05:27:53.052Z</updated>
    
    <content type="html"><![CDATA[<p><img src="0.jpg" alt="이미지0"></p><p>최근 Storybook을 활용한 디자인 시스템 개발을 많은 회사에서 진행하고 있습니다. 디자인 시스템을 구축하면서 수많은 컴포넌트가 생성되고 사라지고를 반복하는데 이러한 컴포넌트 관리를 위해 <code>Atomic Design</code>을 많은 회사에서 채택하고 있는 듯 보입니다.</p><p>여기서 <code>Atomic Design</code>을 채택한다는 것은 <code>컴포넌트를 재사용할 수 있는 단위로 나눈다</code> 라는 것 입니다. <a href="https://vallista.kr/2020/03/29/Component-%EB%B6%84%EB%A6%AC%EC%9D%98-%EB%AF%B8%ED%95%99/">이전 글</a>에서도 언급했지만, 컴포넌트를 분리한다는 것은 그저 보기좋게 변경을 하는게 아닙니다.</p><p>실용적이고 아름다운 스트럭쳐를 구현하는 것이 컴포넌트를 효율적으로 분리하는거라 볼 수 있고, <code>Atomic Design</code>을 사용해서 그저 컴포넌트의 크기로 무분별하게 <code>Atomic하게</code> 나눈 것은 올바른 사용방법이 아니라고 생각합니다.</p><p>중요한 포인트는 <code>Atomic Design 재사용될 수 있는 레이아웃 컴포넌트를 나누는 기준</code> 입니다. 이번 글에서는 <code>Atomic Design</code>에 집중해서 구현하기보다, 더 효율저으로 구현할 수 있는 방법에 대해서 나름대로 찾은 컴포넌트 구조를 설명합니다.</p><br><blockquote><p>디자인 시스템이란?<br>_<br>[<a href="https://story.pxd.co.kr/1434]" target="_blank" rel="noopener">https://story.pxd.co.kr/1434]</a>(디자인 시스템) 포스트를 보면 더 도움이 될 수 있습니다.<br>“쉽게 말하면 디자인 시스템은 디자인 원칙, 규격, 다시 사용할 수 있는 UI 패턴과 컴포넌트, 코드를 포괄하는 종합 세트입니다.”</p></blockquote><h2 id="스토리북"><a href="#스토리북" class="headerlink" title="스토리북"></a>스토리북</h2><p><img src="1.png" alt="이미지1"></p><p>(예시 이미지: 스토리북으로 디자인 시스템을 구현중인 화면)</p><p>예시 링크: <a href="https://github.com/Vallista/DesignSystem" target="_blank" rel="noopener">https://github.com/Vallista/DesignSystem</a></p><h3 id="스토리북이란"><a href="#스토리북이란" class="headerlink" title="스토리북이란?"></a>스토리북이란?</h3><p>스토리북(Storybook)은 UI를 개발하고 플레이그라운드에서 테스트를 해볼 수 있는 UI Component 개발을 위한 툴 입니다. 테스팅, 프리뷰와 같은 기능을 사용할 수 있으며, 카테고리별로 컴포넌트를 열람할 수 있기 때문에 최근 디자인 시스템을 구축하는데 편리해 많이 사용되고 있습니다</p><h3 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h3><p><a href="https://github.com/Vallista/DesignSystem#issue" target="_blank" rel="noopener">Create React App에서 Storybook 추가하는 방법</a>을 참고하시면 쉬운 환경설정을 하실 수 있습니다.</p><p>Storybook은 <a href="https://github.com/Vallista/DesignSystem/blob/master/src/products/Blog/Card/index.stories.tsx" target="_blank" rel="noopener">Stories 파일</a>에 작업을 해서 Storybook에서 보일 수 있게 설정할 수 있으며 링크를 달아놓은 Stories 파일을 클릭해 들어가보시면, 아래와 같은 코드가 나오게 됩니다.</p><p><strong>Card/index.stories.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> withKnobs<span class="token punctuation">,</span> text<span class="token punctuation">,</span> number <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@storybook/addon-knobs'</span><span class="token keyword">import</span> Card<span class="token punctuation">,</span> <span class="token punctuation">{</span> ITheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ColorPalette <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../models/color'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Background <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../_common'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Card'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Card<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> Default <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'타이틀'</span><span class="token punctuation">,</span> <span class="token string">'컴포넌트 관리 기법'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'설명'</span><span class="token punctuation">,</span> <span class="token string">'안녕하세요 오늘은 컴포넌트 관리에 대해서 알아볼 것이에요'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'이미지'</span><span class="token punctuation">,</span> <span class="token string">'http://img.lifestyler.co.kr/uploads/program/1/1765/menu/2/html/f131755988183457049(0).jpg'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> viewCount <span class="token operator">=</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token string">'열람 수'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Background</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Card</span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span> <span class="token attr-name">description</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>description<span class="token punctuation">}</span></span> <span class="token attr-name">image</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>image<span class="token punctuation">}</span></span> <span class="token attr-name">viewCount</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>viewCount<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Background</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> White <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> theme<span class="token punctuation">:</span> ITheme <span class="token operator">=</span> <span class="token punctuation">{</span>    backgroundColor<span class="token punctuation">:</span> ColorPalette<span class="token punctuation">.</span>White<span class="token punctuation">.</span>WHITE<span class="token punctuation">,</span>    textColor<span class="token punctuation">:</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> ColorPalette<span class="token punctuation">.</span>Black<span class="token punctuation">.</span>LIGHT<span class="token punctuation">,</span>      description<span class="token punctuation">:</span> ColorPalette<span class="token punctuation">.</span>Gray<span class="token punctuation">.</span>DARK<span class="token punctuation">,</span>      viewCount<span class="token punctuation">:</span> ColorPalette<span class="token punctuation">.</span>Black<span class="token punctuation">.</span>LIGHT    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'타이틀'</span><span class="token punctuation">,</span> <span class="token string">'컴포넌트 관리 기법'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'설명'</span><span class="token punctuation">,</span> <span class="token string">'안녕하세요 오늘은 컴포넌트 관리에 대해서 알아볼 것이에요'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'이미지'</span><span class="token punctuation">,</span> <span class="token string">'http://img.lifestyler.co.kr/uploads/program/1/1765/menu/2/html/f131755988183457049(0).jpg'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> viewCount <span class="token operator">=</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token string">'열람 수'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Background</span> <span class="token attr-name">background</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ColorPalette<span class="token punctuation">.</span>Gradient<span class="token punctuation">.</span>RED_TO_YELLOW<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Card</span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span> <span class="token attr-name">description</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>description<span class="token punctuation">}</span></span> <span class="token attr-name">image</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>image<span class="token punctuation">}</span></span> <span class="token attr-name">viewCount</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>viewCount<span class="token punctuation">}</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Background</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>Default<span class="token punctuation">.</span>story <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Default'</span><span class="token punctuation">,</span>  decorators<span class="token punctuation">:</span> <span class="token punctuation">[</span> withKnobs <span class="token punctuation">]</span><span class="token punctuation">}</span>White<span class="token punctuation">.</span>story <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'White'</span><span class="token punctuation">,</span>  decorators<span class="token punctuation">:</span> <span class="token punctuation">[</span> withKnobs <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>이렇게 코드를 작성하면 아래와 같은 이미지로 스토리북에서 출력됩니다.</p><p><img src="2.png" alt="이미지2"></p><h3 id="Component-Story-Format-CSF"><a href="#Component-Story-Format-CSF" class="headerlink" title="Component Story Format (CSF)"></a>Component Story Format (CSF)</h3><p>위 스토리북 코드는 기존 스토리북을 사용하셨던 분이라면, 익숙하지 않을 소스일텐데요. 최근 스토리북 5.2 버전 이상에서는 <a href="https://storybook.js.org/docs/formats/component-story-format/" target="_blank" rel="noopener">Component Story Format (CSF)</a> 형식으로 stories를 작성하도록 권장하고 있습니다.</p><p><strong>기존 스토리북 사용법</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">storiesOf</span><span class="token punctuation">(</span><span class="token string">'Button'</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addDecorator</span><span class="token punctuation">(</span>withKnobs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addParameters</span><span class="token punctuation">(</span><span class="token punctuation">{</span> notes<span class="token punctuation">:</span> someNotes <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>변경된 스토리북 사용법</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Button'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> module<span class="token punctuation">,</span>  decorators<span class="token punctuation">:</span> <span class="token punctuation">[</span> withKnobs <span class="token punctuation">]</span><span class="token punctuation">,</span>  parameters<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> notes<span class="token punctuation">:</span> someNotes <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>변경이 되면서 기존 스토리북을 사용하던때와 달리, JS 친화적으로 변경된 걸 볼 수 있습니다. 기존에 문제였었던, component 안에 인라인 ReactNode가 들어가거나 Decorator가 많아져서 행이 추가되는 문제점이 사라져 가독성이 좋아지는 효과를 얻을 수 있었습니다.</p><h2 id="컴포넌트-관리"><a href="#컴포넌트-관리" class="headerlink" title="컴포넌트 관리"></a>컴포넌트 관리</h2><p>Storybook을 사용해서 디자인 시스템을 구현하다보면 컴포넌트가 점점 많아져서 분리가 필요합니다. 이 분리라는 것은 컴포넌트를 물리적으로 분리하는 것도 있지만 가시적으로도 분리가 되어 보이도록 구현을 해야합니다.</p><h3 id="분리하기"><a href="#분리하기" class="headerlink" title="분리하기"></a>분리하기</h3><p><img src="3.png" alt="이미지3"></p><p>최초로 분리해야 하는 것은 <code>외장(external)</code> 컴포넌트와 <code>내장(internal)</code> 컴포넌트의 분리입니다.</p><p>위의 그림처럼 internal 컴포넌트는 internal component 내부에서 사용될 수 있으며, 그렇게 서로 사용되어 만들어진 컴포넌트를 external 컴포넌트에서 가져와 사용할 수 있습니다.</p><h4 id="내장-컴포넌트"><a href="#내장-컴포넌트" class="headerlink" title="내장 컴포넌트"></a>내장 컴포넌트</h4><p><img src="5.png" alt="이미지5"></p><p>내장 컴포넌트는 스토리북에서 보여지지 않지만, <strong>외장 컴포넌트에서 사용되는 재사용 가능한 레이아웃 컴포넌트 요소</strong>를 일컫습니다. 이 요소들은 레이아웃 단위로 재사용되기 때문에 <strong>Atomic Design</strong>을 사용하여 분리하면 효율적입니다.</p><p><strong><a href="https://github.com/Vallista/DesignSystem/blob/master/src/components/molecules/Block/index.tsx" target="_blank" rel="noopener">component/molecules/Block/index.tsx</a></strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> classNames <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> IComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'models/common'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CalculateBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'utils'</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./style.module.scss'</span><span class="token keyword">export</span> <span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  ROW <span class="token operator">=</span> <span class="token string">'row'</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">enum</span> Sort <span class="token punctuation">{</span>  TOP_LEFT <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token keyword">extends</span> <span class="token class-name">IComponentProps</span> <span class="token punctuation">{</span>  children<span class="token punctuation">:</span> React<span class="token punctuation">.</span>ReactNode  direction<span class="token operator">?</span><span class="token punctuation">:</span> Direction  sort<span class="token operator">?</span><span class="token punctuation">:</span> Sort<span class="token punctuation">}</span><span class="token keyword">const</span> CalculateSort <span class="token operator">=</span> <span class="token punctuation">(</span>sort<span class="token punctuation">:</span> Sort<span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> horizontalNumber <span class="token operator">=</span> sort <span class="token operator">%</span> <span class="token number">10</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span> horizontal<span class="token punctuation">,</span> vertical <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">const</span> Block<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  children<span class="token punctuation">,</span>  className<span class="token punctuation">,</span>  direction <span class="token operator">=</span> Direction<span class="token punctuation">.</span>ROW<span class="token punctuation">,</span>  sort <span class="token operator">=</span> Sort<span class="token punctuation">.</span>CENTER_CENTER<span class="token punctuation">,</span>  margin <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  padding <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  style<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> classProps <span class="token operator">=</span> <span class="token function">classNames</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>classProps<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styleProps<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Block</code></pre><p>위 코드는 레이아웃에 대한 정렬 및 위치 조정을 담당하는 Block 컴포넌트 입니다. 해당 컴포넌트는 외장 컴포넌트에서 배치를 효율적으로 하는데 도움을 줍니다</p><h4 id="외장-컴포넌트"><a href="#외장-컴포넌트" class="headerlink" title="외장 컴포넌트"></a>외장 컴포넌트</h4><p><img src="4.png" alt="이미지4"></p><p>외장 컴포넌트는 스토리북에서 보여지는 컴포넌트를 일컫습니다. 위의 사진에서 왼쪽의 Sidebar에 Libraries, Products로 분리가 되어있는걸 볼 수 있는데요. Libraries와 Products 분리는 조금 있다가 다루도록하고, 중요하게 봐야하는 점은 보여지는 컴포넌트들이 <strong>외장 컴포넌트</strong> 라는 것 입니다.</p><p>이 컴포넌트는 실제 프로덕트 레벨에서 사용되는 컴포넌트이며, 디자인 요소가 완성된 컴포넌트입니다. 추후에 rollup 등의 패키지 매니저들로 export 되어 사용됩니다.</p><p><strong><a href="https://github.com/Vallista/DesignSystem/blob/master/src/products/Blog/Card/index.tsx" target="_blank" rel="noopener">products/Card/index.tsx</a></strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> classNames <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token operator">...</span><span class="token keyword">import</span> Block<span class="token punctuation">,</span> <span class="token punctuation">{</span> Direction<span class="token punctuation">,</span> Sort <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'components/molecules/Block'</span><span class="token operator">...</span><span class="token keyword">const</span> BlogCard<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  className<span class="token punctuation">,</span>  image<span class="token punctuation">,</span>  title<span class="token punctuation">,</span>  description<span class="token punctuation">,</span>  viewCount<span class="token punctuation">,</span>  theme <span class="token operator">=</span> defaultTheme<span class="token punctuation">,</span>  margin<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Card</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>classProps<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styleProps<span class="token punctuation">}</span></span> <span class="token attr-name">radius</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span> <span class="token number">12</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">margin</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>margin<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Block</span>        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>card<span class="token punctuation">}</span></span>        <span class="token attr-name">direction</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Direction<span class="token punctuation">.</span>COLUMN<span class="token punctuation">}</span></span>        <span class="token attr-name">padding</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isWhiteTheme <span class="token operator">?</span> <span class="token punctuation">[</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">24</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token punctuation">:</span> backgroundColor <span class="token punctuation">}</span><span class="token punctuation">}</span></span>        <span class="token attr-name">sort</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isWhiteTheme <span class="token operator">?</span> Sort<span class="token punctuation">.</span>SPACE_BETWEEN_CENTER <span class="token punctuation">:</span> Sort<span class="token punctuation">.</span>BOTTOM_LEFT<span class="token punctuation">}</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Block</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>header<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>watchIcon<span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isWhiteTheme <span class="token operator">?</span> WatchIconBlack <span class="token punctuation">:</span> WatchIcon<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>watch-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Span</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>watchCount<span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">.</span>textColor<span class="token punctuation">.</span>viewCount<span class="token punctuation">}</span></span> <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span></span> <span class="token attr-name">weight</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">500</span><span class="token punctuation">}</span></span> <span class="token attr-name">lineHeight</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">1.4</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span>viewCount<span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Block</span><span class="token punctuation">></span></span>        <span class="token operator">...</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Card</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> BlogCard</code></pre><p>내장 컴포넌트를 적극적으로 사용하여 외장 컴포넌트를 제작하였습니다.</p><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><p><img src="6.png" alt="이미지6"></p><p>간단하게 컴포넌트를 두 종류로 나누어보았습니다. 코드 상에서도 같은 레벨의 컴포넌트를 호출하지 않고 분기를 주니, 파일을 불러올 때도 일관적으로 변경이 된 걸 볼 수 있습니다. 또한 이미지나 폰트등의 디자인이 변경되거나 할 때 내장 컴포넌트를 한번 변경해주면 모두 동일하게 변경이 될 수 있어 용이합니다.</p><h3 id="심화"><a href="#심화" class="headerlink" title="심화"></a>심화</h3><p>이렇게 진행하다보면, 외장 컴포넌트가 비대해지는 걸 볼 수 있습니다. 외장 컴포넌트가 내장 컴포넌트를 사용하는데 같은 외장 컴포넌트끼리 중복되는 코드가 많아질 것 입니다. 이를 방지하기 위해 외장 컴포넌트에 레이어 하나를 더 추가하면 좋습니다.</p><h4 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h4><p>위에서 언급했던 Libraries가 여기서 출현했습니다. Libraries는 외장 컴포넌트에서 외장 컴포넌트끼리의 동일한 코드를 묶는 역할도 담당하지만 가장 중요한 내용이 있습니다. 바로 <strong>도메인에 영향받지 않는 공통 컴포넌트</strong> 라는 점입니다.</p><p><img src="7.png" alt="이미지7"><br>(이미지 참고: <a href="https://story.pxd.co.kr/1434" target="_blank" rel="noopener">https://story.pxd.co.kr/1434</a>)</p><p>카카오톡을 예시로 들어봅시다. 카카오톡이 성공하고 플랫폼이 커짐에 따라 카카오맵, 카카오스타일 등의 여러 서비스가 추가로 나오고 있습니다. 카카오톡에서 이후로 나오는 서비스들은 <strong>카카오가 만들었어요!</strong> 라는 느낌이 들어야 할 것 입니다. 그렇기 때문에 <strong>디자인 일관성</strong>을 주어야 하는데, 이 작업을 위해서 디자인 시스템을 만들어 매니지먼트를 하는게 가장 편할 것입니다.</p><p>하지만 여기서 중요한 점은 <strong>동일한 컴포넌트를 사용해도 레이아웃이 조금은 달라질 수 있다는 점</strong> 입니다. 예를들어 카카오페이와 카카오톡이 100% 동일한 레이아웃이 아닌 것처럼, <strong>각 도메인에 따라 레이아웃이 달라질 수 있다</strong> 라는 것 입니다.</p><p>그래서, <strong>Libraries는 동일한 레이아웃, 레이아웃 디자인을 일관성 있는 컴포넌트 꾸러미</strong>라면, <strong>Products는 각 도메인에 맞는 레이아웃 디자인 컴포넌트 꾸러미</strong> 라고 할 수 있습니다.</p><br><p><img src="8.png" alt="이미지8"><br>(clean architecture와 흡사한 형태의 구현이 된다)</p><h4 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h4><p><img src="9.png" alt="이미지9"></p><p>왼쪽은 내장, 오른쪽은 외장 컴포넌트 입니다. 어느정도 규격이 잡혀가는 걸 볼 수 있습니다. 외장 컴포넌트에서 Products, Libraries는 번들링되어 프로덕트 레벨에서도 사용되지만, Libraries는 Products 레벨에서도 사용됩니다. 이렇게 구현하면 중복코드가 줄어듦을 확인할 수 있습니다.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ol><li>외장, 내장 컴포넌트 분리를 하여 사용 용도에 맞게 컴포넌트를 분리하는게 좋다.</li><li>외장 컴포넌트에서도 레벨을 나누어 클린아키텍쳐 형태로 구현하면 재사용 가능한 컴포넌트도 늘어나고, 코드 개선에 도움이 된다.</li><li>Atomic Design에 몰입해서 컴포넌트 분리를 <code>atomic</code> 에만 의존하지 말자.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;0.jpg&quot; alt=&quot;이미지0&quot;&gt;&lt;/p&gt;
&lt;p&gt;최근 Storybook을 활용한 디자인 시스템 개발을 많은 회사에서 진행하고 있습니다. 디자인 시스템을 구축하면서 수많은 컴포넌트가 생성되고 사라지고를 반복하는데 이러한 컴포넌트 관
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>컴포넌트 분리의 미학</title>
    <link href="https://vallista.kr/2020/03/29/Component-%EB%B6%84%EB%A6%AC%EC%9D%98-%EB%AF%B8%ED%95%99/"/>
    <id>https://vallista.kr/2020/03/29/Component-분리의-미학/</id>
    <published>2020-03-29T06:28:01.000Z</published>
    <updated>2020-06-04T05:27:52.891Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpeg" alt="이미지1"></p><p>개발을 하다보면 정답이 없는 오묘한 문제가 발생합니다. 이 문제는 잘 잡지 않으면 유지보수에 큰 영향을 주지만 정답은 없습니다. 항상 탐험해야하는 문제에 해당하죠.</p><p>이 문제는 바로 <code>SoC(Separation of concerns) - 관심사의 분리</code> 입니다.  프로젝트의 규모, 도메인 등에 따라서 효율적인 관심사의 분리 방법이 바뀔 수 있으며 분리가 어떻게 되어 있냐에 따라 진입점 자체도 달라집니다.</p><p>웹 프론트엔드 생태계는 발촉된 지 얼마 안되었습니다. 그래서 관심사의 분리가 제대로 이루어진 사례가 많이 없고, 수많은 프론트엔드 개발자는 정답을 찾기위해 헤메이고 있는 중입니다.</p><p>오늘의 글은 웹 프론트엔드 업계를 탐험하며 나름대로 얻은 결론과 정답을 찾기위한 몸부림의 과정을 적었습니다.</p><h2 id="컴포넌트의-정의"><a href="#컴포넌트의-정의" class="headerlink" title="컴포넌트의 정의"></a>컴포넌트의 정의</h2><p><img src="2.jpg" alt="이미지2"></p><p>컴포넌트는 <code>독립적인 단위모듈</code> 입니다.</p><p>독립적인 단위모듈이라는 것은 독립적인 실행이 가능하다는 것입니다. 컴포넌트는 해당 기능에 대해서 독립적으로 수행이 될 수 있고, 새로운 모듈로 교환될 수 있어야 합니다.</p><p>독립적인 실행이 가능하다는 뜻은 해석하기에 따라서 많은 차이점을 낳습니다. 후술할 여러가지 컴포넌트 관리 기법은 컴포넌트의 정의와 매칭되나, 전혀 다른 구현 방법을 사용하고 있습니다.</p><h2 id="도메인-중심의-컴포넌트"><a href="#도메인-중심의-컴포넌트" class="headerlink" title="도메인 중심의 컴포넌트"></a>도메인 중심의 컴포넌트</h2><p>독립적인 단위모듈에 기반하여 컴포넌트를 <code>도메인 중심</code> 으로 개발하는 방법입니다.</p><p><img src="3.png" alt="이미지3"></p><p>컴포넌트가 도메인 단위로 나뉘어져 있습니다. 해당 컴포넌트에서는 관련된 도메인 상태 및 행동을 포함합니다. 이 방법의 장점과 단점에 대해서 알아봅시다.</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>컴포넌트를 직관적으로 알 수 있다.</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>파일이 많아지면 찾기가 힘들어진다.</li><li>도메인 컴포넌트가 서로 참조하게 되어 코드가 쉽게 꼬일 수 있다.</li></ul><p>도메인 단위로 개발하게 되면 뎁스없이 직관적으로 컴포넌트를 인지할 수 있는 장점이 있습니다. 소규모의 프로젝트에서는 이러한 구현 기법이 잘 먹힐 수 있으나 중규모의 프로젝트를 개발할 때 이 방법으로 컴포넌트를 관리하게 되면 더 다양해진 도메인을 견딜 수 없을 것입니다.</p><p><img src="4.png" alt="이미지4"></p><p>위의 사진처럼 다양한 도메인이 생길수록 네이밍의 한계점도 생기고, 노말하게 펼쳐있으므로 이름 탐색에 어려움을 겪습니다.</p><p>탐색에서 어려움을 겪는 문제를 한 가지 더 이야기를 해보면, 수정사항이 있을때 컴포넌트 진입이 하는 과정을 예시로 들 수 있겠습니다. 아래의 사례를 보면 이 구조로 된 컴포넌트 분리 방식은 좋지 않다는 걸 볼 수 있습니다.</p><p><img src="5.png" alt="이미지5"></p><p>“트위터의 인풋 박스를 수정하라” 라는 조건이 주어졌고, 도메인 히스토리를 모르는 개발자가 진행해야 한다고 가정합니다.</p><p>동선을 살펴보면,</p><ol><li>컴포넌트 리스트에서 전체를 훓으며 Home을 찾습니다. Home 코드 내에서 TweetInputWindow를 탐색하여 이동합니다.</li><li>TweetInputWindow에서 TweetInput을 찾고, TweetInput을 컴포넌트 리스트에서 훓으며 찾습니다.</li><li>TweetInput으로 들어옵니다.</li></ol><br><p>수정할 컴포넌트를 찾기위해 탐색을 계속 진행하여 컴포넌트로 들어왔습니다. 굉장히 비효율적인 방법으로 찾고 있는 걸 확인할 수 있었습니다. 그렇다면 이보다 더 효율적으로 개발자가 개발을 진행할 수 있게하는 방법이 무엇이 있을까요?</p><h3 id="도메인-단위로-폴더-구축"><a href="#도메인-단위로-폴더-구축" class="headerlink" title="도메인 단위로 폴더 구축"></a>도메인 단위로 폴더 구축</h3><p>위의 상황에서 파일을 좀 더 쉽게 찾는 방법은 폴더 분리를 하여 파일을 묶어 놓는걸로 탐색 범위를 줄이는 방법입니다.</p><p><img src="6.png" alt="이미지6"></p><p>간단하게 페이지 단위로 나누어 보았습니다. 페이지 단위로 나누고 페이지 전역에 해당하는 컴포넌트를 Common 폴더에 넣어둡니다.</p><p>이 방법은 아주 간단하고 강력합니다. 탐색 범위를 수정할 페이지 단위로 빠르게 축소시킬 수 있습니다.</p><p>이 방법대로 코딩을 해나가니 수정 해야할 컴포넌트는 직관적으로 찾을 수 있었습니다. 하지만 이 방법도 공통 모듈이 많아지고 프로젝트가 커질수록 관리가 어려워짐을 느낍니다.</p><p>특히 컴포넌트마다 데이터가 많아지니 레거시 코드도 많아집니다. 레이아웃 요소에 점점 레거시가 많아지는 것이죠. 그렇다면 어떻게 해야할까요?</p><h2 id="데이터와-레이아웃-컴포넌트-분리"><a href="#데이터와-레이아웃-컴포넌트-분리" class="headerlink" title="데이터와 레이아웃 컴포넌트 분리"></a>데이터와 레이아웃 컴포넌트 분리</h2><p>그래서 생각을 거듭한 끝에 데이터 컴포넌트와 레이아웃 컴포넌트를 분리하려는 생각을 하게 됩니다.</p><blockquote><p>Dan Abramov - Presentational and Container Components<br>링크: <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="noopener">https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0</a><br>_<br>Facebook의 React 개발자인 Dan Abramov의 데이터 컴포넌트, 레이아웃 컴포넌트 분리 철학에 대한 글 입니다. 그는 현재 이러한 생각을 하고 있지 않으며, React Hooks에 그의 철학이 담겨있습니다.</p></blockquote><blockquote><p>2017년 당시, 저는 이 글을 읽고 참고 했으며 2018년 말, 저는 이 패턴에 대해 발표를 하게 됩니다.<br>링크: <a href="https://www.youtube.com/watch?v=_WACO1jIIhE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=_WACO1jIIhE</a></p></blockquote><p>데이터 영역과 레이아웃 영역이 단독으로 쓰인다면 두 관점에서 재사용을 할 수 있겠죠. 그렇다면 현재 두 관점이 합쳐진 컴포넌트보다 효율적으로 사용될 수 있을것이라 생각을 하게 됩니다.</p><p>또한 이 방법의 장점은 레거시를 각각 보존할 수 있다는 장점을 가지고 있었죠.</p><p>그래서 <code>HoC (Higher Order Component)</code>를 이용해 Container Component가 Presentational Component에 데이터를 주입해주는 방법을 사용하게 됩니다.</p><p><img src="7.png" alt="이미지7"></p><p>컨테이너 컴포넌트 영역과 프레젠테이션 영역을 분리했습니다. 분리를 해놓으니 좀 더 명확해보이네요. 데이터를 수정해야할 때는 데이터 영역을 만지면 되고, 레이아웃 수정해야할 때는 레이아웃 영역만 수정하기 위해 찾으면 되니 찾는데도 더 효율적입니다.</p><p>코드상으로는 다음과 같습니다.</p><br><p><strong>TweetListContainer.jsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> TweetList <span class="token keyword">from</span> <span class="token string">'../../presentationals/TweetList'</span><span class="token keyword">const</span> http <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURI<span class="token punctuation">:</span> <span class="token string">'http://blahblah.net/api'</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TweetListContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props    http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/timeline`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          list<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TweetList</span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TweetListContainer</code></pre><p>TweetListContainer 에서는 TweetList를 HoC 하고 있습니다. TweetListContainer를 사용하면 TweetList에 데이터가 바인딩 된 채로 내려가는 것이죠.</p><p><strong>TweetList.jsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> TweetList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> list <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> Tweet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> description <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>date<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>description<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Tweet <span class="token punctuation">{</span><span class="token operator">...</span>tweet<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TweetList</code></pre><p>TweetList는 다음과 같이 내부 데이터는 하나도 없고, Props로 받은 데이터만 가지고 있습니다.</p><h3 id="구현-방법의-차이"><a href="#구현-방법의-차이" class="headerlink" title="구현 방법의 차이"></a>구현 방법의 차이</h3><p>기존 방법과 다른점은 Container Component에서 데이터를 바인딩하고, Presentational Component 로 데이터를 내려주고 있습니다. 이러한 행위를 <code>Prop Drilling</code> 이라고 합니다. Props를 통해 불변하는 데이터만 던져주기 때문이죠.</p><p>불변하는 데이터를 넘겨주는 부분의 컴포넌트 구현 방법과 받는 부분의 컴포넌트 구현 방법을 보면, Presentational Component는 Functional Component이고 Container Component는 Class Component로 구현되어 있는 걸 볼 수 있습니다.</p><p>왜 이렇게 코딩을 했을까요? 이렇게 코딩을 한 이유는 Functional Component와 Class Component의 차이점에 있습니다. 흔히 리액트에서 겪는 문제인 this binding 문제를 class component는 잠재적으로 야기될 수 있기 때문입니다.</p><p>하지만 Functional Component는 그런 해당사항이 없죠. 이미 호출되었을 때부터 값이 고정되기 때문에 레이아웃 관련해서 불변하게 유지할 수 있습니다. 내부에서 this를 쓰지 않기 때문이죠.</p><blockquote><p>이 뿐만 아니라 Functional Component를 사용하므로써 Class Component의 렌더링 되는 차이가 있는데, 이 부분은 나중에 추후에 개별 포스팅을 하도록 하겠습니다 :)</p></blockquote><p>이렇게 개발을 하니, 얼추 프로젝트의 레이아웃 로직과 데이터 로직을 분리하는게 효율적으로 느껴집니다. 하지만 개발을 할 수록 레이아웃 로직의 분리가 없어서 중복되는 레이아웃 로직이 많아지고 있습니다. 그러면서 depth 분리도 필요함이 느껴집니다.</p><p>레이아웃 컴포넌트에 대해서 내부적으로 쪼개는 효율적인 방법은 없을까요?</p><h2 id="Atomic-Design"><a href="#Atomic-Design" class="headerlink" title="Atomic Design"></a>Atomic Design</h2><p>레이아웃 컴포넌트를 재사용 단위로 쪼개는, <code>Atomic Design</code>을 사용하면 해결 할 수 있습니다.</p><p>Atomic Design은 레이아웃을 블럭처럼 조립해서 개발하는 방법론입니다.</p><p><img src="8.png" alt="이미지8"></p><p>Atomic Design은 5가지 구성요소로 나뉩니다.</p><ul><li>atoms (원자) : 레이아웃을 구성하는 가장 작은 단위입니다. p, span등 가장 작은 elements 요소를 일컫습니다.</li><li>molecules (분자) : 레이아웃을 조립하는 단위입니다. p, span등을 뭉쳐서 하나의 분자를 만듭니다.</li><li>organisms (유기체) : 원자, 분자를 조합해 만든 커다란 하나의 단위입니다.</li><li>templates (템플릿) : 원자, 분자, 유기체를 조합해 만든 하나의 페이지 틀입니다. 데이터를 전달받기 전 페이지 레이아웃을 말합니다.</li><li>pages (페이지) : templates에 데이터를 주입해서 유저에게 최종적으로 보여주는 페이지입니다.</li></ul><p>실제 적용 예를 한번 보면 이해가 쉬우실거에요.</p><p><img src="9.png" alt="이미지9"></p><p>각 레이아웃 단위로 컴포넌트를 분리하였습니다. 여기서 또 재미있는 점은 atoms, molecules, organisms, templates 폴더 이름의 정렬이 크기순으로 알파벳 정렬되어 있다는 점입니다. 그래서 크기 단위로 컴포넌트를 이해하면 파일을 찾는데 더 쉽습니다.</p><ul><li>atoms<br>위의 사진에 보면 Button, Checkbox, Counter, Input 과 같은 범용적으로 쓰이는 컴포넌트가 들어있습니다. 그래서 span, p 와 같은 컴포넌트 대신 해당 atoms 컴포넌트를 사용하면 됩니다.</li><li>molecules<br>레이아웃을 조립하는 단위를 말합니다. 레이아웃을 감싸는 것들이 들어가는데요, 위에 사진에는 없지만 Block, Card등을 이야기 합니다. 관련해서 후술하도록 하겠습니다.</li><li>organisms<br>molecules와 atoms를 조립한 컴포넌트를 이야기합니다. Footer, Sidebar 등의 조립된 영역이 들어갑니다.</li><li>templates<br>organisms, molecules, atoms를 가지고 있는 레이아웃 컴포넌트를 이야기 합니다. TweetList의 경우에는 Tweet Component, Profile 등이 들어가므로 Template 레벨로 분리합니다.</li></ul><p>코드 레벨에서 접근해서 예제를 보도록 해요.</p><p><strong>templates/TweetList.jsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> P<span class="token punctuation">,</span> <span class="token punctuation">{</span> TextAlign <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../atoms/P'</span><span class="token keyword">import</span> Span<span class="token punctuation">,</span> <span class="token punctuation">{</span> TextColor<span class="token punctuation">,</span> TextWeight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../atoms/Span'</span><span class="token keyword">import</span> Block<span class="token punctuation">,</span> <span class="token punctuation">{</span> Direction<span class="token punctuation">,</span> Sort <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../molecules/Block'</span><span class="token keyword">const</span> TweetList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> list <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> Tweet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> description <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Block</span> <span class="token attr-name">direction</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Direction<span class="token punctuation">.</span>COLUMN<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Block</span> <span class="token attr-name">sort</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Sort<span class="token punctuation">.</span>LEFT_CENTER<span class="token punctuation">}</span></span> <span class="token attr-name">margin</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Span</span> <span class="token attr-name">weight</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TextWeight<span class="token punctuation">.</span>BOLD<span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TextColor<span class="token punctuation">.</span>GRAY<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Span</span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TextColor<span class="token punctuation">.</span>GRAY<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Span</span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TextColor<span class="token punctuation">.</span>GRAY<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>date<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Block</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Block</span> <span class="token attr-name">sort</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Sort<span class="token punctuation">.</span>LEFT_CENTER<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span> <span class="token attr-name">align</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TextAlign<span class="token punctuation">.</span>LEFT<span class="token punctuation">}</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TextColor<span class="token punctuation">.</span>GRAY<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>description<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Block</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Block</span> <span class="token attr-name">direction</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Direction<span class="token punctuation">.</span>COLUMN<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Tweet <span class="token punctuation">{</span><span class="token operator">...</span>tweet<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Block</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TweetList</code></pre><p>위의 코드에서 일반적인 tag는 안쓰이는 걸 볼 수 있습니다. 이 방법의 장점과 단점을 살펴보겠습니다.</p><h3 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h3><ul><li>모든 디자인 요소에 대한 변경을 컴포넌트 스타일 변경으로 한번에 처리할 수 있습니다.</li><li>styles을 최소로 구현할 수 있어 style의 레거시가 줄어듭니다.</li><li>재사용을 기본적으로 하므로, 컴포넌트가 쌓일수록 작업속도가 매우 빨라집니다.</li><li>이미 컴포넌트 단위로 레이아웃을 작업했기 때문에 디자인 시스템에 적용하거나, 디자인 시스템에서 적용하기에 용이합니다.</li></ul><h3 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h3><ul><li>숙련도가 부족하여 컴포넌트를 잘 분리하지 못한다면 유지보수가 어려워집니다.</li></ul><br><p>개인적으로 생각하기에 Atomic Design은 단점보다 장점을 가지는게 많다고 생각합니다. 특히, 컴포넌트가 많아질수록 재사용할 수 있는 부분이 늘어나 작업 능률이 크게 상승됩니다. 또한 디자인 시스템의 적용 관점에서도 굉장히 용이합니다.</p><p>다만 단점도 존재합니다. 숙련도가 부족하여 컴포넌트 분리가 어렵다면 컴포넌트가 난잡해지고, 중복되는 레이아웃이 많아지기 때문이죠.</p><p>더 자세한 Atomic Design의 예제는 <a href="https://github.com/Vallista/React-Hooks-Context-API-Todo-Example" target="_blank" rel="noopener">링크</a>에서 확인할 수 있습니다.</p><br><blockquote><p>번외 : Block의 마술<br>_<br>일반적으로 atomic design을 구현할 때, molecules에는 Box, Block등의 이름을 가진 정렬 컴포넌트를 만들어서 사용하게 됩니다.<br>이 컴포넌트는 하나를 잘 만들어 두면 마진, 패딩, 정렬 등의 작업을 한번에 처리할 수 있어 정렬 및 패딩, 마진등의 작업에서 더이상 스타일 요소에 대한 코딩이 필요없게 됩니다.</p></blockquote><h2 id="데이터-컴포넌트-관리"><a href="#데이터-컴포넌트-관리" class="headerlink" title="데이터 컴포넌트 관리"></a>데이터 컴포넌트 관리</h2><p>프로젝트가 점점 커져갈수록, HoC로 구현한 데이터 컴포넌트가 많아지는 문제가 생깁니다.</p><p><img src="10.png" alt="이미지10"></p><p>이 데이터 컴포넌트도 레이아웃 컴포넌트처럼 훌륭하게 관리할 수 있는 방법이 없을까요?</p><p>일반적으로 Container는 비동기 데이터를 호출하고 비동기 값이 전달되면, prop drilling으로 데이터를 내려주는 역할을 합니다. 하지만 이 비동기 작업의 경우 재사용을 해주기 까다롭습니다. 재사용을 해주기 위해서는 해당 컴포넌트 내의 데이터가 변경이 되었는지 rxjs, proxy api 등을 이용해 상태 관리를 해주어야 하는데요. 이렇게 다른 third party를 사용하기에 React에는 훌륭한 선택지가 존재합니다.</p><h3 id="React-Hooks-사용"><a href="#React-Hooks-사용" class="headerlink" title="React Hooks 사용"></a>React Hooks 사용</h3><p>16.8 버전부터 제공하기 시작한 React Hooks는 중복되는 상태를 관리하기에 좋은 형태를 지니고 있습니다.</p><p><strong>useMountedState.tsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">useMountedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> mountedRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> my <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mountedRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    mountedRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      mountedRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> my<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> useMountedState</code></pre><p>Hooks API로 제공되는 useEffect, useState, useCallback 등의 API를 사용해 Reactive 프로그래밍을 가능하도록 제공하며 이는 굳이 React Component가 아니더라도 제공합니다.</p><p>Hooks API를 사용하여 위의 TweetListContainer를 hooks스럽게 변경해보겠습니다.</p><p><strong>containers/TweetListContainer.jsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> TweetList <span class="token keyword">from</span> <span class="token string">'../../presentationals/templates/TweetList'</span><span class="token keyword">const</span> http <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURI<span class="token punctuation">:</span> <span class="token string">'http://blahblah.net/api'</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> TweetListContainer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> userId <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> tweetList<span class="token punctuation">,</span> setTweetList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/timeline`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setTweetList</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TweetList</span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>tweetList<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TweetList</code></pre><p>코드를 변경해보았습니다. 하지만 전혀 Hooks스럽다고 표현할 수 없네요. Functional Component로 변경하면서 Hooks API를 사용했을 뿐이지 전혀 재사용에 대한 고려도 되어있지 않습니다.</p><h3 id="Custom-Hooks-사용"><a href="#Custom-Hooks-사용" class="headerlink" title="Custom Hooks 사용"></a>Custom Hooks 사용</h3><p>React Hooks에는 Custom 하게 Hooks를 사용하는 방법이 있습니다. 말 그대로 임의의 훅을 제작하는건데요, 아래와 같습니다.</p><p><strong>hooks/useTweetList.jsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> http <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURI<span class="token punctuation">:</span> <span class="token string">'http://blahblah.net/api'</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> useTweetList <span class="token operator">=</span> <span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> tweetList<span class="token punctuation">,</span> setTweetList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/timeline`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setTweetList</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    tweetList  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> useTweetList</code></pre><p>API 로직을 custom hooks로 만들어 빼냈습니다.</p><p><strong>containers/TweetListContainer.jsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> TweetList <span class="token keyword">from</span> <span class="token string">'../../presentationals/templates/TweetList'</span><span class="token keyword">import</span> useTweetList <span class="token keyword">from</span> <span class="token string">'../../hooks/useTweetList'</span><span class="token keyword">const</span> TweetListContainer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> userId <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> tweetList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTweetList</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TweetList</span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>tweetList<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TweetList</code></pre><p>별도로 분리한 useTweetList를 사용합니다.</p><p>이렇게 구현을 하고 나니, 굳이 Container 컴포넌트가 있을 필요가 없어졌습니다. HoC를 이용해 데이터를 주입하지 않아도 Hooks를 이용해서 데이터만 전달하면 되므로, Container를 제거하고 page에서 바로 데이터를 주입하도록 구현해볼 수 있습니다.</p><p><strong>Home.jsx</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Sidebar <span class="token keyword">from</span> <span class="token string">'../../containers/Sidebar'</span><span class="token keyword">import</span> TweetList <span class="token keyword">from</span> <span class="token string">'../../containers/TweetList'</span><span class="token keyword">import</span> Modal <span class="token keyword">from</span> <span class="token string">'../../containers/ModalContainer'</span><span class="token keyword">import</span> useTweetList <span class="token keyword">from</span> <span class="token string">'../../hooks/useTweetList'</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> history <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> userId <span class="token operator">=</span> history<span class="token punctuation">.</span>params<span class="token punctuation">.</span>userId  <span class="token keyword">const</span> <span class="token punctuation">{</span> tweetList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTweetList</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SidebarContainer</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TweetList</span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>tweetList<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ModalContainer</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home</code></pre><p>더이상 Container Component가 필요없음을 알게 되었습니다. HoC를 통해 데이터를 내려주지 않으니 뎁스가 줄어들어서 리펙토링시에도 용이합니다.</p><p>그렇다면 폴더 구조에서 Container가 필요 없어지므로 변경할 수 있습니다.</p><p><img src="11.png" alt="이미지11"></p><p>폴더 구조가 단순하고 직관적으로 변경되었군요. 난잡했던 과거의 구조보다 훨씬 정돈된 느낌을 받을 수 있습니다.</p><p>이 구조는 보기에만 이쁜게 아닙니다. 실제로 개발자가 구현을 하는데 있어 찾는 시간을 줄여주고, 동일한 코드에 대해서 최소한 할 수 있도록 짜여졌습니다.</p><h2 id="분리의-미학"><a href="#분리의-미학" class="headerlink" title="분리의 미학"></a>분리의 미학</h2><p>컴포넌트 분리의 미학이란 겉으로만 이쁘게 보이는게 아닙니다. 아름다움이란 겉도 중요하지만, 사용자가 사용하는데 있어도 아름다워야 한다고 생각합니다.</p><p>이 글을 보며 각 프로젝트에 맞는 컴포넌트 분리의 미학을 찾길 바랍니다 :)</p><p>읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.jpeg&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;p&gt;개발을 하다보면 정답이 없는 오묘한 문제가 발생합니다. 이 문제는 잘 잡지 않으면 유지보수에 큰 영향을 주지만 정답은 없습니다. 항상 탐험해야하는 문제에 해당하죠.&lt;/p&gt;
&lt;p&gt;이
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="React" scheme="https://vallista.kr/tags/React/"/>
    
      <category term="Vue" scheme="https://vallista.kr/tags/Vue/"/>
    
      <category term="Component" scheme="https://vallista.kr/tags/Component/"/>
    
      <category term="FrontEnd" scheme="https://vallista.kr/tags/FrontEnd/"/>
    
      <category term="Programming" scheme="https://vallista.kr/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>글또 4기를 시작하면서</title>
    <link href="https://vallista.kr/2020/03/01/%EA%B8%80%EB%98%90-4%EA%B8%B0%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B4%EC%84%9C/"/>
    <id>https://vallista.kr/2020/03/01/글또-4기를-시작하면서/</id>
    <published>2020-03-01T06:04:00.000Z</published>
    <updated>2020-06-04T05:27:52.908Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" alt="이미지1"></p><p>글또 3기에 이어서 글또 4기도 시작하게 되었습니다.</p><h2 id="글또-4기"><a href="#글또-4기" class="headerlink" title="글또 4기"></a>글또 4기</h2><p><img src="2.png" alt="이미지2"><br>(글또 아이콘, 나영님 감사합니다!)</p><br><p>글또는 글쓰는 또라이의 약자로써, 2주에 한 글씩 작성하는 모임이에요. 이번 4기에는 총 68분(헉) 많은 분들이 참석하게 되셨어요. 사람이 많아진 만큼 훌륭한 분들이 많이 오셔서, 다양한 분들과 이야기를 나눌 수 있게 되었습니다.</p><p>저번 기수에도 많은 개발자분들의 글을 보면서 많은 성장을 할 수 있었는데, 올해도 어김없이 성장을 하는 계기가 될 거라 생각합니다.</p><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><p>완성도와 글을 하루도 빠짐없이 게시하자는 두 가지를 잡아보고자 몇 가지 목표를 정하기로 했습니다.</p><ul><li>완성도 있게 글을 쓰되, 분량이 긴 글은 시리즈를 이용하자.</li><li>2주동안 하루에 한 문단씩 작업하여 <strong>일일 커밋</strong>을 진행한다.</li><li>한번에 여러글을 작업하지 말고 하나의 글만 작업한다.</li><li>이미지를 가공하여 퍼블리쉬한다.</li></ul><h3 id="완성도-있게-글을-쓰되-분량이-긴-글은-시리즈를-이용하자"><a href="#완성도-있게-글을-쓰되-분량이-긴-글은-시리즈를-이용하자" class="headerlink" title="완성도 있게 글을 쓰되, 분량이 긴 글은 시리즈를 이용하자"></a>완성도 있게 글을 쓰되, 분량이 긴 글은 시리즈를 이용하자</h3><p><img src="6.png" alt="이미지6"><br>(이전에도 한 달 단위로 시리즈를 작업한 적 있다.)</p><br><p>글이 상당히 길어질수록 제대로 된 시간에 제출을 못하는 일이 잦았습니다. 그렇기 때문에 저번 글또 3기에서는 분량 컨트롤을 제대로 못했다고 생각합니다.</p><p>앞으로는 시리즈를 이용하여 분량을 컨트롤 해볼 예정입니다.</p><h3 id="2주동안-하루에-한-문단씩-작업하여-일일-커밋을-진행하자"><a href="#2주동안-하루에-한-문단씩-작업하여-일일-커밋을-진행하자" class="headerlink" title="2주동안 하루에 한 문단씩 작업하여 일일 커밋을 진행하자"></a>2주동안 하루에 한 문단씩 작업하여 일일 커밋을 진행하자</h3><p><img src="3.png" alt="이미지3"><br>(게시 날짜를 보라!)</p><br><p>저번 3기때의 목표는, <strong>글을 하루도 빠지지 않고 게시하자!</strong>가 목표였습니다. 하지만 이직 및 바쁜 회사일 일정으로 인해서 글을 모두 작성하지 못했습니다. 그래서 4번정도 글이 지연되어 막판에 몰아서 글을 작성했었습니다.</p><p>이렇게 몰아서 작성하니 문제는 글의 퀄리티가 들쭉날쭉하다는 것입니다. 글을 쓸 때 다른건 못챙겨도 꼭 챙기자고 마음속으로 결심했던 <strong>완성도</strong> 측면에서 아쉬운 글이 많았습니다.</p><p>그래서 글을 쓰는 2주간 하루에 한 문단씩 작업하여 <strong>일일 커밋</strong>을 진행하면 점진적으로 완성도 있는 글을 작업할 수 있을꺼라 생각했습니다.</p><h3 id="한번에-여러글을-작업하지-말고-하나의-글만-작업한다"><a href="#한번에-여러글을-작업하지-말고-하나의-글만-작업한다" class="headerlink" title="한번에 여러글을 작업하지 말고 하나의 글만 작업한다"></a>한번에 여러글을 작업하지 말고 하나의 글만 작업한다</h3><p><img src="4.png" alt="이미지4"><br>(드래프트된 글을 보라!)</p><br><p>작년에 <strong>많은 글을 작업하고 싶으니 한번에 많은 주제의 글을 작업해보자</strong> 라고 생각해서 진행을 했었습니다. 하지만 이 방법은 다른 글을 쓰다 돌아오면 문맥이 깨져버리는 문제가 도출되었고, 올해부터는 한번에 한 글만 작성하기로 마음먹었습니다. (…)</p><h3 id="이미지를-가공하여-퍼블리쉬한다"><a href="#이미지를-가공하여-퍼블리쉬한다" class="headerlink" title="이미지를 가공하여 퍼블리쉬한다."></a>이미지를 가공하여 퍼블리쉬한다.</h3><p><img src="5.png" alt="이미지5"><br>(이미지를 가공하지 않아서 한 화면에 이미지로 도배된 모습)</p><br><p>이미지가 한 화면에 도배되어서 아에 안보이던 문제가 있었습니다. 이런 문제는 글의 퀄리티를 떨어뜨린다 생각을 했고, 외관적으로도 정리를 잘해야겠다는 생각이 들었습니다.</p><h2 id="글의-방향성"><a href="#글의-방향성" class="headerlink" title="글의 방향성"></a>글의 방향성</h2><p>목표와 별개로, 이번년도는 글의 방향성을 보다 전문성있는 개발자의 포스팅을 목표로 하고자 합니다. 작년의 글은 대다수가 회고 혹은 HTML/CSS 부분이 많았습니다.</p><p><img src="7.png" alt="이미지7"><br>(대다수의 글이 HTML, CSS 관련 글이었다)</p><br><p>그래서 이번년도에는 보다 JavaScript, TypeScript, React, Vue등 조금 더 프론트앤드 개발자로써 전문적인 글을 작성하고자 합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;p&gt;글또 3기에 이어서 글또 4기도 시작하게 되었습니다.&lt;/p&gt;
&lt;h2 id=&quot;글또-4기&quot;&gt;&lt;a href=&quot;#글또-4기&quot; class=&quot;headerlink&quot; title=&quot;글또 4기&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="글또" scheme="https://vallista.kr/tags/%EA%B8%80%EB%98%90/"/>
    
  </entry>
  
  <entry>
    <title>2019년 회고</title>
    <link href="https://vallista.kr/2019/12/29/2019%EB%85%84-%ED%9A%8C%EA%B3%A0/"/>
    <id>https://vallista.kr/2019/12/29/2019년-회고/</id>
    <published>2019-12-29T09:24:03.000Z</published>
    <updated>2020-06-04T05:27:52.868Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg" alt="이미지1"></p><p>2019년 한 해는 저에게 있어 많은 깨달음과 변화를 주었던 해입니다. 수많은 실패를 말미암아 부족한 점을 찾아 공부하고 다양한 시도를 통해 자기 자신의 AB 테스트를 진행했습니다. 덕분에 작년에 올해의 목표치를 달성하지 못했으나 더 값진 경험을 했다고 생각합니다.</p><h2 id="해외에서-하는-회고"><a href="#해외에서-하는-회고" class="headerlink" title="해외에서 하는 회고"></a>해외에서 하는 회고</h2><p><img src="image3.jpeg" alt="비행기 안에서 창밖을 내려다보는 사진"></p><p>올해부터는 연말에 항상 해외에 나가서 회고를 진행해보려 합니다. 한국을 떠나 낯선 환경에서 회고를 하는 일은 새로운 깨달음을 주지 않을까하는 마음에서 출발했습니다.</p><p>익숙하지 않은 환경에서 일주일간 살면서 다른 나라의 사는 사람들의 생활에 녹아들어 그들의 문화를 받아들이는 건 정말 어려운 것 같습니다. 이런 어려운 환경은 적응을 하기위해서 잡념을 떨치게 해주었고 생각의 확장과 집중력을 높혀주는데 도움이 주었습니다.</p><h2 id="올해-무엇을-했나"><a href="#올해-무엇을-했나" class="headerlink" title="올해 무엇을 했나"></a>올해 무엇을 했나</h2><p>올해 무엇을 했는지 살펴보도록 하겠습니다. 월별로 구분하는게 아닌, 1년 전체를 회고하는 것이므로 카테고리화 시켜서 회고해보도록 하겠습니다.</p><h3 id="라이프사이클-LifeCycle-구축"><a href="#라이프사이클-LifeCycle-구축" class="headerlink" title="라이프사이클(LifeCycle) 구축"></a>라이프사이클(LifeCycle) 구축</h3><p>시간은 사람마다 내리는 정의가 다를겁니다. 작년까지 제가 항상 입으로 말했던 버릇은 “시간이 왜이렇게 없지?”, “시간이 왜이렇게 안가지?” 등의 절대적인 개념에 대해 이야기를 하는 일이 잦았습니다.</p><p>하지만 올해는 시간을 제가 이용하며 써보자는 생각으로 데일리 리포트를 1년간 작성하였고, 작성하면서 어떤 일이 필요하고 해야하는지 한 눈에 볼 수 있게 고도화하였습니다.</p><p><img src="image2.png" alt="데일리리포트 사진"></p><p>몰입도와 어떤일을 행했는지 시간 단위로 쪼개어 기록하고 계속 인지해야할 일들과 TODO 프로세스 레이아웃을 주어 어떤 일을 해야하는지 명확하게 구분하였습니다. 이렇게 1년을 진행하니 역시 기록은 기억을 지배한다는 걸 깨달았습니다.</p><p>점점 시간 관리에 익숙해지니 어떤걸 언제 챙겨야하고 언제 진행해야하는지 쉬운 결정이 가능해졌습니다. 데일리 리포트는 결정을 하는데 있어 도와주기도 하지만 그 뿐만 아니라 하루를 되돌아보는데도 많은 도움을 줍니다.</p><h3 id="이력서-작성과-면접-그리고-이직"><a href="#이력서-작성과-면접-그리고-이직" class="headerlink" title="이력서 작성과 면접, 그리고 이직"></a>이력서 작성과 면접, 그리고 이직</h3><p>작년과 더불어 올해도 이직이 제겐 큰 화두였습니다. 조그마한 스타트업을 지나 조금 더 큰 기업에서 일하고 싶었고 그러기 위해서는 이직을 해야했기 때문입니다.</p><p><a href="https://vallista.kr/2019/07/10/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/#%EC%9D%B4%EB%A0%A5%EC%84%9C-%EC%9E%91%EC%84%B1">이력서 작성</a>을 할 때 여러가지 고민을 통해 레이아웃을 확정하고 웹을 제작했습니다. 해당 링크를 통해서 어떤 고민을 통해 이력서를 작성했는지 확인할 수 있습니다. 여러가지 고민을 통해 이력서 페이지를 만들었던게 좋은 영향이 있었는지 서류와 코딩테스트는 별 무리 없이 통과를 했습니다.</p><p>다음은 면접이었습니다. 면접을 보기 전 <a href="https://www.notion.so/gwangwhi/570cddfd04b64956b52efe8351e4020e" target="_blank" rel="noopener">만반의 준비</a>)를 진행했습니다. 하지만 면접에서 많은 실수와 부족한 점을 깨닫고 아직 부족하구나를 깨달았습니다. 그렇게 여러 차례의 실패를 통해서 최종적으로 우아한형제들로 이직을 하게 되었습니다. 이직을 하는데 많은 도움을 주셨던 분들이 계십니다. 감사드린다는 인사를 다시 한번 드립니다 :)</p><blockquote><p><a href="https://vallista.kr/resume/">Resume</a>는 여기서 확인할 수 있습니다.</p></blockquote><h3 id="과외"><a href="#과외" class="headerlink" title="과외"></a>과외</h3><p>재작년부터 진행한 과외를 꾸준히 진행하고 있습니다.</p><br><ul><li>웹 프론트엔드 그룹 과외: 3명</li><li>웹 프론트엔드 과외: 1명</li></ul><br><p>이번년도는 웹 프론트엔드 개발자가 되기 위해서 어떤 걸 공부해야하고 어떻게 성장해야 하는지를 중점으로 두고 과외를 하고 있습니다. 과외생분들이 훌륭하게 따라오고 계시고, 점차 발전하는 모습에 기분이 좋습니다.</p><p>HTML/CSS/JavaScript로 웹 만들기, browserify로 번들링해서 웹 코드 작성, CRA로 리액트 웹 개발, JavaScript ES6 등 기본적으로 현 시대의 웹 프론트앤드 개발자들이 익혀야 할 프로그래밍을 가르치고 있습니다.</p><p>과외를 하면서 좋은점은 과외생분들을 가르치기 위해 저도 기초를 다시 공부하면서 다시 기억하고 정리하는데 있습니다. 그러면서 webpack의 최신 스펙이 나왔네? 어떤 기능일까 하고 보기도 합니다. 더군다나 돈을 받기 때문에 어떻게든 준비하게 됩니다. (의지가 약하신 분은 추천드립니다.)</p><h3 id="헤커톤-참여"><a href="#헤커톤-참여" class="headerlink" title="헤커톤 참여"></a>헤커톤 참여</h3><p>올해는 두 군데의 해커톤을 참여했습니다.</p><br><ul><li><a href="https://vallista.kr/2019/12/10/%EC%9A%B0%EC%95%84%ED%95%9C%ED%98%95%EC%A0%9C%EB%93%A4-%ED%97%A4%EC%BB%A4%ED%86%A4-%EC%A0%9C-1%ED%9A%8C-%EC%9A%B0%EC%95%84%ED%86%A4-2019-%ED%9B%84%EA%B8%B0/">제 1회 우아한형제들 헤커톤 - 우아톤 2019</a></li><li><a href="https://vallista.kr/2019/07/10/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/#%EC%8A%A4%ED%8F%AC%EC%B9%B4-%ED%95%B4%EC%BB%A4%ED%86%A4-%E2%80%98%EB%AC%B4%EC%93%B8%EB%AA%A8%ED%86%A4%E2%80%99-%EC%B0%B8%EA%B0%80">스포카 헤커톤 - 무쓸모톤</a></li></ul><br><p>두 헤커톤을 참여하면서 3등과 1등이라는 기록을 내었습니다. 생각해보면 이게 사이드 프로젝트라고 칭할수도 있겠다는 생각이 들었습니다.</p><p>헤커톤을 매번 참여하면서 느끼는 거지만 해커톤을 하면서 사람은 자신의 한계를 드러내는 것 같습니다. 얼마나 지구력이 있는가, 정신력이 있는가 등으로요. 그렇기 때문에 의지가 중요하다고 생각됩니다.</p><p>가끔씩 회사일에 지치거나 새로운 무언가를 만들어보고 싶을때 해커톤을 나가므로써 아직 내가 건제하구나를 뇌로 각인을 하는 행동은 좋다고 생각합니다. 그래서 내년에도 해커톤이 있다면 최선을 다해 나갈 예정입니다.</p><h3 id="스타카토-활동"><a href="#스타카토-활동" class="headerlink" title="스타카토 활동"></a>스타카토 활동</h3><p><a href="https://www.facebook.com/staccato19/" target="_blank" rel="noopener">스타카토</a>는 고등학교에 방문하여 학생들에게 고졸 취업, 진학등 고민을 하는데 있어 강연으로 도움을 주는 모임입니다. 자원봉사의 개념의 띄고 있으며 회사원, 대학생 등 다양한 사람들이 모여 자기의 경험을 바탕으로 강연을 진행합니다.</p><p>지금까지 2년이라는 시간동안 진행되어 왔고, 작년 회장과 부회장의 임기가 끝나 올해는 스타카토 활동의 부회장을 제가 맡게 되었습니다. 그래서 올해의 목표를 정하게 되었습니다. 올해의 목표는 발표 고등학교 수의 확장와 개발자 뿐만이 아닌, 디자이너와 기획자 강연의 확장 두 가지를 가지고 활동했습니다.</p><p>키워드가 <strong>확장</strong>인 만큼 업무 외의 개인시간을 많이 투자하여야 했습니다. 다양한 학교의 선생님들 및 자원을 더 끌어오기 위해서 후원사를 구하거나 하는 커뮤니케이션 시간을요. 위에서 언급했듯 라이프사이클을 구축하므로써 시간을 탄력적으로 사용할 수 있었으나 스타카토 활동의 준비로 유휴 시간을 갖기는 굉장히 어려웠습니다.</p><p>더군다나 개인적으로 발표를 하고 싶어하는 욕심도 있었기 때문에 발표자로도 참가하여 PPT를 만들고 강연을 준비하는 시간도 있었습니다. 그래서 이번년도가 바빳던 이유중 하나를 스타카토 활동이 어느정도 차지하지 않았나 싶습니다.</p><br><ul><li>대경 상업 고등학교 발표</li><li>대경 상업 고등학교 2차 발표</li><li>서울 디지텍 고등학교 발표</li></ul><br><p>또, 스타카토 활동을 하면서 다양하고 새로운 사람들과 친해지게 되었습니다. 디자이너와 스타트업, 대기업, 대학생과 같은 공간에 있으면서 다양한 이야기를 하고 그들은 어떤 고민을 하는지 함께 생각해볼 수 있는 기회였고 이는 제게 좋은 경험이 되었습니다.</p><blockquote><p>참고: <a href="https://www.notion.so/staccatokorea/2019-12-02-b65df979913e428da5705e6d6df26da7" target="_blank" rel="noopener">스타카토 홍보문서</a></p></blockquote><h3 id="스터디"><a href="#스터디" class="headerlink" title="스터디"></a>스터디</h3><p>이번년도는 다양한 스터디를 진행하였습니다.</p><br><ul><li>퇴근길 와인수업: 와인 스터디를 통해 전세계의 다양한 와인을 시음해보고 와인에 대해 조금 더 깊게 알게 된 스터디</li><li>하드웨어 스터디: 스터디를 전부 따라가지 못했지만, 어셈블리 및 레지스터, 하드웨어 어떻게 동작하는지 알게 되었음.</li><li>사내 백앤드 개발자를 위한 HTML/CSS 스터디: 아직 1회밖에 하지 못했지만, 내년에는 더 많은 서버 개발자분들께 HTML/CSS에 대해서 쉽게 접근할 수 있게 스터디를 자주 열 생각입니다.</li></ul><br><h3 id="독서"><a href="#독서" class="headerlink" title="독서"></a>독서</h3><p>올해는 개발 및 협업 관련된 독서를 몇 권 진행했습니다.</p><br><ul><li>그들은 알고리즘을 알았을까?</li><li>완벽한 공부법</li><li>피플웨어</li><li>함께자라기</li><li>편지</li><li>또다시 같은 꿈을 꾸었어</li><li>테스트 주도 개발로 배우는 객체 지향 설계와 실천</li></ul><br><p>총 7권의 책을 읽었습니다. 공학관련 책을 읽으면서 실생활에서 자신에게 AB 테스트를 진행하고 팀원분들의 피드백을 바탕으로 점진적으로 발전해 나갔습니다.</p><p>이 중에 가장 재밋었던 책을 꼽으라 하면 <strong>피플웨어</strong>를 꼽을 수 있겠습니다. 협업 관련된 훌륭한 팁들과 어떻게 헤결하면 좋을까를 고민할 수 있었던 책이기 때문입니다. 더군다나 큰 회사에서 일해본 경험이 적은 저로써는 도움이 많이 되었습니다.</p><p>올해는 책을 이용한 독서보다 MEDIUM과 같은 블로그 플랫폼에서 코드 리뷰 및 협업, React, 테스팅 과 같은 베이스를 구축하는 글을 많이 봤습니다. 그래서 인문학적인 독서를 많이 하지 못했고 내년에는 조금 더 노력해서 읽을 예정입니다.</p><h3 id="블로깅"><a href="#블로깅" class="headerlink" title="블로깅"></a>블로깅</h3><p>올해는 블로그에 적극적으로 포스팅했습니다. AB 테스트를 통해 어떤 글이 더 잘 읽히고 어떻게하면 좋은 글을 작성할까에 대한 고민의 연장선이었습니다. 회사 업무를 하면서, 혹은 자신이 살아가면서 글쓰기 스킬은 필요할 수 밖에 없다는 걸 깨달았기 때문입니다.</p><br><ul><li><a href="https://vallista.kr/2019/11/10/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9%EB%B7%B0%EB%A5%BC-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%88%EB%82%B4%EC%84%9C-%EC%83%81/">모바일 웹뷰를 탐험하는 개발자를 위한 안내서 (상)</a> - 사내의 서버 개발자분들과 정보를 공유하기 위해 작성한 글입니다.</li><li><a href="https://vallista.kr/2019/11/25/%EB%86%93%EC%B9%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-HTML-CSS-%EC%A7%80%EC%8B%9D-%EB%AA%B0%EC%95%84%EB%B3%B4%EA%B8%B0/">놓치기 쉬운 HTML/CSS 지식 몰아보기</a> - 사내의 서버 개발자분들과 정보를 공유하기 위해 작성한 글입니다.</li><li><a href="https://vallista.kr/2019/12/10/%EC%9A%B0%EC%95%84%ED%95%9C%ED%98%95%EC%A0%9C%EB%93%A4-%ED%97%A4%EC%BB%A4%ED%86%A4-%EC%A0%9C-1%ED%9A%8C-%EC%9A%B0%EC%95%84%ED%86%A4-2019-%ED%9B%84%EA%B8%B0/">우아한형제들 헤커톤 - 제 1회 우아톤 2019 후기</a> - 우아한형제들에서 진행하는 해커톤에 대해 짤막하게 작성한 후기글 입니다.</li><li><a href="https://vallista.kr/2019/12/27/%EC%9B%B9-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A7%80%EC%98%A5-%EC%9D%B4%EB%A9%94%EC%9D%BC-%ED%8F%BC-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0/">웹 개발자의 지옥, 이메일 폼 개발하기</a> - 이메일 폼을 개발하면서 정보들이 산재되어있어 모아둔 정리 글입니다. </li><li><a href="https://vallista.kr/2019/12/28/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9%EB%B7%B0%EB%A5%BC-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%88%EB%82%B4%EC%84%9C-%EC%A4%91/">모바일 웹뷰를 탐험하는 개발자를 위한 안내서 (중)</a> - 사내의 서버 개발자분들과 정보를 공유하기 위해 작성한 글입니다.</li><li><a href="https://vallista.kr/2019/12/28/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1-Concurrency-Parallelism/">동시성과 병렬성 (Concurrency &amp; Parallelism)</a> - 이론 공부를 하면서 정리한 글입니다.</li></ul><br><p>(만족스러운 글 몇 가지를 모아 보았습니다.)</p><p>올해 총 40개의 글을 작성했습니다. 전반기부터 작성한 글들은 제가 알고있는 지식을 조금 더 구체화시키기 위해서 마구잡이로 쓰는 경향이 있다고 한다면 이직하고나서 작성한 글은 퀄리티를 보장하고 나만이 쓸 수 있는 글을 작성하기 위해 노력했습니다.</p><p>첫 글과 최근에 작성한 글을 비교하니 많은 발전을 하고 있다고 스스로 느낍니다. 앞으로도 글을 작성하면서 나만이 작성할 수 있고 많은 분들께 도움이 되는 글을 작성하려 노력하겠습니다.</p><h3 id="우아한형제들"><a href="#우아한형제들" class="headerlink" title="우아한형제들"></a>우아한형제들</h3><p>올해의 가장 큰 임펙트를 이야기하지면 <strong>우아한형제들</strong> 입사를 이야기 해야합니다. 우아한형제들에 입사하고 4개월간(9월, 10월, 11월, 12월) 정말 바빳기 때문입니다. 4개월간 우아한형제들에서의 일은 평생 기억할 것 입니다. 그만큼 커뮤니케이션, 개발 측면으로 성장을 하였습니다.</p><p>제가 우아한형제들에 입사하고 들어온 팀은 <strong>B마트 플랫폼팀</strong> 입니다. 당시에는 배민마켓 플랫폼팀이었고, 베타에서 정식버전으로 올리기 위해서 일을 폭팔적으로 하던 시기였습니다. 그래서 들어오자마자 인수인계를 정신없이 받으며 작업을 진행했습니다. 당시 팀의 웹 프론트엔드 개발자는 저 혼자였고, 제가 오기전까지 서버 개발자 분들이 웹 프론트엔드를 Vue.js로 함께 작업을 하셨습니다.</p><p>그래서 몇 가지 작업을 장기적으로 함께 했어야 했고 그 중에서 우선순위를 추려냈습니다.</p><br><ul><li>기존 레거시 소스를 container &amp; presentationals, atomic design과 같이 최소 단위의 공통된 컴포넌트로 쪼개고, 전반적인 프로젝트를 리펙토링 해야함</li><li>주문쪽과 상품쪽을 분리하여 상품쪽이 뻗어도 주문은 기능할 수 있도록 분리</li><li>배민 디자인 시스템에 맞게 디자인 컴포넌트를 다시 구축해야 하는 일</li><li>프론트 Vue.js 코드를 React.js로 이전하기</li><li>어드민 리펙토링 및 Shape 개발</li><li>인수인계 및 개발 환경 일원화를 위한 가이드라인 작성</li><li>등..</li></ul><br><p>이 일들을 순차적으로 들어갈 수 없어, 세번째 우선순위까지의 일을 한번에 병렬적으로 처리하였습니다. 혼자 진행하고 있었으나, 서버 개발 및 어드민 프론트를 작업하시던 개발자 한 분과 함께 작업을 하게 되었습니다. </p><p>제가 가이드라인을 드리면 함께 개발하시는 개발자분이 데이터 영역을 구현을 해주셨고, 저는 그 데이터 영역을 기준으로 HTML, CSS 레이아웃 및 데이터 바인딩을 진행했습니다. 이렇게 한 이유는 배달의민족 앱은 다양한 디바이스에서 호환되야 했기 때문입니다.</p><p>그래서 세 가지의 일(+ low 디바이스 대응)을 결국에 11월 초까지 완료하였습니다. 근 2달간 정신없이 진행하며 틈틈히 함께 개발을 진행하는 개발자 분과 회고도 하고, 부족한 점을 보완하기도 하고 프론트엔드 기반을 제작하였습니다.</p><p>하지만 웹 프론트엔드 개발자의 일이 여기서 끝날리가 없습니다. 마케팅 페이지 및 이메일 지면과 같은 다양한 페이지에서 리소스가 필요해졌고, 이 리소스 또한 프론트엔드 팀에서 작업을 해야 했습니다. 그래서 중요한 일들 몇 가지를 1월달로 미뤄놓은 상태인데 사실 좀 무섭습니다 (…) 1월에 다 진행하기에는 무리가 있지만 더이상 미루면 안되기 때문입니다.</p><p>여러가지 일을 하지만 저는 항상 즐겁고 힘들지 않습니다. B마트가 편하다고 이야기 하시는 많은 고객분들의 반응을 보면 즐겁고, 개발한 성과가 매출로 바로 보이기 때문입니다.</p><br><p><strong>우아한형제들에서 4개월간 경험한 것</strong></p><ul><li>기반을 다지기 위한 설계</li><li>법률</li><li>JIRA</li><li>유저 스토리</li><li>고객에 입장에서 생각하는 방법</li><li>병렬적으로 일을 하는 방법</li><li>다양한 부서와의 커뮤니케이션</li></ul><h2 id="올해-목표-되짚어보기"><a href="#올해-목표-되짚어보기" class="headerlink" title="올해 목표 되짚어보기"></a>올해 목표 되짚어보기</h2><p>올해에 다양한 활동을 한 걸 확인했으니, 작년에 설정한 올해 목표와 올해 무엇을 했는지를 비교해보며 얼마나 이루었는지 되짚어 보아야 합니다.</p><p>작년에 설정했던 올해 목표의 주제는 <strong>라이프사이클 만들기</strong> 였습니다. 체계적인 라이프사이클을 만들어 규칙적인 생활을 통해 몸이 길들여지게 만드는게 이유였습니다.</p><ul><li>영어 학원 꾸준히 다니기 <strong>(실패)</strong></li></ul><p>첫 번째로 영어 학원 꾸준히 다니기는 실패했습니다. 올해 중반기 쯔음부터 이직을 준비하면서 영어학원을 취소하고 부족한 프로그래밍 공부를 진행했기 때문입니다.</p><ul><li>오전 6시 기상 <strong>(성공)</strong></li></ul><p>오전 6시 기상은 유일하게 잘 지킨 목표입니다. 오전 6시 기상을 하고 운동 및 명상을 통해 하루를 기운차게 보낼 수 있었으며 후반기에는 출근 전까지 회사 프로젝트를 추가로 진행하였습니다. 덕분에 생산성과 능률이 좋아졌고 밤이 되면 피곤해서 잘 자게 되었습니다.</p><ul><li>세미 프로젝트 3개 완성 <strong>(실패)</strong></li></ul><p>세미 프로젝트는 건들지도 못했습니다. <code>엘레강스 소셜 클럽</code> 모임을 만들어 소프트웨어를 개발해보려 했지만 역시 사이드 프로젝트를 회사일과 병행하며 진행한다는게 어려운 일이었습니다.</p><ul><li>일일 커밋 <strong>(실패)</strong></li></ul><p>일일 커밋은 실패했습니다. 올해 일일 커밋을 진행해보려 했지만 저에게는 맞지 않는 공부 방법이라는 사실을 3월 정도에 깨달았습니다. 각자 자신의 공부 방법이 있을겁니다.</p><p>공부 방법 중 하나인 일일 커밋은 ‘잔디밭’이라고 이야기 하는 커밋 그래프를 채우면서 뿌듯함을 느끼며 공부하는 보람을 찾는 방법인데요, 저는 이보다 노션에 매일매일 회고하고 회고를 통해 부족한 점을 공부하는게 조금 더 맞았습니다.</p><ul><li>발표 두 번 하기 <strong>(절반의 성공)</strong></li></ul><p>올해는 <strong>스타카토 활동</strong>의 일환으로 고등학교를 찾아가 발표하는 활동을 꾸준히 진행했습니다. 스타카토 활동을 하며 올해 3번의 발표를 하게 되었습니다.</p><p>개발적인 내용으로 두 번의 발표를 진행했던 작년과 달리 올해는 크게 개발적인 내용으로의 발표는 없어서 성공이라 보기 어렵습니다. 그래서 절반의 성공이라고 텍스트를 써넣었습니다.</p><p>다섯가지의 목표 중 한 개만 성공을 했네요. 모든 목표를 이뤘으면 이상적인 이야기였겠지만 아직은 제가 모두 이룰 수 있을 만큼 훌륭한 사람이 아닌 것 같습니다.</p><p>하지만 다섯개중 가장 중요하게 생각했던 오전 6시 기상은 이뤄내었으니 절반의 성공이라고 생각합니다. 내년에는 조금 더 근성을 발휘하여 목표를 쟁취하는 사람이 되었으면 좋겠습니다.  </p><h2 id="내년-목표"><a href="#내년-목표" class="headerlink" title="내년 목표"></a>내년 목표</h2><p>내년도 목표는 올해처럼 많은 것에 집중하는 게 아닌, 기존에 해왔던 것에 집중을 하는게 목표입니다. 정리하자면 <strong>내실을 다지다</strong> 라고 볼 수 있겠습니다.</p><ul><li>발표 두 번 하기</li></ul><p>개발 관련 컨퍼런스에서 발표 두 번 하는게 목표입니다. 많이 고민해왔던 React.js Folder Structure 및 개발하는 팁에 대해서 이야기 해보고 싶습니다. 또한 Vue.js와 React.js는 어떻게 다르고, 이를 공통으로 충족시켜주려면 어떻게 해야하는가에 대해서도 발표를 해보고 싶습니다.</p><ul><li>오전 6시 기상 유지하기</li></ul><p>올해의 가장 큰 수확은 오전 6시 기상을 유지하는 멘탈을 소유하게 되었다는 것입니다. 이 좋은 습관을 계속 가지고가고 싶습니다.</p><ul><li>데일리 리포트 유지하기</li></ul><p>매일 어떤 일을 했고, 몇 시에 무얼 했는지, 어떤 일을 해야하는지 알려주는 데일리 리포트 작성은 제 삶을 유기적으로 만들어주었습니다. 그래서 앞으로 계속 가져갈 예정입니다.</p><ul><li>Java + Spring 공부하기</li></ul><p>자바와 스프링을 공부하려 합니다. 아무래도 우아한형제들에 있으면서 Java + Spring을 모른다는 것은 서버 개발자와 서버 관련 이야기를 할 때 커뮤니케이션이 어려워진다는 걸 의미합니다. 그래서 내년에는 더 좋은 커뮤니케이션을 하기위해 Java와 Spring을 공부할 예정입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;p&gt;2019년 한 해는
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>모바일 웹뷰를 탐험하는 개발자를 위한 안내서 (중)</title>
    <link href="https://vallista.kr/2019/12/28/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9%EB%B7%B0%EB%A5%BC-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%88%EB%82%B4%EC%84%9C-%EC%A4%91/"/>
    <id>https://vallista.kr/2019/12/28/모바일-웹뷰를-탐험하는-개발자를-위한-안내서-중/</id>
    <published>2019-12-28T10:47:35.000Z</published>
    <updated>2020-06-04T05:27:52.974Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg" alt="이미지1"></p><blockquote><p>이전 포스트<br><a href="https://vallista.kr/2019/11/10/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9%EB%B7%B0%EB%A5%BC-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%88%EB%82%B4%EC%84%9C-%EC%83%81/">모바일 웹뷰를 탐험하는 개발자를 위한 안내서 (상)</a></p></blockquote><p>저번 시간에는 자주 나오는 레이아웃 깨지는 이슈에 대응하는 방법을 알아보았습니다. 이번 시간에는 자주 나오지는 않지만 한번 나오면 대응하기 힘든 이슈와 자주 사용하는 HTML, CSS 코드 이야기를 하려고 합니다.</p><h2 id="이미지를-디바이스-크기-상관없이-대응하는-두-가지-방법"><a href="#이미지를-디바이스-크기-상관없이-대응하는-두-가지-방법" class="headerlink" title="이미지를 디바이스 크기 상관없이 대응하는 두 가지 방법"></a>이미지를 디바이스 크기 상관없이 대응하는 두 가지 방법</h2><p>반응형 웹을 개발할 때, 이미지를 fill(가득 채우는) 처리를 해야할 상황이 항상 오기 마련입니다. 그럴때 아래와 같은 방법을 자주 사용했습니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title-image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* CSS 축약 사용 */</span><span class="token selector"><span class="token class">.title-image</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> black <span class="token url">url('example.png')</span> no-repeat cover center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 모든 Property 사용 */</span><span class="token selector"><span class="token class">.title-image</span> </span><span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url('example.png')</span><span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>background</code> Property를 사용한 방법은 과거부터 전통적으로 웹 프론트엔드를 개발하면서 사용되던 형태입니다. 하지만 이 방법은 <code>Semantic Web(시맨틱 웹)</code>이 대두되면서 html을 작성하는 명확한 방법이 아니게 되어 현재 와서는 권장이 되지 않고 있습니다. 그래서 아래와 같은 방법을 사용합니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title-image<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.title-image</span> </span><span class="token punctuation">{</span>  <span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">object-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>이 형태의 작성 방법은 <code>Semantic Web(시멘틱 웹)</code>을 보장함과 동시에, CSS 코드도 간결해진다는 장점을 가지고 있습니다. 하지만, 이 방법에도 단점이 존재합니다.</p><p><img src="image2.png" alt="image2"><br>모든 브라우저가 지원하지 않는다.</p><p>그렇습니다. 이 방법은 모든 브라우저가 지원을 하지 않습니다. (IE 11 미지원) 그렇기 때문에 Cross Browsing 이슈가 존재합니다. 그렇기 때문에 Polyfill을 사용해야 하는데 이는 Webpack과 함께 자주 사용되는 PostCSS 모듈 <strong>Autoprefixer</strong>에 포함되어 있으므로 걱정을 하지 않으셔도 됩니다. 만약 포함이 안되어있다면 Autoprefixer를 포함해주세요.</p><ul><li><a href="https://github.com/ai/autoprefixer-core/commit/26d0c8f18380508725f417eed0562f288e117deb" target="_blank" rel="noopener">Autoprefixer object-fit, object-position 적용 커밋</a></li><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a></li></ul><blockquote><p>Polyfill이란?<br>Polyfill은 개발자가 특정 기능이 지원되지 않는 브라우저를 위해 사용할 수 있는 코드 조각이나 플러그인을 말합니다.</p></blockquote><blockquote><p>background-size, object-fit의 두 가지 옵션<br>이미지를 확대할 때, 가로를 기준으로 확대를 할 지 세로를 기준으로 확대 할 지 설정할 수 있습니다.</p><p><img src="image1.jpg" alt="image1"></p></blockquote><h2 id="이미지의-위치를-침범하는-이슈"><a href="#이미지의-위치를-침범하는-이슈" class="headerlink" title="이미지의 위치를 침범하는 이슈"></a>이미지의 위치를 침범하는 이슈</h2><p>아래와 같은 레이아웃을 구현한다고 가정해봅시다.</p><p><img src="image3.jpeg" alt="image3"></p><p>이 레이아웃을 구현하는 여러가지 방법이 존재할텐데 그 중에서 한 가지 방법을 이야기 해보겠습니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left-area<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-area<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>price-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(1,690원)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1,690원<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">24</span>px <span class="token number">12</span>px <span class="token number">24</span>px <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left-area</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.image</span> </span><span class="token punctuation">{</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>구글 크롬 및 데스크톱에서는 코드가 제대로 동작하는 걸 확인할 수 있습니다. 하지만 갤럭시 S3와 같은 디바이스에서 코드를 실행시키면, <code>right-area</code>에 있는 레이아웃이 이미지 영역으로 침범하게 됩니다. 그렇다면 어떻게 해야할까요? 바로, CSS의 <code>Calc</code>를 사용하면 됩니다. CSS에서 아래와 같이 추가를 해주세요.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">...</span><span class="token class">.right-area</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">140</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>right-area</code>에 <code>width: calc(100% - 140px)</code>를 추가하면 영역을 침범하지 않고 정상적으로 출력되는 걸 볼 수 있습니다.</p><blockquote><p><code>&lt;img/&gt;</code>태그를 사용하여 HTML 코드를 작성할 때, width와 height중 한 값은 기본적으로 설정하는 게 좋습니다. (width를 설정하고 height를 auto로 설정하는게 무난합니다.)</p></blockquote><h2 id="overflow-scroll-옵션이-iOS에서-적용이-안되는-이슈"><a href="#overflow-scroll-옵션이-iOS에서-적용이-안되는-이슈" class="headerlink" title="overflow: scroll; 옵션이 iOS에서 적용이 안되는 이슈"></a>overflow: scroll; 옵션이 iOS에서 적용이 안되는 이슈</h2><p>스크롤이 되는 레이아웃을 작성해야할 때, 아래와 비슷한 형태의 코드를 입력하여 구현합니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>overflow-layer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.overflow-layer</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.row</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e6e6e6</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>이렇게 작성하여 데스크톱 웹에서 동작시키면 정상적으로 동작하는 걸 볼 수 있습니다. 하지만 iOS에서 동작시키면 <code>400px</code>의 레이어 안에 엄청 조밀하게 텍스트가 중첩되어 나오는 걸 확인할 수 있습니다.</p><p>이는 제대로 <code>overflow: scroll;</code> 옵션이 적용이 안되었기 때문이 아닙니다. iOS에서는 기본적으로 Scroll Layer를 구현 해야할 때 리스트 형태를 권장하기 때문입니다. 아래와 같이 코드를 변경해주세요.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>overflow-layer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>블라블라블라블라블라블라블라블라블라블라블라블라<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></code></pre><p>ios에서는 스크롤 영역을 지정할 때 list-item 기준으로 content 사이즈를 지정합니다. 그렇기 때문에 ul, li 와 같은 list 태그들로 감싸주어야 column 형태의 스크롤 레이아웃이 생성됩니다.</p><h2 id="Position-Property의-Relative와-Absolute"><a href="#Position-Property의-Relative와-Absolute" class="headerlink" title="Position Property의 Relative와 Absolute"></a>Position Property의 Relative와 Absolute</h2><p>CSS의 Position Property는 CSS 요소가 화면에 어떻게 배치될 지를 설정하는 역할을 합니다. 옵션 중 저번 글에서 언급했던 <code>display: fixed</code> 옵션은 iOS에서 제대로 된 동작을 하지 않기 때문에 absolute와 relative 두 요소를 제일 많이 사용할 것 입니다. 아래의 사용 예제를 보도록 합시다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-layer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>안녕하세요.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.modal-layer</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.modal-wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.modal</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>absolute는 기존에 있는 요소의 z-index를 부여하여 더 높은 우선순위로 그려지도록 설정합니다. 그렇기 때문에 modal과 같은 안내 레이아웃에 적합한 Property 입니다. 그렇다면 위의 예제를 실행해볼까요? Desktop 크롬에서는 제대로 나오겠지만 안드로이드, iOS에서는 제대로 된 위치에서 그려지지 않을겁니다. 그렇기 때문에 아래와 같이 작성해주어야 합니다.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.modal-layer</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.modal-wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.modal</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">51</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>modal-wrapper</code> class에 <code>position: relative;</code> Property를 추가해주었습니다. 어떤가요? 제대로 동작하는 걸 볼 수 있습니다. 그렇다면 왜 안되었을까요? 안된 이유를 알기 위해서 relative와 absolute를 알아야 합니다.</p><h3 id="position-relative"><a href="#position-relative" class="headerlink" title="position: relative;"></a>position: relative;</h3><p>relative는 ‘상대적인’ 이라는 뜻입니다. relative를 사용하면 현재 element를 상대적인 position을 갖도록 지정할 수 있습니다. 그러므로 이 relative를 기준으로 가장 가까운 absolute를 상대하는 의미로 보시면 됩니다. 즉, absolute의 기준을 잡기위해 relative 옵션을 사용한다고 보면 됩니다.</p><p>그 외에는 relative도 결국에는 position의 옵션 중 하나이므로 z-index를 사용하여 priority를 설정할 수 있습니다.</p><h3 id="position-absolute"><a href="#position-absolute" class="headerlink" title="position: absolute;"></a>position: absolute;</h3><p>absolute는 ‘절대적인’ 이라는 뜻입니다. absolute를 사용하면 현재 element를 기준으로 left, right, top, bottom 키워드를 사용해 가장 가까운 relative element의 위치 기준으로 배치합니다.</p><hr><p>즉, 우리가 처음에 안되었던 이유는 absolute의 상대를 할 relative가 없었기 때문입니다.</p><blockquote><p>P.S 최신 브라우저나 디바이스에서는 기본값으로 top, left 등을 0으로 잡아서 설정시키는데 구버전 디바이스는 이 값이 랜덤이므로 top, left 등을 설정해주어야 합니다.<br>대다수의 브라우저는 기본값이 해당 element 0, 0 기준이 아니라 viewport 및 html 사이즈 최상단으로 되어있을 것입니다.</p></blockquote><h2 id="안드로이드-폰에서-이미지-파일의-확대-이슈"><a href="#안드로이드-폰에서-이미지-파일의-확대-이슈" class="headerlink" title="안드로이드 폰에서 이미지 파일의 확대 이슈"></a>안드로이드 폰에서 이미지 파일의 확대 이슈</h2><p>간혹 안드로이드 폰을 보면 (특히 갤럭시 S10+) 이미지가 확대되어 나오는 경우가 존재합니다. width는 고정이 되어있는데, height가 크게 늘어나 이미지가 안이쁘게 보이는 형태입니다.</p><p>이러한 문제를 야기하는 이유는 위에서 언급했듯 <code>&lt;img/&gt;</code>태그에 고정적인 크기를 지정해주지 않았기 때문입니다. 특히나 최신 브라우저는 Property를 빼먹으면 기본 데이터로 초기화 해주는 반면, 구버전의 브라우저는 그렇지 않습니다. (또한 다양한 브라우저가 그럼)</p><p>그래서 <code>&lt;img/&gt;</code> 태그를 사용하거나 <code>&lt;div&gt;&lt;/div&gt;</code>를 이용해 <code>background</code> Property를 사용했을 경우, width만 지정했는지 확인해주세요. height가 지정이 안되어있다면 아래와 같이 설정해주세요.</p><pre class=" language-css"><code class="language-css"><span class="token selector">img, div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="웹뷰내에서-웹뷰를-생성하는-버튼-연속-클릭-시-여러번-생성되는-이슈"><a href="#웹뷰내에서-웹뷰를-생성하는-버튼-연속-클릭-시-여러번-생성되는-이슈" class="headerlink" title="웹뷰내에서 웹뷰를 생성하는 버튼 연속 클릭 시 여러번 생성되는 이슈"></a>웹뷰내에서 웹뷰를 생성하는 버튼 연속 클릭 시 여러번 생성되는 이슈</h2><p>모바일 웹에서는 웹뷰 안에서 App Scheme을 호출하여 다른 웹뷰로 이동하거나 웹뷰 위에 새로운 웹뷰를 생성시키는 다양한 요구 조건이 존재합니다. 여러가지 요구 조건 중에 새로운 웹뷰를 생성시키는 요구 조건은 조심해서 구현을 해야하는데요, 자칫 잘못하면 두 개 이상의 웹뷰가 생성될 수 있기 때문입니다.</p><p>우리가 생각하는 만큼 유저는 순수하지 않습니다. 이 앱을 사용하는 방법은 저마다 다르기 때문에 최소한의 규칙이나 안전장치를 확보해놓아야 합니다. 특히, 새로운 웹뷰가 생성되는 것은 생성되기 전 버튼을 연타하면 여러개의 웹뷰가 생성될 수 있다는 걸 의미합니다.</p><p>그래서 코딩할 때 debounce를 새로운 웹뷰를 생성하는 로직에 주어야 합니다.</p><blockquote><p>태그 용도의 분리를 추천드립니다. 새로운 웹뷰나 다른 웹 페이지로 이동을 하는 태그를 a로 지정하여, a 태그 내에 debounce 옵션을 걸어주시면 좀 더 쉽게 구현이 가능합니다.<br>lodash등의 debounce는 100% 완벽하게 원하는데로 코딩되지 않으니 조심해서 사용해주세요.</p></blockquote><h2 id="이메일-폼-개발하기"><a href="#이메일-폼-개발하기" class="headerlink" title="이메일 폼 개발하기"></a>이메일 폼 개발하기</h2><p>이메일 고지는 여태까지 언급했던 수많은 이슈보다 더 큰 이슈를 들고 있을 정도로 역사와 전통을 자랑하는 문제로 점철된 개발 요소중 하나입니다. 그렇기 때문에 이 글에서 언급하기에 너무나 많은 요소를 담고 있습니다.</p><p><a href="https://vallista.kr/2019/12/27/%EC%9B%B9-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A7%80%EC%98%A5-%EC%9D%B4%EB%A9%94%EC%9D%BC-%ED%8F%BC-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0/">웹 개발자의 지옥, 이메일 폼 개발하기</a> 링크에서 깊게 다루어 봤으니 이메일 폼을 개발하는데 있어 어떻게 개발 해야할 지 갈피가 안잡히신다면 읽어보시는 걸 추천드립니다.</p><h2 id="다음글-예고"><a href="#다음글-예고" class="headerlink" title="다음글 예고"></a>다음글 예고</h2><p>다음 글, 모바일 웹뷰를 탐험하는 개발자를 위한 안내서 (하)는 특수한 상황을 마주하고, iOS, Android와 같은 모바일 디바이스 간의 데이터 통신, HTTP를 사용하면서 문제가 되는 상황을 이야기 해볼 예정입니다.</p><p>읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>동시성과 병렬성 (Concurrency &amp; Parallelism)</title>
    <link href="https://vallista.kr/2019/12/28/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1-Concurrency-Parallelism/"/>
    <id>https://vallista.kr/2019/12/28/동시성과-병렬성-Concurrency-Parallelism/</id>
    <published>2019-12-28T07:42:00.000Z</published>
    <updated>2020-06-04T05:27:52.972Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg" alt="이미지1"></p><p>비동기 작업을 할 때 <code>Concurrency</code>와 <code>Parallelism</code>에 대한 이야기가 자주오고 갑니다. 주로 비동기 작업을 처리하는데 있어 이 두 가지 방법 중 하나를 사용하기 때문이며 구현을 할 때 컴파일러, OS, 소프트웨어등 어느 관점에서든 이 구현 방법은 유효합니다.</p><p>하지만 이 두 개의 단어는 비슷하지만서도 완전 다른 방법을 취하고 있으며, <code>Concurrency</code>와 <code>Parallelism</code>의 차이에 대해서 쉽게 이해를 하기위해 제가 내린 쉬운 정의는 아래와 같습니다.</p><ol><li><code>Concurrency</code>는 한번에 많은 것을 처리하지만 <code>Parallelism</code>은 한번에 많은 일을 처리한다.</li><li><code>Concurrency</code>는 소프트웨어의 성질이고 <code>Parallelism</code>은 하드웨어의 성질이다.</li></ol><p>그렇다면 위의 단어를 정의했으니 자세하게 알아봐야 하겠습니다.</p><h2 id="Thread와-Process"><a href="#Thread와-Process" class="headerlink" title="Thread와 Process"></a>Thread와 Process</h2><p>Concurrency와 Parallelism을 알아보기 이전에, Thread와 Process의 차이를 알아보도록 합시다.</p><p>Thread는 Thread끼리 공통된 컴퓨터 자원을 공유하지만, Process는 독립적으로 OS에 할당 받아 사용됩니다. 일반적으로 애플리케이션 하나에 한 Process가 추가되며 해당 Process는 OS에서 컴퓨터 자원을 할당받습니다.</p><p>Process는 할당받은 자원을 효율적으로 컨트롤하기 위해 여러개의 Thread를 생성하여 병렬적으로 작업을 합니다. 이런 작업에 대해 해당 자원을 최대한 효율적으로 작업하도록 프로그래밍 하는 게 <strong>Multi-Thread Programming</strong> 힙니다.</p><p>일반적인 프로그래밍언어에서 Parallelism으로 일컫는 대표적인 예가 바로 Thread인데요, Thread는 OS로부터 할당받은 프로세스에서 작업을 <strong>병렬적</strong>으로 처리하기 위해서 사용하므로 말 그대로 하드웨어 레벨에서 각자 평행적으로 실행이 됩니다. 그렇기 때문에 매우 효율적으로 작업할 수 있습니다.</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p>위에서 간단하게 언급했지만, Thread는 넓게 이야기를 하면 <strong>실행되는 흐름의 단위</strong>라고 볼 수 있습니다. 일반적으로 한 프로그램은 하나의 <strong>실행되는 흐름</strong>이 존재하지만, 이 흐름이 여러개 있다면 <strong>Multi-Thread-Programming</strong>이라고 할 수 있습니다.</p><p>Thread는 지원하는 주체에 따라서 두 가지로 분류 될 수 있습니다.</p><ul><li><p>사용자 레벨 쓰레드 (User-Level Thread)</p><p>사용자 쓰레드는 커널 영역의 상위, 어플리케이션 레이어에서 사용자가 구현한 라이브러리나 구현체로 제공되는 걸 일컫습니다.</p><p>동일한 메모리 영역에서 쓰레드가 생성 및 관리 되므로 속도가 빠르다는 장점이 있습니다. 하지만 여러개의 쓰레드가 작업될 때 하나의 쓰레드가 종료되면 모든 쓰레드도 중단되는 단점이 있습니다.</p><p>그 이유는, 커널에서 내부 쓰레드에 대해서 인지하지 못하여 해당 프로세스를 제거했기 때문입니다.</p></li><li><p>커널 레벨 쓰레드 (Kernel-Level Thread)</p><p>커널 레벨 쓰레드는 운영체제가 지원하는 쓰레드 기능으로 제공됩니다. 운영체제에서 제공하는 만큼, 한 쓰레드가 중단되어도 중단이 되지 않습니다. 하지만 OS 단위에서 IO를 하는 만큼, 생성 및 관리 측면에서 리소스가 비쌉니다.</p></li></ul><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p>Process는 컴퓨터에서 연속적으로 실행되고 있는 <strong>컴퓨터 프로그램</strong>을 뜻합니다. Windows 운영체제에서 보면, Task(작업)이라는 의미로도 사용이 되는데요, 동일한 단어로 쓰이고 있습니다. 이 Process를 여러개 들고 있어, 현재 상황을 보여주는게 <strong>Scheduling(스케쥴링)</strong> 입니다.</p><p>여러개의 Processor(Process의 인칭화)를 사용하는 걸 <strong>Multi-processing</strong>이라고 하며 같은 시간에 여러 개의 프로그램을 띄우는 방식을 <strong>시분할 방식</strong>이라고 합니다. 이 시분할 방식을 OS 적인 이름으로 변경한 게 <strong>Multi-Tasking</strong> 입니다.</p><p>이 프로세스 관리가 바로 운영 체제의 중요한 부분입니다.</p><h2 id="Parallelism"><a href="#Parallelism" class="headerlink" title="Parallelism"></a>Parallelism</h2><p>애플리케이션에서 작업을 여러 CPU에서 동시에 병렬로 작업할 수 있는 Process 단위로 분할합니다. 여러 개의 쓰레드가 있으면 데이터 및 리소스 측면에서 서로 독립적으로 유사한 작업을 처리할 수 있습니다.</p><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p>그렇다면 Concurrency란 무엇일까요?</p><p>Concurrency란 Parallelism의 어려움을 쉽게 풀어내기위해 소프트웨어적인 설계로 단계를 하락시킨 행위라고 보면 됩니다.</p><p>애플리케이션이 동시에 두 가지 이상의 일을 한다고 가정해봅시다. 컴퓨터에 하나의 CPU만 있다면, 두 개 이상의 작업이 한번에 이루어지진 않지만, 한 개를 끝내고 다음 한 개를 끝낸다는 뜻이 아닌 한 개를 일정량 처리하고 다음 일을 처리하는 방식으로 일을 진행한다는 의미입니다.</p><br><p><img src="https://miro.medium.com/max/1648/1*Q_UZeToStz8YY2oQGiUPqw.png" alt="이미지1"></p><br><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://medium.com/from-the-scratch/dont-be-confused-between-concurrency-and-parallelism-eac8e703943a" target="_blank" rel="noopener">Don’t be confused between Concurrency and Parallelism</a></li><li><a href="https://en.wikipedia.org/wiki/Concurrent_computing" target="_blank" rel="noopener">Concurrent Computing</a></li><li><a href="https://en.wikipedia.org/wiki/Concurrency_(computer_science)" target="_blank" rel="noopener">Concurrency (Computer Science)</a></li><li><a href="https://en.wikipedia.org/wiki/Parallel_computing" target="_blank" rel="noopener">Parallel Computing</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;p&gt;비동기 작업을 할 
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>웹 개발자의 지옥, 이메일 폼 개발하기</title>
    <link href="https://vallista.kr/2019/12/27/%EC%9B%B9-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A7%80%EC%98%A5-%EC%9D%B4%EB%A9%94%EC%9D%BC-%ED%8F%BC-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0/"/>
    <id>https://vallista.kr/2019/12/27/웹-개발자의-지옥-이메일-폼-개발하기/</id>
    <published>2019-12-27T11:01:32.000Z</published>
    <updated>2020-06-04T05:27:53.043Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg" alt="이미지1"></p><p>웹을 개발하다보면 사용자를 위해, 법률적인 요소로 인해, 효율성을 위해, 등 다양한 이유 때문에 이메일을 전송하게 됩니다. 하지만 이 이메일을 HTML/CSS로 구현할 때 굉장히 고통스럽다는 사실은 상대적으로 알려져 있지 않습니다.</p><p>저도 이메일 관련 작업을 하면서 고통을 항상 겪는데요, 그렇기에 다른 분들도 겪을 수 있다고 생각해 쉽게 개발할 수 있는 가이드를 작성하고자 합니다. 이 글이 개발자들에게 조금이나마 도움이 되었으면 좋겠습니다.</p><h2 id="순서"><a href="#순서" class="headerlink" title="순서"></a>순서</h2><ol><li>이메일 작업을 해야하는 이유</li><li>이메일 작업이 어려운 이유</li><li>이메일 작업 문제 재정의</li><li>이메일 작업하기</li><li>작업한 이메일 페이지 검증하기</li></ol><h2 id="1-이메일-작업을-해야하는-이유"><a href="#1-이메일-작업을-해야하는-이유" class="headerlink" title="1. 이메일 작업을 해야하는 이유"></a>1. 이메일 작업을 해야하는 이유</h2><p>간단하게 언급했지만, 이메일 작업을 하는 가장 큰 이유는 법률적인 이슈때문이라고 볼 수 있습니다. ‘전자상거래 등에서의 소비자보호 지침’ 법률의 제 2조를 살펴보면 아래와 같은 내용이 있습니다.</p><br><p><img src="image1.png" alt="image1"><br><a href="http://www.law.go.kr/%ED%96%89%EC%A0%95%EA%B7%9C%EC%B9%99/%EC%A0%84%EC%9E%90%EC%83%81%EA%B1%B0%EB%9E%98%20%EB%93%B1%EC%97%90%EC%84%9C%EC%9D%98%20%EC%86%8C%EB%B9%84%EC%9E%90%EB%B3%B4%ED%98%B8%20%EC%A7%80%EC%B9%A8" target="_blank" rel="noopener">법률 :: 전자상거래 등에서의 소비자보호 지침</a></p><br><pre><code>&quot;통신판매&quot;란 우편ㆍ전기통신, 그 밖에 총리령으로 정하는 방법으로 재화 또는 용역(일정한 시설을 이용하거나 용역을 제공받을 수 있는 권리를 포함한다. 이하 같다)의 판매에 관한 정보를 제공하고 소비자의 청약을 받아 재화 또는 용역(이하 &quot;재화등&quot;이라 한다)을 판매하는 것을 말한다. 다만, 「방문판매 등에 관한 법률」 제2조제3호에 따른 전화권유판매는 통신판매의 범위에서 제외한다.</code></pre><p>통신판매를 하는 업종의 경우, 재화 또는 용역의 판매에 대한 정보를 제공해야 합니다. 제공하는 여러가지 방법이 있지만 아무래도 가장 쉬운 방법은 이메일로 전달하는 방법일 것입니다. 많은 기업들이 이메일로 결제 내역을 전달하고 있으며, 이렇게 전달된 이메일들을 퍼블리셔나 웹 프론트엔드 개발자, 더 나아가서 백엔드 프로그래머들이 작업하고 있습니다.</p><h3 id="이메일-고지의-여러-폼들"><a href="#이메일-고지의-여러-폼들" class="headerlink" title="이메일 고지의 여러 폼들"></a>이메일 고지의 여러 폼들</h3><p><img src="image2.png" alt="image2"><br>타다의 이메일 고지</p><br><p><img src="image3.png" alt="image3"><br>KG이니시스 이메일 고지</p><p>위와 같이 수많은 회사들이 고유한 이메일 고지 포맷을 가지고 있습니다. 공통점으로 얼마를 결제했는지, 주문 내역, 구매자명, 결제수단, 연락처 등을 포함하고 있습니다. 그래서 해당 부분을 포함하여 이메일 고지 포맷을 만들어야 하며, 만들어진 해당 포맷에는 여러가지 고지사항이 함께 포함되어 있어야 합니다.</p><h2 id="2-이메일-작업이-어려운-이유"><a href="#2-이메일-작업이-어려운-이유" class="headerlink" title="2. 이메일 작업이 어려운 이유"></a>2. 이메일 작업이 어려운 이유</h2><p>그렇다면 이렇게 중요한 이메일 고지가 어려울까요? 웹 프론트엔드 개발자나 퍼블리셔 입장에서는 HTML/CSS를 적절히 활용해서 레이아웃을 작성하면 되는데 왜 그렇게 복잡할까? 하는 생각을 가질수도 있겠습니다. 모든게 쉽게 되면 정말 좋겠으나, 이메일은 과거부터 전통적인 영역이기 때문에 예외상황이 굉장히 많습니다. 그래서 이번 챕터에서는 여러가지 문제점을 보도록 하겠습니다.</p><h3 id="첫-번째-문제-수많은-메일-플랫폼"><a href="#첫-번째-문제-수많은-메일-플랫폼" class="headerlink" title="첫 번째 문제 :: 수많은 메일 플랫폼"></a>첫 번째 문제 :: 수많은 메일 플랫폼</h3><p>국내에서 사용하는 메일 회사들을 나열해보도록 합시다.</p><ul><li>네이버 (naver.com)</li><li>구글 (gmail.com)</li><li>다음 (daum.net)</li><li>카카오 메일 (kakao.com)</li><li>네이트 (nate.com)</li><li>야후 (yahoo.com)</li></ul><p>이 외에도 2000년대 초반 포털 사이트 개발이 부흥하면서 수많은 포털들이 만들어졌죠. nexonclub, cyworld등 다양한 메일 플랫폼이 존재했었습니다. 이 이야기는 무엇이냐하면, 바로 이렇게 다양한 메일 플랫폼을 지원할 수 있도록 개발을 해야한다는 뜻입니다. 하지만 이게 끝이 아닙니다. 나열한 메일 플랫폼에서 조금 더 깊게 들어가봅시다.</p><h3 id="두-번째-문제-수많은-메일-뷰어"><a href="#두-번째-문제-수많은-메일-뷰어" class="headerlink" title="두 번째 문제 :: 수많은 메일 뷰어"></a>두 번째 문제 :: 수많은 메일 뷰어</h3><p>네이버는 모바일 앱을 제공합니다. 그리고 모바일 앱에서 메일을 확인할 수 있죠. 안드로이드 디바이스를 사용하는 유저는 gmail을 통해 네이버 메일을 구독할 수 있으며, iOS 사용자 또한 gmail 앱을 통해 네이버 메일을 구독할 수 있습니다. 그게 아니라면 내장된 mail 앱을 통해 구독하는게 가능하죠. 하지만 굳이 앱을 통해 확인하고 싶지 않다면 모바일 웹으로 들어가서 확인할 수 있습니다. 사용자의 입장에서는 굉장히 다양한 엔드포인트가 존재하기 때문에 다양한 메일 플랫폼 대응뿐만 아니라, 수많은 메일 뷰어들을 대응해야 합니다. 여러가지 메일 뷰어를 나열해보도록 합시다.</p><br><p><strong>모바일 앱</strong></p><ul><li>지메일 (Gmail)</li><li>네이버 앱 (Naver)</li><li>다음 앱 (Daum)</li><li>아이폰 메일 (iMail)</li><li>삼성 내장 메일 (samsung mail)</li><li>LG 내장 메일 (LG mail)</li><li>그 외 어플리케이션 메일 프로그램</li></ul><p>모바일 앱만 해도 굉장히 많은 종류가 존재합니다. 하지만 모바일 앱만 지원해서는 안됩니다. 모바일 웹도 지원을 해주어야 합니다.</p><br><p><strong>모바일 웹</strong></p><ul><li>Chrome</li><li>Safari</li><li>돌핀 브라우저</li><li>삼성 내장 브라우저</li><li>LG 내장 브라우저</li><li>Opera Mini</li><li>네이버 웨일 브라우저</li><li>Firefox</li></ul><p>모바일 웹 어플리케이션은 이보다 훨씬 많습니다. 모바일은 이쯤해서 정리하고, PC를 보도록 합시다.</p><br><p><strong>PC 브라우저</strong></p><ul><li>Chrome</li><li>Safari</li><li>IE (8,9,10,11 등..)</li><li>IE Edge</li><li>Opera</li><li>네이버 웨일 브라우저</li><li>Firefox</li></ul><br><p>종류 수가 어마어마 하네요. 이러한 친구들을 공통으로 대응을 해주어야 합니다. 물론 이 이야기는 국내 한정입니다. 그 이유는 각 나라마다 고유의 포털이 존재하며, 해당 포털에 맞게 나열을 하고 어떤 버전까지 지원을 해야하는지 명확히 정해야하기 때문입니다.</p><h2 id="3-이메일-작업-문제-재정의"><a href="#3-이메일-작업-문제-재정의" class="headerlink" title="3. 이메일 작업 문제 재정의"></a>3. 이메일 작업 문제 재정의</h2><p>위에서 살펴봤듯, 이메일 폼을 개발하면서 다뤄야 할 문제가 너무나 광범위 합니다.</p><p>문제를 다시 한번 재정의 해봅시다. 가장 편한 방법은, 이메일 고지를 제작함에 있어서 모든 플랫폼을 안고 간다는 가정하에 작성을 하고 가장 까다로운 브라우저를 택해서 개발을 하는 방법입니다. 이 방법의 장점은, 전체가 동일하게 나오지는 않겠지만 어느정도 호환을 유지시킬 수 있다는 점입니다.</p><p>그렇다면 재정의한 문제를 토대로 제약 사항을 도출해내 봅시다.</p><h3 id="첫-번째-제약-사항-inline-style로-작성하라"><a href="#첫-번째-제약-사항-inline-style로-작성하라" class="headerlink" title="첫 번째 제약 사항 :: inline style로 작성하라."></a>첫 번째 제약 사항 :: inline style로 작성하라.</h3><p>첫 번째부터 굉장히 큰 벽이 느껴집니다. 여기서 <code>inline style</code>이라는 것은 아래와 같이 style 태그로 감싼 코드가 아닙니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.table-wrapper</span> </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>      <span class="token number">...</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>이렇게 할 수 있다면 희망이 보이겠지만 아쉽게도 아닙니다. 그래서 아래와 같이 작업을 해야합니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">backgroundColor</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>위와 같이 <code>inline style</code>로 작성해야합니다. 왜 이런 <code>inline style</code>로 작업을 해야할까요? 그 이유는 모든 메일이 <code>&lt;style&gt;</code> 태그를 지원하지 않기 때문입니다. Gmail과 iOS Mail App은 <code>&lt;style&gt;</code> 태그를 지원하지만 한국 메일 트래픽의 대다수를 갖고있는 네이버, 다음, 네이트와 같은 메일 플랫폼은 <code>&lt;style&gt;</code>을 지원하지 않습니다. 그래서 본인이 이메일 고지 해야하는 대상이 국내 한정이라면, 이 부분에 대해서는 ìnline style`을 꼭 가져가야 합니다.</p><h3 id="두-번째-제약-사항-반응형으로-코딩-하지마라"><a href="#두-번째-제약-사항-반응형으로-코딩-하지마라" class="headerlink" title="두 번째 제약 사항 :: 반응형으로 코딩 하지마라."></a>두 번째 제약 사항 :: 반응형으로 코딩 하지마라.</h3><p>모바일 시장이 점차 커지면서 웹 개발을 할 때 반응형으로 개발하는 경우가 많습니다. 하지만 이 방법은 이메일을 개발할 때 적합하지 않습니다. 그 이유는 이메일에 나오는 레이아웃은 PC와 모바일 각각 최적화하여 보여주는게 아닌 모바일에서도 PC와 같은 데이터가 동일하게 나와야 합니다. 일반적으로 이메일 고지는 구매 내역과 관련된 내용이 많습니다. 그래서 많은 텍스트를 보여주어야 하며, PC에서 볼 수 있는 막대한 양의 텍스트를 수용할 수 있어야 합니다.</p><h3 id="세-번째-제약-사항-여러-브라우저-지원을-생각하고-코딩하여라"><a href="#세-번째-제약-사항-여러-브라우저-지원을-생각하고-코딩하여라" class="headerlink" title="세 번째 제약 사항 :: 여러 브라우저 지원을 생각하고 코딩하여라."></a>세 번째 제약 사항 :: 여러 브라우저 지원을 생각하고 코딩하여라.</h3><p>위에서 여러 플랫폼에 대해서 적용해야한다고 말씀드렸지만 다시 한번 강조를 하자면 이메일 고지의 폼 자체도 메일사에서 지원하는 규격이 있겠으나 그와 더불어 브라우저 위에서 돌아간다는 사실에 대해 인지를 해야합니다. 그래서 브라우저에 대해 <code>inline style</code>로 대응을 해야하기도 해요. 그렇기 때문에 최대한 낮은 CSS 버전에 해당하는 Property와 옵션을 사용해야합니다.</p><h3 id="네-번째-제약-사항-Table-태그로-코딩하라"><a href="#네-번째-제약-사항-Table-태그로-코딩하라" class="headerlink" title="네 번째 제약 사항 :: Table 태그로 코딩하라."></a>네 번째 제약 사항 :: Table 태그로 코딩하라.</h3><p>과거에 많이 사용되었던 <code>&lt;table&gt;</code> 태그를 사용한 코딩 방법을 사용해야 합니다. 왜냐하면 여러 이메일 솔루션은 <code>&lt;div&gt;</code>를 제대로 지원하지 않기 떄문입니다.</p><h3 id="다섯-번째-제약-사항-메일-전달-솔루션의-문법을-사용해야-한다"><a href="#다섯-번째-제약-사항-메일-전달-솔루션의-문법을-사용해야-한다" class="headerlink" title="다섯 번째 제약 사항 :: 메일 전달 솔루션의 문법을 사용해야 한다."></a>다섯 번째 제약 사항 :: 메일 전달 솔루션의 문법을 사용해야 한다.</h3><p>앞서 말한 제약 사항은 본인이 조심해서 코딩을 할 수 있는 부분이었으나 이번 제약사항은 자신이 할 수 있는 영역이 아닌 외부 툴을 사용하면서 겪는 이슈를 이야기 해보고자 합니다.</p><p>일반적으로 이메일을 전달하는 필요성이 있을 때 회사 자체가 이메일 솔루션을 개발하지 않는 이상 외부 솔루션을 사용할 것 입니다. 사용을 하게되면 솔루션 별로 html내에 데이터를 삽입할 수 있는 독자적인 문법이 존재하거나, 여태까지 많이 쓰여왔던 템플릿 엔진을 사용합니다.</p><p>여러가지 템플릿 엔진 중에서 많이 쓰이는 템플릿 중 하나는 <a href="https://freemarker.apache.org/" target="_blank" rel="noopener">Free Marker</a>가 있을 겁니다. 아무래도 Java 개발자가 많다보니 익숙한 템플릿을 선호하게 되는데 지금에서야 <a href="https://freemarker.apache.org/" target="_blank" rel="noopener">Free Marker</a>는 많이 사용되지 않으나 과거에 만들어졌던 다양한 이메일 솔루션은 <a href="https://freemarker.apache.org/" target="_blank" rel="noopener">Free Marker</a>로 많이 사용되었습니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>${title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>${title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>${exampleObject.name} by ${exampleObject.developer}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">systems</span> <span class="token attr-name">as</span> <span class="token attr-name">system</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>${system_index + 1}. ${system.name} from ${system.developer}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>여러가지 제약 사항에 대해서 이야기를 해봤으니 이번에는 이메일 관련해서 쉽게 코딩을 할 수 있는 방법을 찾아봅시다.</p><h2 id="4-이메일-작업하기"><a href="#4-이메일-작업하기" class="headerlink" title="4. 이메일 작업하기"></a>4. 이메일 작업하기</h2><p>앞서 여러가지 제약사항에 대해서 찾아봤습니다. 그렇다면 정녕 이메일 작업을 쉽게 할 수 있는 방법은 없는걸까요? 앞으로 살펴보도록 합시다.</p><h3 id="첫-번째-Campaignmonitor-참고"><a href="#첫-번째-Campaignmonitor-참고" class="headerlink" title="첫 번째 :: Campaignmonitor 참고"></a>첫 번째 :: <a href="https://www.campaignmonitor.com/css/style-element/style-in-head/" target="_blank" rel="noopener">Campaignmonitor</a> 참고</h3><br><p><img src="image4.png" alt="image4"><br>이메일 클라이언트에서 해당 property를 어떤 메일이 지원하는지 볼 수 있는 사이트.</p><br><p>써야하는 CSS Property를 적용하기에 앞서 해당 Property를 사용할 수 있는지 확인합시다.</p><h3 id="두-번째-본격적인-작성-시작"><a href="#두-번째-본격적인-작성-시작" class="headerlink" title="두 번째 :: 본격적인 작성 시작"></a>두 번째 :: 본격적인 작성 시작</h3><p>이제 레이아웃을 본격적으로 코딩해보도록 합시다. </p><h4 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h4><p>DOCTYPE은 브라우저에게 문서의 형식을 어떤 형식으로 사용할 것인지 이야기를 하는데 쓰입니다. 메일에 사용되는 DOCTYPE은 <code>XHTML 1.0 Transitional DTD</code> 입니다.</p><br><p><strong>XHTML 1.0 Transitional DTD란?</strong></p><ul><li>XHTML: XML 문법을 사용.</li><li>Transitional: font와 같은 사용이 금지된 요소 등을 사용할 수 있으나, frameset 을 사용할 수 없음.</li><li>DTD: Doctype의 약자.</li></ul><p>즉, frameset을 사용하지 못하고 XML 문법을 사용하는 규제가 강한 문법의 형태라고 볼 수 있습니다. 이 형태를 사용하게 되면 이메일 클라이언트에서는 신뢰할 수 있는 형식으로 인지하여 유효성 검사 및 렌더링에 도움을 줍니다.</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>문서 초기 설정이 변경되었으므로(HTML -&gt; XHTML) meta 태그로 설정을 해줍시다. 해당 meta 태그로 설정을 해주게 되면 캐릭터셋과 문서의 포맷을 설정할 수 있습니다.</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>이메일 고지<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><br><blockquote><p>viewport 설정에서 사이즈를 고정하고 싶다면 아래와 같이 해보세요!</p><meta name="viewport" content="width=600, initial-scale=1, viewport-fit=cover">이렇게 사용하게 되면 width를 660px로 고정시켜버리고, cover fit으로 설정하게 됩니다. (가득차게 됨)하지만 이렇게 되면 gmail에서 제대로 반응하지 않으므로 조심하세요!P.S 일반적으로 600이상 800미만을 지키는게 좋습니다.</blockquote><h4 id="BODY"><a href="#BODY" class="headerlink" title="BODY"></a>BODY</h4><p>위에서 언급되었던 네이버, 다음과 같은 국내의 이메일 플랫폼은 <code>&lt;body&gt;</code> 태그를 삭제해버립니다. 그래서 body 대신으로 사용될 수 있는 태그가 필요한데, 이 태그는 위에 언급했던 것 처럼 <code>&lt;div&gt;</code> 태그 대신 <code>&lt;table&gt;</code> 태그를 사용하여 감싸줍시다.</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>이메일 고지<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                안녕하세요.              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><br><blockquote><p><code>&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;800&quot;&gt;&lt;/table&gt;</code><br>-<br>기본적으로 위 옵션 형태로 코딩하는 걸 권장 드립니다. 기본 값을 초기화하지 않아 생기는 문제에 대해서 해결할 수 있습니다.<br>-<br>border: 보더<br>cellpadding: cell내의 패딩값<br>cellspacing: cell의 간격<br>width: 너비</p></blockquote><p>이렇게 코딩을 하게 되면 굉장히 가독성이 안좋아지므로 칸을 한 칸씩 띄워주시는 것과 div마다 고유한 id를 넣어주셔서 depth 표기를 명확히 해주는 걸 추천드립니다.</p><h4 id="스타일"><a href="#스타일" class="headerlink" title="스타일"></a>스타일</h4><p>html에 Table 코딩을 진행하셨다면 이제 스타일을 넣을 차례입니다. 하지만 inline으로 전부 style property를 열어 추가해주는 행위는 굉장히 힘든 일입니다. 그래서 CSS Inliner를 사용해봅시다.</p><ul><li><a href="https://htmlemail.io/inline/" target="_blank" rel="noopener">CSS Inliner - Web Viewer</a> :: 프리뷰 기능도 존재, 편함</li><li><a href="https://www.npmjs.com/package/inline-email" target="_blank" rel="noopener">NPM - Inline Email</a> :: 노드 환경에서 사용할 수 있는 모듈, CSS를 inline화 시켜줌.</li></ul><p>이 두 가지 방법을 사용하면 <code>&lt;style&gt;</code> 태그를 사용하더라도 inline화 시킬 수 있기 때문에 조금 더 편리하게 작성할 수 있습니다.</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px <span class="token number">0</span> <span class="token number">30</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#e6e6e6</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img, a, button </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1, h2, h3, h4, p, span, strong, strike </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">table, td </span><span class="token punctuation">{</span>  <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>공통된 부분을 첫 번째로 작성해줍니다. 개발이 완료될 쯔음 class를 차례대로 선언해주고 확장시켜줍니다.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.img-wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token number">...</span><span class="token punctuation">}</span><span class="token number">...</span></code></pre><p>또한 최종 마무리 시 각 플랫폼 별 예외처리 코드를 작성해주도록 합시다.</p><pre class=" language-css"><code class="language-css"><span class="token selector">table, td </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* mso는 microsoft outlook의 약자입니다. */</span>  <span class="token comment" spellcheck="true">/* outlook 2007 이상에서 강제로 추가하는 테이블 주위의 간격을 제거 해줍니다. */</span>  <span class="token property">mso-table-lspace</span><span class="token punctuation">:</span> <span class="token number">0</span>pt<span class="token punctuation">;</span>  <span class="token property">mso-table-rspace</span><span class="token punctuation">:</span> <span class="token number">0</span>pt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* IE에서 크기가 조정된 이미지를 렌더링 하는 방식을 수정합니다. */</span>  <span class="token property">-ms-interpolation-mode</span><span class="token punctuation">:</span> bicubic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body, table, td, p, a, li, blockquote </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* IE와 Safari에서 텍스트 크기 및 내부 데이터 크기를 자동으로 줄여서 텍스트가 빠져나가지 않도록 크기를 잡아주는 설정입니다. */</span>  <span class="token property">-ms-text-size-adjust</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="테이블"><a href="#테이블" class="headerlink" title="테이블"></a>테이블</h4><p>전반적으로 사용되는 <code>&lt;table&gt;</code> 옵션은 현재 웹에 사용되는 <code>&lt;div&gt;</code> 태그를 대체하여 사용됩니다. 하지만 <code>&lt;table&gt;</code> 태그에는 필수적으로 사용되는 요소 몇 가지가 존재합니다. 이는 위의 예제에서 볼 수는 없었는데요, 바로 <code>&lt;tbody&gt;</code>와 <code>&lt;thead&gt;</code> 입니다. 이 두 친구들은 사용이 되지 않습니다. 그 이유는 지원되지 않는 플랫폼이 있기 때문입니다. 그래서 이메일 고지를 작성할 때는 <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code> 태그 세 가지만 사용하여 작성하는 걸 추천드립니다.</p><h4 id="colspan-rowspan-사용하기"><a href="#colspan-rowspan-사용하기" class="headerlink" title="colspan, rowspan 사용하기"></a>colspan, rowspan 사용하기</h4><p>여러 이메일 플랫폼은 <code>colspan</code>과 <code>rowspan</code> 두 속성을 지원하지 않습니다. 그렇기 때문에 <code>colspan</code>, <code>rowspan</code> 옵션은 가급적이면 때는 걸 추천드립니다. 꼭 해당 레이아웃을 개발해야 한다면 Table을 이어 붙여서 개발하는 걸 추천드립니다.</p><br><p><strong>Before</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><br><p><strong>After</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h4 id="이미지"><a href="#이미지" class="headerlink" title="이미지"></a>이미지</h4><p>이메일 폼을 만들면서 들어가는 이미지는 일반적으로 로컬에 넣어서 함께 사용합니다. 하지만 이 방법은 여러 이메일 플랫폼에 따라 환경이 바뀌게 됩니다. 어떤 이메일 플랫폼은 정적 리소스를 지원하지만, 어떤 이메일 플랫폼은 지원을 안할 수도 있습니다. 그렇기 때문에 가장 안전한 방법으로 외부 저장소에 이미지를 업로드 하고, 아웃바운드를 열어 접근가능하게 만드는게 제일 현명한 방법입니다. (S3 같은게 있겠군요.)</p><ul><li>외부 이미지 호스팅으로 이미지 링크를 가져온다.</li><li>용량은 250kb 미만으로 유지한다.</li><li>alt를 꼭 입력한다.</li></ul><p>이미지 태그는 인라인 스타일로 width와 height를 주기보다, Property로 줄 수 있는 width, height로 주는게 좋습니다.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://example.com/image1.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="텍스트"><a href="#텍스트" class="headerlink" title="텍스트"></a>텍스트</h4><p>자주 사용하던 <code>p</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>와 같은 텍스트는 사용하지 않습니다. 그 이유는 이메일 플랫폼들은 과거 방식의 <code>table</code> 코드 작성을 택하고 있으며 그 때의 최적화된 텍스트 작성법은 <code>&lt;td&gt;</code> 태그 안에 텍스트를 삽입하는 방법이었기 때문입니다. <code>시맨틱 웹</code>이라고 하는 알아보기 쉽도록 상황에 맞게 태그를 적절히 쓰는 방법은 과거에는 많이 사용하지 않았기 때문에 해당 규칙을 신경쓰면서 작성하지 않으셔야 합니다.</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 텍스트를 그냥쓰거나 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>      안녕하세요.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- HTML 옵션을 더 쓰도록 하자 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#e6e6e6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>안녕하세요.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h4 id="그-외"><a href="#그-외" class="headerlink" title="그 외"></a>그 외</h4><p><strong>컬러</strong></p><ul><li>색상을 <code>rgb</code>나 <code>rgba</code> 형식으로 작성하면 호환되지 않는 이메일 플랫폼이 있습니다. 그래서 <code>#</code>를 사용하는 Hexadecimal Colors를 이용하여아 합니다.</li><li>Background 옵션이 적용되지 않는 이메일 플랫폼이 존재합니다. 그러므로 bgcolor 옵션으로 조정해주도록 합시다.</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 올바르지 않은 기입 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">backgroundColor</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 올바른 기입 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code></pre><br><p><strong>단일 클래스</strong></p><ul><li>무조껀 클래스는 여러개 사용하면 안됩니다. 위에서 언급했듯 단 하나의 id를 가지고 코딩하는 걸 추천드리며, 동일한 옵션을 가진 태그일 때 단일 클래스로 이용하는 걸 추천드립니다.</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 올바르지 않은 기입 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example1 example2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 올바른 기입 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code></pre><br><p><strong>CSS 단축 속성</strong></p><ul><li>CSS는 여러 옵션을 단축해서 사용할 수 있게 지원합니다. 이러한 Property로는 <code>background</code>가 존재합니다. 위에서 언급했듯, 지원하지 않는 이메일 플랫폼이 있기 때문에 이 Property는 사용하면 안됩니다.</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 올바르지 않은 기입 */</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightblue <span class="token url">url("img_tree.gif")</span> no-repeat fixed center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 올바른 기입 */</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("img_tree.gif")</span><span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><br><p><strong>Margin</strong></p><ul><li>여러 이메일 플랫폼은 Margin Property를 제공하지 않습니다. 그래서 padding으로 거리를 두어야 합니다.</li><li>padding을 쓸 때 유의해야 하는 부분은 <code>padding: 0 0 0 10px</code> 처럼 모든 인자를 넣어주어야 한다는 점 입니다.</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 올바르지 않은 기입 */</span><span class="token selector"><span class="token class">.common</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">12</span>px <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 올바른 기입 */</span><span class="token selector"><span class="token class">.common</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">12</span>px <span class="token number">12</span>px <span class="token number">12</span>px <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-작업한-이메일-페이지-검증하기"><a href="#5-작업한-이메일-페이지-검증하기" class="headerlink" title="5. 작업한 이메일 페이지 검증하기"></a>5. 작업한 이메일 페이지 검증하기</h2><p><a href="https://validator.w3.org/" target="_blank" rel="noopener">validator.w3.org</a>에서 검증합니다. 해당 페이지의 링크를 사용하면 제대로 검증되는지 확인할 수 있습니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://htmlemail.io/inline/" target="_blank" rel="noopener">htmlemail.io/inline</a></li><li><a href="https://www.tutorialspoint.com/html/html_email_links.htm" target="_blank" rel="noopener">HTML Email Links</a></li><li><a href="https://ko.wikipedia.org/wiki/%EB%AC%B8%EC%84%9C_%ED%98%95%EC%8B%9D_%EC%84%A0%EC%96%B8" target="_blank" rel="noopener">DOCTYPE, 문서 형식 선언</a></li><li><a href="https://www.w3schools.com/tags/tag_meta.asp" target="_blank" rel="noopener">meta 태그 속성값</a></li><li><a href="https://heropy.blog/2018/12/30/html-email-template/" target="_blank" rel="noopener">HTML Email Template 만들기</a></li><li><a href="https://validator.w3.org/" target="_blank" rel="noopener">validator w3</a></li><li><a href="https://www.w3schools.com/TAGS/att_meta_http_equiv.asp" target="_blank" rel="noopener">http-equiv</a></li><li><a href="https://email.uplers.com/blog/step-step-guide-create-html-email/" target="_blank" rel="noopener">A Step-By-Step Guide To Create Your Own HTML Email</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;p&gt;웹을 개발하다보면 
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>우아한형제들 헤커톤- 제 1회 우아톤 2019 후기</title>
    <link href="https://vallista.kr/2019/12/10/%EC%9A%B0%EC%95%84%ED%95%9C%ED%98%95%EC%A0%9C%EB%93%A4-%ED%97%A4%EC%BB%A4%ED%86%A4-%EC%A0%9C-1%ED%9A%8C-%EC%9A%B0%EC%95%84%ED%86%A4-2019-%ED%9B%84%EA%B8%B0/"/>
    <id>https://vallista.kr/2019/12/10/우아한형제들-헤커톤-제-1회-우아톤-2019-후기/</id>
    <published>2019-12-09T15:51:35.000Z</published>
    <updated>2020-06-04T05:27:52.983Z</updated>
    
    <content type="html"><![CDATA[<p><img src="icon.jpg" alt="main"></p><p>우아한형제들에서 제 1회, 처음으로! 사내 이벤트로써 헤커톤이 진행되었습니다. 그간 수많은 헤커톤을 해봤지만 사내에서 열리는 헤커톤을 참가해보기는 처음이었습니다. 이제 본격적으로 헤커톤 이야기를 풀어보도록 할께요!</p><h2 id="시작과-발단"><a href="#시작과-발단" class="headerlink" title="시작과 발단"></a>시작과 발단</h2><p>회사에서 별 다름없이 코딩을 하고 있는데 슬랙에 띠용~ 하고 알람이 도착했습니다. 평소에 모든 알림을 읽던 버릇으로 클릭 했더니 아래와 같은 사진이 열렸습니다.</p><br><p><img src="image1.png" alt="image1"><br>(오오 회사에서 해커톤도 해?)</p><br><p>회사에 입사한 지 얼마 되지 않아 주변 팀원분들께 물어봤어요.</p><pre><code>나: 저희 내부에 헤커톤도 했었군요? 장난아닌데..팀원 A: 엥? 저희 헤커톤이 있어요?나: ????</code></pre><p>그렇습니다. 이번 우아톤 2019는 회사 내에서 처음으로 열리는 헤커톤으로써 우아한형제들 내부 인원들만 참가할 수 있었어요. 그래서 저는 생각했어요.</p><p><img src="image2.png" alt="image1"></p><p>그리고 같이 할 팀원을 찾기 시작했어요. 제가 프론트엔드를 담당하게 될 테니, 서버 개발과 앱 개발을 담당할 수 있는 사람이 필요했죠. 그래서 전 회사에서 함께 우아한형제들로 왔던 형한테 제의를 했죠. 마침 형도 해커톤을 하고 싶어했던 차여서 함께 팀을 이루기로 하고 이제 제일 중요한 디자이너를 구해야 했어요. 어떻게 구해야할까 고민하던 중, 옆에서 이야기가 들렸죠.</p><pre><code>???: 광휘는 이거는 1px만 더 내려줄 수 있어요?나: 아!! 옆에 있었구나!???: 엥?</code></pre><p>저희팀 UI를 거의 다 책임지시는 디자이너분이 항상 옆에 계셨던 것입니다! 그래서 디자이너분께 함께 하자고 이야기를 드렸습니다. 그랬더니 지원군과 함께 두 분이서 오셨어요. 그렇게 결성된 저희 조는 웹 프론트앤드 개발자, 앱 개발자(서버 개발 겸함), 디자이너 2명으로 이루어져 개발을 하게 되었습니다.</p><!-- ![image3](image3.png) --><h2 id="아이디어"><a href="#아이디어" class="headerlink" title="아이디어"></a>아이디어</h2><p>해커톤 주제는 배민에 관련된 서비스 제작하기 였어요. 사전에 주제가 나왔다보니 여러 팀들이 사전에 준비를 하고 있었죠. 하지만, 저희 B마트팀은 앱 메인 대공사 업데이트가 12/7로 잡혀있었습니다. 그래서 정말 아무런 준비도 못하고 ㅜ_ㅜ; 앱 메인 대공사 업데이트 일정 때문에 야근으로 점철된 일정을 보냈어요. 그래서 사전에 준비할 겨를이 없었습니다.</p><p>그래서 저희 팀은 시간을 내어 오고 가며 간단하게 아이디어를 이야기 했어요. 초기 아이디어는 배민 전체 영역에서 할 수 있는 아이디어였으나 점점 저희가 잘 알고있는 도메인이었던 B마트쪽으로 아이디어가 옮겨오기 시작했어요. 그나마도 거대한 틀만 있던 뿐이지 상세하게 잡을 겨를도 없었습니다.</p><h2 id="우아톤-시작"><a href="#우아톤-시작" class="headerlink" title="우아톤 시작"></a>우아톤 시작</h2><p>12/7 런칭을 위해 바삐 움직이던 우리에게 우아톤 일정은 금새 다가와 당일 1시가 되었어요. 그래서 우아톤이 이루어지는 강연장으로 이동했어요!</p><br><p><img src="image4.jpeg" alt="image4"><br>(우와아 해커톤 굿즈!)</p><br><p>들어오자마자 해커톤 굿즈를 받고 사진을 찍었습니다. 무료로 참가하는 사내 해커톤이지만 정말 준비를 잘 해주셨더라구요 ㅠ_ㅠ; 내용물을 살펴보면!</p><ul><li>1박 2일동안 사용할 배민 문방구제 칫솔 치약!</li><li>어디든 따뜻하게 해주는 배민 담요!</li><li>노트북도 따뜻하게~ 노트북 파우치!</li><li>1박 2일간 음료를 책임지는 텀블러</li><li><strong>올 겨울을 따뜻하게 준비할 후리스</strong></li><li>참가자 전원에서 10만원 상품권</li></ul><br><p><img src="image5.jpg" alt="image5"></p><br><p>이게다 무엇이라 말입니까.. 다 좋지만 특히 후리스! 입사 선물로 후드 집업을 받았는데 이 후리스는 퀄리티가 대박이었습니다. (감동)</p><h3 id="수상자-상품"><a href="#수상자-상품" class="headerlink" title="수상자 상품"></a>수상자 상품</h3><p>또 해커톤 하면 빠질 수 없는 상품!</p><ul><li>1위 :: 아이패드 11인치 + 애플팬슬 + 스마트폴리오 키보드 (약 150만원 이상!!!)</li><li>2위 :: 애플워치 5세대</li><li>3위 :: 에어팟 프로</li></ul><p>이 상품을 팀 모든 인원에게 지급한다고 합니다!! 마음같아서는 1위 상품을 얻고 싶었지만 1,2위 상품으로 주는 것들이 다 있어서.. 3등만 해도 여한이 없다고 생각했습니다. (모두 엄청나신 분들이라 경쟁이 치열할꺼라 생각했습니당)</p><h2 id="개발-시작"><a href="#개발-시작" class="headerlink" title="개발 시작"></a>개발 시작</h2><p>해커톤 굿즈를 받고 준비하는 사이에 개최식이 진행되었어요. 개최식을 하면서 저희는 개발 준비를 마쳤죠. 그런데…?</p><h3 id="아-맞다-우리-내일-배포였지"><a href="#아-맞다-우리-내일-배포였지" class="headerlink" title="아 맞다..! 우리 내일 배포였지!"></a>아 맞다..! 우리 내일 배포였지!</h3><p><img src="image6.jpg" alt="image5"></p><p>그래요. 저희 B마트는 내일 메인 지면 개편으로 배포 일정이 잡혀있었어요. 저희 팀원은 모두 B마트 일원인 만큼 배포에도 대응해야 했죠. 그래서 저와 앱 개발자 두 명은 각자 해야할 일을 마무리 짓기 시작했어요. 1시에 시작했지만, 거의 6시까지 내일 배포 일정때문에 작업을 하지 못했습니다.</p><p>도중에 아이디어도 바뀌고 (상세한 아이디어는 비밀) 아이디어에 필요한 프론트엔드 페이지가 많아서 꽤나 바쁘게 작업해야 했어요.</p><h3 id="개발-스택"><a href="#개발-스택" class="headerlink" title="개발 스택"></a>개발 스택</h3><p>저희 팀은 헤커톤 진행 시간이 하루도 되지 않아서 (오후 1시부터 다음날 오전 11시까지) 구현을 하는데 있어 가장 익숙하고, 간단한 스택을 사용하기로 했어요.</p><ul><li>React.js</li><li>JavaScript</li><li>React-Router</li><li>Express.js</li><li>PostgreSQL</li><li>Amazon EC2</li></ul><p>서버 사이드 렌더링을 하면 서버쪽에서 공수가 드니까 그럴 필요없이 SPA로 구현했어요. 또 TypeScript로 구현하면 인터페이스 만드느라 시간 걸릴거라 생각하여 제외했구요. 페이지 이동에 애니메이션을 줄 수 있을 것 같아 React-Router를 사용했습니다. 서버에서는 데이터베이스에 간단하게 값 넣고, 받기위해 Express.js를 사용했습니다. 프론트 개발자인 제가 여차하면 서버도 도와줄 수 있어야 하므로 Express.js를 사용했어요.</p><p><del>여담이지만 원래 사용할 Framework는 svelte였습니다. 너무 궁금해서 사용해보고 싶었는데 상품이 상품인지라 다음 기회에..</del></p><h3 id="개발-중-난관"><a href="#개발-중-난관" class="headerlink" title="개발 중 난관"></a>개발 중 난관</h3><p>저희는 실제 운영에서 배달이 되는 프로세스를 구축하고자 목표를 잡았기 때문에 많은 난관이 있었어요. 둘 다 회사 내에서 서버 개발자가 아니기 때문에 내부 인프라에서 동작이 어떻게 되는지 잘 몰랐어요. 그래서 많은 시행착오를 했습니다.</p><pre><code>디자이너님: 아 이거, 여기 프로세스 넘었으면 좋겠는데..나: 에??? 되는지 안되는지 모르겟는데 한번 해볼께요.-- 1시간 후나: 어 되네?! 이렇게 하면 되겠다!디자이너님: 어, 그러면 여기도 넘을 수 있어요?나: 에??? 안돼요 거긴 넘을수가 없어요! 근데 일단 해보긴 할께요.-- 몇시간 후나: 어??? 되네??!@?#!?</code></pre><p>해커톤을 하면서 저희 프로세스를 좀 더 깊게 알 수 있었고 (으음..) 그 외에도 개발하면서 여러가지 버그도 발견해서 거의 QA가 된 기분으로 저희 인프라를 돌아다녔습니다.</p><br><p><img src="image8.jpg" alt="image8"><br>(이 때가 벌써 새벽..)</p><h3 id="도와주러-오신-분들-덕에-힘내서-개발"><a href="#도와주러-오신-분들-덕에-힘내서-개발" class="headerlink" title="도와주러 오신 분들 덕에 힘내서 개발!"></a>도와주러 오신 분들 덕에 힘내서 개발!</h3><p><img src="image7.jpg" alt="image7"><br>(수많은 박카스와 에너지 음료를 보라..)</p><br><p>정말 많은 분들이 도와주러 오셔서 힘내서 개발을 할 수 있었어요. ㅈㅎ님, ㅁㅈ님, ㅅㅊ님 등등.. (프라이버시를 위해 초성으로만 쓰겠습니다) 감사합니다! 특히 ㅈㅎ님 먼 곳에서 저희를 위해 오뎅 배달과 비타민제를 ㅠ_ㅠ.. 정말 감사해요 나중에 고기 살께요..</p><h3 id="그렇게-아침-6시-개발-완료"><a href="#그렇게-아침-6시-개발-완료" class="headerlink" title="그렇게 아침 6시 개발 완료!"></a>그렇게 아침 6시 개발 완료!</h3><p>6시까지 한숨도 안자고 저희 팀 모두 완성을 위해 열심히 달렸어요. 처음에는 상품을 보면서 하염없이 달렸는데, 확실히 배민의 훌륭한 개발자분들과 함께 작업을 하니 완성되어가는 프로덕트를 보면서 뿌듯함과 재미, 성취감 등등이 막 올라오더라구요! 그래서 다 만들었지만 애니메이션을 더 주기위해서 안자고 계속 코딩을 진행했어요.</p><p>그렇게 개발이 끝나고 테스트를 해야하는데, 저희 B마트는 9시에 운영이 열리므로 9시까지 쉬었습니다.</p><br><p><img src="image9.jpg" alt="image9"><br>(모두 휴-식)</p><h3 id="9시-자-테스트하자"><a href="#9시-자-테스트하자" class="headerlink" title="9시! 자 테스트하자!"></a>9시! 자 테스트하자!</h3><p>실제 배송이 되는 걸 보기위해! 저희는 만반의 준비를 갖춘채 운영에서 떨리는 마음으로 실행을 했습니다. 그런데!</p><p><img src="image10.gif" alt="image10"><br>(아뿔싸)</p><p>테스트로 기입한 게 그대로 들어가서 배달이 제대로 안되버린거에요. 그래서 이 세상에 없는 정보로 주소가 찍혀버리는 바람에 고객센터에서 저희한테 연락이 왔어요.</p><pre><code>실화팀장님: ??에 ??? 주문(이상한 주문)이 들어왔다고 제보가 왔어요.다른 헤커톤 팀의 개발자님: 해커톤 주문이 들어갔어요.팀 앱 개발자: 넵 공유 드렸어야 했는데 죄송합니다.개발자님: 일등하면 용서다른 헤커톤 팀의 개발자님: 할것같음 장난아님기획자님: 그거 해커톤에서 만들어서 1월 업데이트하자 ㅋㅋㅋㅋㅋ</code></pre><p>팀 내에서도 호응이 좋아서 모두 재밋게 호응을 해주셨어요. 그래서 이번에는 제대로! 테스트를 해서 결제를 했어요. 그렇게 정상적으로 결제와 배달이 완료되었고 저희는 마무리를 지어 자리를 정리했어요. 저는 해커톤 마지막 날에 연차를 내고 다른 일을 보러 가야했기에 이제 끝이겠지 하고 다른 용무를 봤는데..</p><h2 id="평가-시작"><a href="#평가-시작" class="headerlink" title="평가 시작"></a>평가 시작</h2><p><img src="image11.jpg" alt="iamge11"></p><blockquote><p>평가는 현장 평가단과 심사위원 분들의 점수를 포함하여 결산한다.</p></blockquote><p>띠용~ 평가를 PPT 발표로 생각하고 있었던 우리는 난데없이 현장에서 실제로 시연하고 보는 평가여서 깜짝놀랐어요. 그래서 실제 모든 프로세스를 개발하여서 다행이라고 생각했습니다. (와. 디테일하게 구현하길 잘했다!)</p><br><p><img src="image12.jpg" alt="image12"><br>(실제로 모니터 들고 세팅하기)</p><p>끝이 아니라 이제 또 시작이었던 것이에요. 피곤한 몸을 이끌고 저를 제외한 다른 팀원 분들이 너무 고생을 많이 해주셨어요 ㅠㅠ. 다시 이 글을 빌어 팀원분들께 감사 드립니다!</p><br><p><img src="image15.jpg" alt="image15"><br>(우리 앱개발자님 멋져)</p><br><p>그렇게 몇 시간의 현장 평가가 끝나고 드디어 결과 발표만 남았습니다.</p><h2 id="결과-발표"><a href="#결과-발표" class="headerlink" title="결과 발표"></a>결과 발표</h2><p><img src="image16.jpg" alt="image16"></p><p>짜잔! 우리팀은 3등을 했습니다! 고생한 보람이 있었어요! (상 못받았으면 진짜 화났을 뻔!!) 끝까지 함께하지 못해 아쉬웠지만 그래도 모든 팀원들이 즐겁고 상품까지 얻어서 행복한 해커톤이었습니다. 처음에 이야기 했던대로 3등을 해서 너무 기뻣습니다.</p><h2 id="총평"><a href="#총평" class="headerlink" title="총평"></a>총평</h2><p>해커톤을 하면서 첫 회임에도 불구하고 구성이 잘 짜여진 헤커톤은 처음이었어요. 살짝 딜레이 되는 게 있긴 했었지만 전반적으로 우아하게 진행이 되었다고 생각합니다. 모두가 열심히 개발하는 모습에 저절로 동기부여가 되었었고 담당자분께서는 밤에 장봐서 음료와 음식도 채워주시고 노력이 많이 느껴지는 헤커톤이었어요.</p><p>다만 조금 아쉬웠던 점은 헤커톤인 만큼, 행사 시작과 동시에 팀을 만들거나 주제를 오픈했었으면 더 좋았을꺼라는 생각이 들었습니다. 헤커톤을 한다는 이야기를 함과 동시에 주제와 팀원을 자유로 내버리니 미리 개발을 하는게 매우 유리했을꺼라 생각해요. (거의 오픈북 테스트) 다음에 헤커톤을 한다면, 당일날 주제공개를 하거나 팀을 랜덤 배치해서 좀 더 밸런스 있는 해커톤이 되었으면 하는 바람이 있습니다.</p><h2 id="끝으로"><a href="#끝으로" class="headerlink" title="끝으로"></a>끝으로</h2><p>와~ 이렇게 좋은 헤커톤도 하고 정말~ <a href="https://resume.woowahan.com/jobs/view.aspx?cc=244001&jidx=105317&pidx=10834&bidx=166015" target="_blank" rel="noopener">B마트 프론트엔드 개발자 모집</a>으로 가서 지원해야 겠는걸~?</p><p>다른 공고</p><ul><li><a href="https://resume.woowahan.com/jobs/view.aspx?cc=244001&jidx=105056&pidx=10571&bidx=166014" target="_blank" rel="noopener">B마트 백엔드 개발자 모집</a></li><li><a href="https://resume.woowahan.com/jobs/view.aspx?cc=244001&jidx=105057&pidx=10572&bidx=166001" target="_blank" rel="noopener">B마트 안드로이드 개발자 모집</a></li><li><a href="https://resume.woowahan.com/jobs/view.aspx?cc=244001&jidx=105095&pidx=10612&bidx=166001" target="_blank" rel="noopener">B마트 iOS 개발자 모집</a></li><li><a href="https://resume.woowahan.com/jobs/view.aspx?cc=244001&jidx=105279&pidx=10796&bidx=166016" target="_blank" rel="noopener">B마트 데이터 과학자 모집</a></li><li><a href="https://resume.woowahan.com/jobs/view.aspx?cc=244001&jidx=105185&pidx=10702&bidx=166061" target="_blank" rel="noopener">B마트 Product Owner 모집</a></li></ul><p>읽어주셔서 감사합니다!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;icon.jpg&quot; alt=&quot;main&quot;&gt;&lt;/p&gt;
&lt;p&gt;우아한형제들에서 제 1회, 처음으로! 사내 이벤트로써 헤커톤이 진행되었습니다. 그간 수많은 헤커톤을 해봤지만 사내에서 열리는 헤커톤을 참가해보기는 처음이었습니다. 이제 본격적으
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>놓치기 쉬운 HTML/CSS 지식 몰아보기</title>
    <link href="https://vallista.kr/2019/11/25/%EB%86%93%EC%B9%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-HTML-CSS-%EC%A7%80%EC%8B%9D-%EB%AA%B0%EC%95%84%EB%B3%B4%EA%B8%B0/"/>
    <id>https://vallista.kr/2019/11/25/놓치기-쉬운-HTML-CSS-지식-몰아보기/</id>
    <published>2019-11-24T16:28:52.000Z</published>
    <updated>2020-06-04T05:27:52.942Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image1.png" alt="main_image"></p><p>하나의 프로덕트를 개발하면서 웹은 들어갈 수 밖에 없는 필수 존재입니다. 특히나 최근의 웹 시장은 웹 프론트앤드 개발자가 부족해짐에 따라 서버 개발자들이 어드민을 개발하는 일이 종종 일어나고 있습니다. 하지만 서버 개발자 중에서 HTML/CSS를 잘하시는 분도 있지만 자신 없는 분도 있기 마련입니다. 이 포스팅은 이러한 HTML/CSS에 약하신 분을 위해 중요한 개념만 짚고 넘어가고자 준비한 글 입니다.</p><p>부디 이 글로 인해서 많은 개발자가 고통에서 조금이나마 벗어났으면 좋겠습니다.</p><h2 id="HTML의-이해"><a href="#HTML의-이해" class="headerlink" title="HTML의 이해"></a>HTML의 이해</h2><p>이 세상에 이해하면 어려운게 어딧나 싶지만, HTML은 이해하면 굉장히 쉽습니다. 밑의 예시를 들어볼께요.</p><h3 id="뷰포트-Viewport-와-사각형-Rectangle"><a href="#뷰포트-Viewport-와-사각형-Rectangle" class="headerlink" title="뷰포트 (Viewport)와 사각형 (Rectangle)"></a>뷰포트 (Viewport)와 사각형 (Rectangle)</h3><p><img src="image2.png" alt="image2"></p><br><p>이미지에서 가장 바깥쪽에 그어져 있는 분홍색 라인이 보이시나요? 바로 이 라인부터 안의 모든 영역을 <code>뷰 포트 (Viewport)</code>라고 부릅니다. 이 부분이 브라우저에서 실제 웹 페이지가 렌더링 되는 곳이에요. Viewport 안의 웹 요소들은 기본적으로 <code>사각형 (Rectangle)</code> 형태를 띕니다.</p><br><p><img src="image3.png" alt="image3"></p><p>위 사진을 보면 사각형의 형태를 띄는 파란색 상자를 볼 수 있을꺼에요. 모든 HTML의 Element는 사각형의 형태로 생겼습니다. 그 예외는 없어요. 그렇다면 이런 질문을 할 수 있을꺼에요. <code>어떤 레이아웃은 모서리가 둥근데 이 친구들은 둥근 형태가 아닐까요?!</code> 이 질문에 대해서는 <code>아니요! 그 친구들도 사각형 안에서 둥글게 만든 레이아웃이 존재하는거에요!</code> 라고 말할 수 있습니다. </p><p>단순하게 생각하세요. <strong>모든 HTML요소는 사각형으로 이루어져 있고, 사각형을 단장시키는 행위가 <code>CSS</code>입니다</strong>.</p><h3 id="Div-Division"><a href="#Div-Division" class="headerlink" title="Div (Division)"></a>Div (Division)</h3><p>위 사진의 파란색 상자 안에서 <code>첫 번째 버튼, 개발직군 공고 더보기</code>를 한번 봐 볼께요.</p><p><img src="image4.png" alt="image4"></p><p>버튼을 감싸고 있는 div 영역이 있네요.</p><p><img src="image5.png" alt="image5"></p><p>그리고 div 영역 안에 a 태그로 된 버튼이 있습니다.</p><p>그 외에도 대다수의 레이아웃은 div로 감싸져 있어요. 여기서 궁금해지죠. <code>왜 div로 감싸는 걸까?</code>, <code>div가 뭔데??</code>와 같은 질문들이요. 그 질문에 대답을 하지면 <code>div는 요소를 묶는 존재이고</code>, <code>동시에 다른 element와 구분을 하기 위해 사용하기 때문</code>이에요. 그리고 제일 중요한 <code>div</code> 태그의 특징은 <strong>정렬등의 스타일을 적용하는데 매우 편리하다</strong>는 점이에요.</p><h4 id="Div-활용-첫-번째-요소를-묶고-구분하기"><a href="#Div-활용-첫-번째-요소를-묶고-구분하기" class="headerlink" title="Div 활용 첫 번째, 요소를 묶고 구분하기"></a>Div 활용 첫 번째, 요소를 묶고 구분하기</h4><p>Div는 요소를 묶는 역할과 동시에 구분하는 역할로도 사용되요. 아까 봤던 이미지를 한번 더 보실께요.</p><p><img src="image3.png" alt="image3"></p><br><p>위의 레이아웃은 아래의 코드와 같습니다.</p><br><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>인재채용<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>우아한형제들과 함께 성장할 수 있는 기회!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>highlight<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>지금이 바로 그 때<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>입니다.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">40</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>개발직군 채용<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">data-role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bind<span class="token punctuation">"</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>recruits_develop<span class="token punctuation">"</span></span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main-recruit-tech-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/서버<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10571<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[배민마켓] 백엔드 애플리케이션 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/업무시스템<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10567<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>업무시스템 서버 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/서버<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10698<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[배민아카데미] 서버 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-area-table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/recruit/tech<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>개발직군 공고 더보기<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>위의 소스는 하나의 큰 Div에 여러가지 요소가 들어가있는 걸 볼 수 있습니다. 각각의 요소가 div element로 구분되어 있는 것도 확인할 수 있구요. div는 코드를 보면 알 수 있듯 요소를 묶거나 구분하는데 쓰입니다.</p><h4 id="Div-활용-두-번째-요소를-정렬하거나-스타일-적용하기"><a href="#Div-활용-두-번째-요소를-정렬하거나-스타일-적용하기" class="headerlink" title="Div 활용 두 번째, 요소를 정렬하거나 스타일 적용하기"></a>Div 활용 두 번째, 요소를 정렬하거나 스타일 적용하기</h4><p>위의 코드를 아래와 같이 수정해볼께요.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.1</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>인재채용<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>우아한형제들과 함께 성장할 수 있는 기회!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>highlight<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>지금이 바로 그 때<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>입니다.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">40</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>개발직군 채용<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">data-role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bind<span class="token punctuation">"</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>recruits_develop<span class="token punctuation">"</span></span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main-recruit-tech-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/서버<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10571<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[배민마켓] 백엔드 애플리케이션 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/업무시스템<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10567<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>업무시스템 서버 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/서버<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10698<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[배민아카데미] 서버 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-area-table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/recruit/tech<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>개발직군 공고 더보기<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><br><p>최상위 div에 opacity를 0.1을 주었습니다. opacity는 알파값인데요, 요소의 흐린 정도를 나타냅니다. 0.1로 변경하면 div 요소들이 엄청 흐려지겠군요! 결과를 한 번 봐보겠습니다.</p><br><p><img src="image6.png" alt="image6"></p><br><p>엄청 흐려졌네요! 이로써 <code>div</code> 태그에 CSS 옵션을 주게되면 한번에 내부의 CSS 속성을 줄 수 있는 걸 확인했습니다. 다음으로 정렬을 살펴보도록 하겠습니다. 현재 정렬을 수직으로 하고 있는데 수평으로 변경해보겠습니다.</p><br><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>인재채용<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>우아한형제들과 함께 성장할 수 있는 기회!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>highlight<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>지금이 바로 그 때<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>입니다.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">40</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>개발직군 채용<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">data-role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bind<span class="token punctuation">"</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>recruits_develop<span class="token punctuation">"</span></span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main-recruit-tech-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/서버<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10571<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[배민마켓] 백엔드 애플리케이션 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/업무시스템<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10567<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>업무시스템 서버 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>개발/서버<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/recruit/tech?pidx<span class="token punctuation">=</span>10698<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[배민아카데미] 서버 개발자 모집<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-area-table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#/recruit/tech<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>개발직군 공고 더보기<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><br><p>이번에도 최상단 <code>div</code>에 <code>display: flex</code>와 <code>flex-direction: row</code> 옵션을 주었습니다. 옵션을 주면, 레이아웃이 수평으로 변하겠죠? 결과값을 보도록 합시다.</p><br><p><img src="image7.png" alt="image7"></p><p>와! 정렬이 수평으로 변했어요! 이와 같이, 간단한 옵션의 조작으로 div 래핑을 통해 쉽게 레이아웃을 조정할 수 있습니다.</p><br><blockquote><p>display: flex는 레이아웃에 혁혁한 기여를 해주는 옵션입니다. 조금 있다 다시 보도록 해요.</p></blockquote><h3 id="P-태그와-Span-태그의-함정"><a href="#P-태그와-Span-태그의-함정" class="headerlink" title="P 태그와 Span 태그의 함정"></a>P 태그와 Span 태그의 함정</h3><p>P 태그와 Span 태그는 HTML에서 글자를 나타낼 때 가장 많이 사용하는 태그 중 하나입니다. 하지만 이 친구들을 자칫 모르고 사용하면 제대로 된 레이아웃이 구성이 안될 때가 많습니다.</p><p>먼저 아래의 예제를 살펴볼꼐요.</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>p와 span의 차이<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>P 1 이에요.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>P 2 이에요.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 1 이에요.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 2 이에요.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><br><p>위 소스를 실행시키고 윈도우라면 F12, 맥이라면 커맨드 + 옵션 + I를 눌러보세요. 아래와 같은 화면이 나올꺼에요.</p><br><p><img src="image14.png" alt="image14"></p><p>차이점 하나가 바로 보이네요. 위의 사진에서 알 수 있는 사실은 <strong>P 태그는 한 줄을 전부 사용하고, Span은 태그가 라인 전체를 사용하지 않습니다.</strong> 중요한 것은 <strong>P는 문단에 사용하는 태그</strong>이며 그래서 <code>Paragraph</code>를 뜻합니다. <strong>Span은 한 단어 등 짧은 문구에 사용되는 태그</strong> 입니다. 한 가지 차이점을 더 알기 위해, 개발자 도구의 Inspect로 P 태그 부분에 커서를 올려보세요.</p><br><p><img src="image15.png" alt="image15"></p><br><p>P 태그의 위 아래에 보면 주황색 구역이 있습니다. 이 부분은 margin을 나타냅니다. P 태그는 기본적으로 margin을 갖고 있는 태그입니다. 문단에 쓰이는 태그이다 보니, 기본적으로 CSS가 없을때를 상정하여 기본적인 Margin이 들어가 있는 것이죠. 그런데 여기서 굉장히 주요한 특징이 하나 더 있습니다. 그 위의 감싼 div에 커서를 올려보세요.</p><br><p><img src="image16.png" alt="image16"></p><br><p>에에? 커서를 올렸는데 두 p 태그가 겹쳐지는 사이 부분이 두 마진이 겹쳐서 표기가 되고 있어요. 원래는 높이가 2배가 되야 하는데 한개어치의 간격 차이밖에 안나네요. 우리가 의도를 안했다면 이런 레이아웃은 문제가 되겠죠? 그래서 일반적으로 P 태그에는 Margin 옵션을 0으로 설정하는 경우가 많습니다.</p><h2 id="CSS의-이해"><a href="#CSS의-이해" class="headerlink" title="CSS의 이해"></a>CSS의 이해</h2><p>HTML의 Element가 직사각형으로 이루어진 요소들의 집합이라는 사실을 알게 되었어요. 이제, CSS에서 알면 편한 정보를 알아보도록 해요.</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>위에서 잠시 마주했던 <code>display: flex</code>는 display를 flex(유연한, 유연하게)로 바꿔주는 친구에요. 먼저 기본 display 옵션을 보고 가도록 해요.</p><p><img src="image3.png" alt="image3"></p><br><p>위 이미지의 CSS를 한번 봐보세요. <code>div</code>의 기본 <code>display</code> 값이 어떻게 되어있나요?</p><br><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>기본값이 <code>block</code>으로 되어있는 걸 볼 수 있어요. <code>block</code>을 보면 어떤 생각이 나시나요? 단단한 블록이 생각날꺼에요. 맞습니다. <code>display: block</code>은 영역 자체를 단단한 블록처럼 만들어서 크기가 외부에 의해 변경되지 않도록 하는 속성이에요. 그래서 block으로 지정된 여러 element가 있으면 해당 element는 넓이에 따라서 밑으로 개행되거나 합니다.</p><p>그렇다면 <code>display: flex</code>는 무엇일까요? <code>flex</code>옵션을 주게되면 유연하게 내부를 조작할 수 있게 됩니다. 기존 <code>block</code> 속성은 내부를 <code>float</code>과 같은 옵션으로 정렬을 해주었지만 <code>float</code>은 워낙 브라우저마다 버그도 많고 중첩되면 랜덤으로 버그가 걸리는 문제가 있습니다. 그렇기 때문에 정렬을 위한 <code>flex</code>를 고안하게 된 것이에요. 즉, <code>display: flex</code>를 적용하면 해당 영역은 독자적인 <code>flex</code>영역으로 잡혀, 기존 방식과 다르게 조작할 수 있게 됩니다. 그렇다면 <code>flex</code>로 다룰 수 있는 몇 가지 옵션에 대해서 알아볼께요.</p><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p><code>flex-direction</code>은 flex element의 그려지는 진행 방향을 설정하는 Property에요.</p><p><img src="image9.png" alt="image9"></p><br><p>위 사진은 <code>display: flex</code> 옵션을 적용하고 <code>flex-direction: row</code> 옵션을 주었습니다. 어떤가요? 그려지는 순서가 가로로 진행되죠?</p><br><p><img src="image10.png" alt="image10"></p><p>위 사진은 <code>display: flex</code> 옵션을 적용하고 <code>flex-direction: column</code> 옵션을 주었습니다. 이는 row와 다르게 세로로 진행 되는 걸 볼 수 있습니다.</p><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p><code>justify-content</code>는 가로축 정렬을 하는데 쓰이는 Property에요.</p><p><img src="image11.png" alt="image11"></p><ul><li><code>justify-content: flex-start</code> : 시작 부분부터 정렬을 합니다.</li><li><code>justify-content: center</code> : 가운데 부분부터 정렬을 합니다.</li><li><code>justify-content: flex-end</code> : 마지막 부분부터 정렬을 합니다.</li></ul><p>기본적인 방향을 바꾸는 세가지 옵션입니다. 해당 옵션 말고 간격 자체를 변경하는 속성도 있습니다.</p><p><img src="image13.png" alt="image13"></p><ul><li><code>justify-content: space-between</code>: 사이 간격을 유지하지 않고 끝 점으로 나눕니다.</li><li><code>justify-content: space-around</code>: 사이 간격을 유지하면서 요소를 나눕니다.</li></ul><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p><code>align-items</code>는 세로축 정렬을 하는데 쓰이는 Property에요.</p><p><img src="image12.png" alt="image12"></p><ul><li><code>align-items: flex-start</code> : 시작 부분부터 정렬을 합니다.</li><li><code>align-items: center</code> : 가운데 부분부터 정렬을 합니다.</li><li><code>align-items: flex-end</code> : 마지막 부분부터 정렬을 합니다.</li></ul><br><blockquote><p>여기서 중요한 포인트!<br>-<br>flex-direction: row에서 column으로 변경할 경우, 정렬 방법이 바뀝니다. row에서 justify-content의 역할은 align-items로 변경되고, align-items의 역할은 justify-content로 변경되는데 직접 해보고 보시면 좋습니다!</p></blockquote><h3 id="Margin과-Padding-그리고-Border"><a href="#Margin과-Padding-그리고-Border" class="headerlink" title="Margin과 Padding, 그리고 Border"></a>Margin과 Padding, 그리고 Border</h3><p>쉽게 정리하면, Margin은 Element와 Element 사이의 간격을 말하고 Padding은 Element 내부의 간격을 뜻합니다. Border는 Margin과 Padding 사이의 영역을 일컫는데, 대부분 아웃라인으로 사용하는 경우가 많습니다. 한번 아래의 예제를 실행해보도록 합시다.</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.section-1</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.section-2</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>예제를 실행시키면 section-1과 section-2로 지정된 친구들이 간격이 떨어져있고, section-2는 section-1보다 크기가 큰 걸 볼 수 있어요. 왜 크기가 클까요? 그 이유는 section-2에 padding이 있기 때문이에요. padding은 앞서 설명한대로 Element 내부의 간격을 말해요. 그래서 Element 내부의 사이즈로 칭해집니다. 만약 늘어나는게 원치 않다. 나는 사이즈를 고정하고 padding 영역만큼 contents 사이즈를 줄이겠다 라고 한다면 아래와 같이 CSS를 수정해주세요.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.section-1</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.section-2</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>실행해보시면 알겠지만 사이즈가 일정해진 걸 볼 수 있어요. 무엇이 추가되었는지 한번 볼까요?</p><p><code>box-sizing</code>가 추가 되었네요. <code>box-sizing</code>은 현재 box의 크기를 어디 기준으로 잡을지 지정하는 옵션입니다. 위에서 말했지만 모든 html의 element는 직사각형 박스로 되어있어요. 그렇기 때문에 box의 사이즈 기준을 정하는 건 중요한 설정입니다. <code>box-sizing</code>은 두 가지 옵션을 많이 사용합니다.</p><ul><li>border-box: box의 크기를 border까지로 설정합니다.</li><li>content-box: box의 크기를 content까지로 설정합니다.</li></ul><p>먼저 이 옵션을 보기전에 아래의 그림을 볼 필요가 있습니다.</p><p><img src="image17.png" alt="image17"></p><p>색깔 단위로 인지를 해봅시다. 짙은 주황색 영역은 margin, 옅은 주황색 영역은 border, 초록색 영역은 padding, 파란색 영역은 content 라고 칭합니다. 이렇게 이야기를 하고 나니, 위의 이야기가 조금 이해되기 시작하셨죠? 맞습니다. border-box는 border영역, 즉 padding까지 사이즈로 잡는거에요.</p><p>해당 element의 크기가 120x120이라면, border-box 옵션을 줄 때 120x120을 고정하면서 내부 영역의 사이즈를 줄여서 해결합니다. content-box는 content 영역, 파란 영역을 그대로 두고, 120x120에서 padding을 20px 주면, 160x160 크기가 되는 것 입니다. (왜 140이 아니고 160이냐면 왼쪽, 오른쪽 전부 20이 붙으니 두 배의 값이 붙습니다.)</p><p>우리가 의도한 레이아웃이 아닐때는 대다수 border-box를 주면 해결되는 경우가 많습니다. 이 점을 이용해서 한번 해결해보세요!</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>이 문서를 보시면서 백앤드 개발자 분들이 편-안한 HTML/CSS 코딩을 하길 바랍니다. 읽어주셔서 감사합니다.</p><p><img src="image8.png" alt="image8"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;image1.png&quot; alt=&quot;main_image&quot;&gt;&lt;/p&gt;
&lt;p&gt;하나의 프로덕트를 개발하면서 웹은 들어갈 수 밖에 없는 필수 존재입니다. 특히나 최근의 웹 시장은 웹 프론트앤드 개발자가 부족해짐에 따라 서버 개발자들이 어드민을
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="HTML" scheme="https://vallista.kr/tags/HTML/"/>
    
      <category term="CSS" scheme="https://vallista.kr/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>모바일 웹뷰를 탐험하는 개발자를 위한 안내서 (상)</title>
    <link href="https://vallista.kr/2019/11/10/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9%EB%B7%B0%EB%A5%BC-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%88%EB%82%B4%EC%84%9C-%EC%83%81/"/>
    <id>https://vallista.kr/2019/11/10/모바일-웹뷰를-탐험하는-개발자를-위한-안내서-상/</id>
    <published>2019-11-10T05:35:28.000Z</published>
    <updated>2020-06-04T05:27:52.973Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg" alt="이미지1"></p><blockquote><p>다음 포스트<br><a href="https://vallista.kr/2019/12/28/%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%9B%B9%EB%B7%B0%EB%A5%BC-%ED%83%90%ED%97%98%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%88%EB%82%B4%EC%84%9C-%EC%A4%91/">모바일 웹뷰를 탐험하는 개발자를 위한 안내서 (중)</a></p></blockquote><h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>모바일 웹을 여행하는 사람들이라면 알겠지만, 웹의 중요성이 커지고 있습니다. iOS, Android 앱은 신규 기능을 추가하게 되면 앱 업데이트를 통해서 제공해야 하는데 업데이트를 유도하게 되면 여러가지 문제가 생기기 때문입니다.</p><p>가장 큰 문제는 모든 유저가 업데이트를 하지 않는다는 것 입니다. 업데이트를 하지 않기 때문에 과거 버전에 대해서 하위 호환성을 생각해야 하며, 이는 거의 영구적입니다. Fade-out을 위해서는 문제가 되는 버전을 사용 중인 고객이 앱을 업데이트 해야 하는데, 이는 현실적으로 힘든일입니다. 그렇기 때문에, 최근에는 웹뷰를 만들어 그 위에서 웹을 띄우는 형식으로 베타 테스트, A,B 테스트, 결제등의 지면에서 활용하고 있습니다. 이 방법은 문제가 생겼을 때, 앱 업데이트 없이 웹만 재배포하여 문제를 해결할 수 있기 때문에 유동성을 확보할 수 있습니다.</p><p>그렇다면, 웹뷰를 사용하는 몇 가지 큰 이유를 보도록 합시다.</p><h3 id="모바일-기기의-성능-향상"><a href="#모바일-기기의-성능-향상" class="headerlink" title="모바일 기기의 성능 향상"></a>모바일 기기의 성능 향상</h3><p>이전 앱 시장에서 웹뷰를 사용하지 않았던 이유는 Native의 강력한 성능 때문이었습니다. 과거 성능이 별로 좋지 못하던 모바일 기기는 웹뷰에 진입하기만 하더라도 랙이 걸렸고, 이는 모바일 기기의 성능 향상으로 허들이 없어지다시피 되었습니다. 당장 갤럭시 3만 하더라도 웹뷰에 진입하면 많은 랙이 걸립니다. 이러한 구형 디바이스 지원을 위해 웹쪽에서는 최적화를 신경써주어야 합니다.</p><h3 id="JavaScript의-발전"><a href="#JavaScript의-발전" class="headerlink" title="JavaScript의 발전"></a>JavaScript의 발전</h3><p>JavaScript는 과거부터 언어자체의 난해함으로 인한 개발의 어려움이 존재했습니다. DOM 조작이나 이런 행동들이 상당히 까다로웠기 때문이죠. JavaScript는 이러한 문제점에서 자유로워지기 위해 계쏙 발전하고 있습니다. 그 중 가장 큰 발전을 이룬 ES2015 이후부터 Modern JavaScript라고 불리우는데, 최신의 언어 스펙을 무장하게 되었습니다. 그래서 웹 개발자는 ES2015 이후의 문법을 사용하여 편리하게 개발을 할 수 있게 되었습니다.</p><h3 id="SPA-Single-Page-Application-의-대두"><a href="#SPA-Single-Page-Application-의-대두" class="headerlink" title="SPA(Single Page Application)의 대두"></a>SPA(Single Page Application)의 대두</h3><p>SPA(Single App Application)의 대두는 위의 모바일 기기 성능 향상으로 함께 이루어진 기술입니다. 쉽게 말하면 기존의 서버사이드에서 HTML을 페이지마다 내려주는 기술에서 탈피해, 하나의 페이지에서 JavaScript로 동적 렌더링을 하겠다는 의미입니다.</p><ul><li>사용자의 사용성이 좋아집니다. 페이지 전환 시 새로운 페이지를 로드하는 개념이 아니므로 애니메이션을 매끄럽게 줄 수 있습니다.</li><li>서버에서 메인 페이지 하나만 로드를 하면 나머지는 JavaScript 내에서 동작하므로 페이지마다 서버 작업을 안해주어도 됩니다.</li><li>HTML, CSS, JavaScript 다운 받는다면 캐시가 남았다는 가정하에, 로컬에서도 동작시킬 수 있습니다.</li><li>JavaScript 기반으로 작업하므로 협업을 더 효율적으로 할 수 있습니다. Component 별로 때서 작업이 가능하기 때문입니다.</li></ul><hr><h2 id="모바일-대응하기"><a href="#모바일-대응하기" class="headerlink" title="모바일 대응하기"></a>모바일 대응하기</h2><p>이러한 장점으로 모바일 웹뷰의 사용이 늘어나면서 다양한 이슈들이 존재합니다. 여러 이슈들에 대해서 알아보고, 어떻게 대처해야 하는지 알아보도록 합시다.</p><h3 id="CSS에서-기본-Height를-설정해주지-못했어요"><a href="#CSS에서-기본-Height를-설정해주지-못했어요" class="headerlink" title="CSS에서 기본 Height를 설정해주지 못했어요!"></a>CSS에서 기본 Height를 설정해주지 못했어요!</h3><p>11 이하의 디바이스에서는 Height값이 기본적으로 잡혀있지 않기 때문에 auto든 100% 키워드를 설정해주어야 해요! 내부 contents의 크기가 유동적이라면 auto! 만약 전체 크기를 가지고 싶다면 100%로 설정해주세요!</p><h3 id="Flex를-사용하시나요-그렇다면-polyfill을-사용해주세요"><a href="#Flex를-사용하시나요-그렇다면-polyfill을-사용해주세요" class="headerlink" title="Flex를 사용하시나요?! 그렇다면 polyfill을 사용해주세요!"></a>Flex를 사용하시나요?! 그렇다면 polyfill을 사용해주세요!</h3><p><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a>로 polyfill 설정을 해주세요!<br>그 외에도 Autoprefixer는 CSS 관련으로 다양한 일을 수행해준답니다!</p><h3 id="비동기-후-데이터-레이아웃이-그려지지-않아요"><a href="#비동기-후-데이터-레이아웃이-그려지지-않아요" class="headerlink" title="비동기 후 데이터 레이아웃이 그려지지 않아요!"></a>비동기 후 데이터 레이아웃이 그려지지 않아요!</h3><p>그렇다면 비동기 코드를 한번 봐보세요. Promise나 Async Await를 쓰고계시지 않나요? 우리 이 친구들의 polyfill을 추가해주어야 합니다!</p><p><a href="https://www.npmjs.com/package/promise-polyfill" target="_blank" rel="noopener">promise-polyfill</a><br><a href="https://www.npmjs.com/package/promise-polyfill" target="_blank" rel="noopener">es6-promise</a><br><a href="https://www.npmjs.com/package/@babel/polyfill" target="_blank" rel="noopener">@babel/polyfill</a></p><blockquote><p>오우 이런! @babel/polyfill은 deprecated 되었답니다!<br><a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener">core.js</a>를 다운받아서 이 안의 @babel/polyfill을 사용해주세요!</p></blockquote><h3 id="IOS-Touch-삭제하기"><a href="#IOS-Touch-삭제하기" class="headerlink" title="IOS Touch 삭제하기"></a>IOS Touch 삭제하기</h3><p>기본적으로 <code>cursor: pointer</code> 옵션을 주면 모바일에서 터치 시 터치 레이어가 잡혀요! 아래와 같이 CSS를 주세요!</p><pre class=" language-css"><code class="language-css"><span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-khtml-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></code></pre><p>위의 옵션에는 모질라 브라우저와 IE 브라우저 옵션까지 함께 들어있습니다.</p><h3 id="기본-브라우저-스타일-변경"><a href="#기본-브라우저-스타일-변경" class="headerlink" title="기본 브라우저 스타일 변경"></a>기본 브라우저 스타일 변경</h3><p>각 브라우저는 브라우저만의 default css 설정값이 있습니다. 이러한 설정값은 도움이 되는 경우도 있지만, 다채로운 스타일을 적용할 때 해가 되는 경우가 많은데요 그 중에 button은 각 브라우저 별로 css를 제공하기 때문에 변경을 해야할 필요가 있습니다.</p><p><a href="https://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements" target="_blank" rel="noopener">참고 링크</a> 자세한 데이터는 여기를 확인하세요!</p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><pre class=" language-css"><code class="language-css"><span class="token selector">input </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><pre class=" language-css"><code class="language-css"><span class="token selector">input </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="ul-ol"><a href="#ul-ol" class="headerlink" title="ul, ol"></a>ul, ol</h4><pre class=" language-css"><code class="language-css"><span class="token selector">ul, ol </span><span class="token punctuation">{</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Header-p-etc"><a href="#Header-p-etc" class="headerlink" title="Header, p, etc.."></a>Header, p, etc..</h4><pre class=" language-css"><code class="language-css"><span class="token selector">h1, h2, h3, h4, h5, h6, p, ul, ol, li, dl, dt, dd, em, figure, figcaption, address </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>많이 쓰는 태그들을 넣었습니다. 이외에도 필요한 게 있다면 위의 링크를 이용해주세요!</p><h3 id="Overlay-레이아웃이-있을-때-Body-스크롤-막기"><a href="#Overlay-레이아웃이-있을-때-Body-스크롤-막기" class="headerlink" title="Overlay 레이아웃이 있을 때, Body 스크롤 막기"></a>Overlay 레이아웃이 있을 때, Body 스크롤 막기</h3><p>모달이나 토스트등의 레이아웃이 나올 때, Body의 스크롤 레이어를 막야아 할 일들이 있습니다. 하지만 수많은 모바일 기기 시장에서 각 디바이스의 브라우저는 css 옵션에 대해서 제각각 설정값을 다르게 해주었기 때문에 우리는 이를 대응해주어야 합니다.</p><p>아주 쉽게 대응할 수 있는 방법은 아래와 같습니다.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.modal-wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#8a8a8a</span>b<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>모달 layout에 해당과 같은 소스를 적용해주세요. 이렇게 하면 데스크톱에서는 제대로 동작을 하는 걸 볼 수 있어요. 이제 이 소스를 모바일 디바이스에서 구동해보세요. 확인해보시면 알겠지만, 모바일 브라우저에서는 제대로 동작을 하지 않아요! 왜냐하면 <code>position: fixed</code> 옵션은 모바일 디바이스에서 제대로 된 동작을 보장하지 않습니다.</p><p>그러므로 우리는 쉽게 해결을 위해 <a href="https://github.com/willmcpo/body-scroll-lock" target="_blank" rel="noopener">Body Scroll Lock</a> 이 모듈을 사용하도록 해요. 하지만 모달 내에 스크롤 레이어가 필요하다면 옵션을 잘 알고 써야하니 참고해주세요!</p><p><a href="https://bradfrost.com/blog/post/fixed-position/" target="_blank" rel="noopener">이슈 포스팅</a></p><h3 id="Mobile-Safari-스크롤-흔들림-이슈"><a href="#Mobile-Safari-스크롤-흔들림-이슈" class="headerlink" title="Mobile Safari 스크롤 흔들림 이슈"></a>Mobile Safari 스크롤 흔들림 이슈</h3><p>모바일 사파리에서 <code>position: fixed</code>를 주고, fixed Element 위에서 스크롤을 하다보면 스크롤이 흔들리는 이슈가 있습니다. 해당 이슈를 해결하는 방법은 아래와 같습니다.</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.modal-wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">...</span><span class="token punctuation">}</span></code></pre><hr><p>위의 이슈 말고도 수많은 css 이슈들이 있으나, 이번 장에서는 많이 나오는 이슈 몇 가지에 대해서 알아봤습니다. 다음 글에서는 조금 더 어려운 대응 이슈를 보도록 하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i0.wp.com/gaegul.kr/wordpress/wp-content/uploads/1/cfile29.uf.2529523E532F23481C8D5B.jpg&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="HTML" scheme="https://vallista.kr/tags/HTML/"/>
    
      <category term="CSS" scheme="https://vallista.kr/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>2019년 7월 회고</title>
    <link href="https://vallista.kr/2019/08/01/2019%EB%85%84-7%EC%9B%94-%ED%9A%8C%EA%B3%A0/"/>
    <id>https://vallista.kr/2019/08/01/2019년-7월-회고/</id>
    <published>2019-08-01T08:20:29.000Z</published>
    <updated>2020-06-04T05:27:52.867Z</updated>
    
    <content type="html"><![CDATA[<p>상반기의 마지막 6월을 넘어 하반가 초입인 7월에 다다르면서 올해 초에 하려고 마음먹었던 일을 제대로 완수하지 못했다. 어떤게 부족했고, 어떤일을 잘 했는지 7월 회고를 통해 풀어보려고 한다.</p><h2 id="7월에-달성한-목표"><a href="#7월에-달성한-목표" class="headerlink" title="7월에 달성한 목표"></a>7월에 달성한 목표</h2><ul><li><strong>이직하기</strong></li><li>기본기 공부</li><li>CI 자동화</li></ul><p>7월에는 계획했던 일 중 굵직한 <strong>이직하기</strong>를 완수했다. 원래 계획이라면 상반기에 완수해야 했지만 이직이 말처럼 쉽지않았다. 퇴사는 토끼뜀보다 빠르게 할 수 있으나, 내가 가고 싶은 회사에 가는일은 거북이 걸음보다 느리고 힘들었다.<br>총 6개의 회사에 면접을 보고 어떤 인재를 원하는지 뼈져리게 느꼇다. 면접에서 요구하는 수준이 만만치 않다. 다양한 방면으로 얕고 넓게 개발을 했던 지난 몇 년간 내 스펙은 다양하게 할 줄 알았지만, 깊이는 없어 면접에서 계속 떨어졌다는 사실을 인지하게 되었다.<br>그래서, 7월에는 기본기에 대해 조금 더 공부할 필요성을 느끼게 되었다. 또한 반복되는 작업을 매일 매일 하는게 불편해서 CI를 통한 자동화 공부도 하면 좋을꺼라 생각해서 7월에 위 목표를 두었고, 만족할 만큼 목표에 도달했다.</p><p>CI는 Jenkins와 Travis CI를 통해 어떤 점에서 무엇이 더 편하고 어떤 상황에 강력한지 비교를 할 수 있게 되었다. 쉽게 정리하자면, Jenkins는 설치형으로써 서버가 있다면 Docker를 통해 컨테이너를 만들어서 추가비용 없이 유지할 수 있다는 장점이 있으나 1부터 100까지 전부 커스터마이징 해야한다는 단점이 있다. 이는 다양한 방면으로의 개발이 필요한 곳에서는 효과적으로 쓰일 수 있지만 테스팅, 배포등의 고정된 정적 시나리오를 갖고있는 프로젝트에서는 불편할 수 있다. 거기에 Jenkins가 UI나 Docker에서 갖고있는 image가 최신이 아니어서 별도로 삽질을 해야한다는 단점도 작용한다. Travis CI는 테스팅과 배포와 같은 정적 시나리오에서 매우 강력한 힘을 보여준다. 인터페이스도 깔끔하며 어떤 작업이 일어나는지 실행 단위마다 터미널이 제공되어 확인 할 수 있다. 하지만 Travis CI는 간편한 대신, Github이나 Gitlab의 Private 프로젝트에 대해서 빌드당 과금을 부여하는 정책을 갖고있다. 그래서 소규모나 돈이 많이 않은 스타트업에서는 무리일 수 있겠다는 생각이 들었다. (가격대가 6만원이상부터 시작).</p><p>기본기는 기술의 명칭을 나만의 정의를 갖는 작업이 필요하다 생각했다. 예를들어 Generator와 같은 많이 쓰이는 기술 용어에 대해서 ‘어떻게 쓰는지는 안다’ 하지만 ‘왜 나왔고 정의가 무엇인지’는 모르는 경우가 많다. 하지만 이런 면이 매우 중요하다 생각했던게, 어떤 기술을 왜 나왔는지 이해도 없이 사용하게 되면 제대로 쓰일 수 없기 때문이며, 협업할 때 명확한 단어 선택이 중요하기 때문이다.</p><h2 id="7월에-달성하지-못한-목표"><a href="#7월에-달성하지-못한-목표" class="headerlink" title="7월에 달성하지 못한 목표"></a>7월에 달성하지 못한 목표</h2><ul><li>6시 기상</li><li>세미 프로젝트에 신경쓰지 못함</li><li>사람을 만나는데 리소스낭비가 너무 큼</li></ul><p>7월에는 이직에 성공하여 한껏 헤이해졌다. 긴장이 다 풀렸기 때문인지 에너지도 충분하지 못했다. 그래서 십며칠 정도를 6시 기상을 하지 못했는데 8월부터 다시 재시작할 생각이다. 6시 기상은 평생의 과제로 안고 살아갈 생각이며 이는 내 라이프사이클로 고정이 될 것이다.</p><p>세미 프로젝트에 신경쓰지 못한 이유는 위의 이유와 비슷한데 한껏 헤이해진 면도 있고, 팀원들이 바쁘기 때문에 동기부여가 일어나지 않았던 점이 있다. 하지만 이런 이유도 내가 부덕하기 때문이며 좀 더 바쁘게 살아야겠다는 생각을 안게 되었다.</p><p>사람을 만나는데 리소스 소비가 크다는 걸 자각했다. 보통 한달에 사람만나는 약속으로 주말은 풀 약속이 되어있고 평일도 평균 3일씩 약속을 잡아두는 것 같다. 이는 내가 사람을 만다는 일을 좋아하기도 하지만 너무 생각없이 약속을 잡는 경향이 있다는 생각이 들었다. 또한 비용 지출도 왠만하면 내가 사는 편이어서 금액 지출도 컷다. 그래서 기본적으로 적금하던 통장이 위험해진 경우도 많았다. 약속을 많이 잡게 되니까 프로그래밍을 많이 하지 못하게 되어 늦은 밤에 코딩을 하게 되었고 그래서 6시에 일어나는게 매일매일 힘들었다. (하루에 4~6시간 정도밖에 자지 못했다.) 현재 25살에서는 건강하니까 할 수 있는데, 30살이 넘으면 엄청 힘들어진다는 주변의 이야기를 미뤄 보았을 때 미래의 일을 위해서 시간을 킵해 운동에 전력을 다해야겠다 라는 생각이 들었다. 그런 의미에서 약속을 줄이고 자기자신을 관리할 수 있는 시간을 둬야겠다.</p><h2 id="8월-목표"><a href="#8월-목표" class="headerlink" title="8월 목표"></a>8월 목표</h2><p>8월은 7월보다 기운을 차려서 달리려고 준비중이다. 9월부터 이직을 하게 되는데 이직을 하면서 엄청나게 달려야하기 때문이다. 그래서 8월은 휴식기 및 자신을 돌아보는 달로 지정하고 조금 쉬엄쉬엄 가려 준비중이다.</p><ul><li>글또 포스팅 두 번 하기</li><li>휴식</li><li>목표를 다시 잡기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;상반기의 마지막 6월을 넘어 하반가 초입인 7월에 다다르면서 올해 초에 하려고 마음먹었던 일을 제대로 완수하지 못했다. 어떤게 부족했고, 어떤일을 잘 했는지 7월 회고를 통해 풀어보려고 한다.&lt;/p&gt;
&lt;h2 id=&quot;7월에-달성한-목표&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>제너레이터 (Generator)</title>
    <link href="https://vallista.kr/2019/07/12/%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0-Generator/"/>
    <id>https://vallista.kr/2019/07/12/제너레이터-Generator/</id>
    <published>2019-07-12T03:05:15.000Z</published>
    <updated>2020-06-04T05:27:53.050Z</updated>
    
    <content type="html"><![CDATA[<p>얼마 전, Generator가 무엇인가요? 라는 질문을 들었을 때 대답을 명확히 하지 못했다. 많이 쓰고 있지만 실제로 사용법 혹은 대략적인 개념밖에 설명을 못해서 이 개회에 정확히 알아야겠다는 생각이 들어 Generator의 개념과 사용방법에 대해서 이야기 해보려 한다.</p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>컴퓨터 과학에서 Generator는 루프의 <code>반복 동작을 제어</code>하는데 사용될 수 있는 루프이다. 여기서 알 수 있는 사실은, 모든 Generator는 <code>Iterator(반복자)</code>라는 것이다. Generator는 매개변수를 가지고 있고, 호출 할 수 있으며, 값을 생성한다는 점에서 배열을 반환하는 행동과 비슷한데, 모든 값을 포함하는 배열을 만들어서 반환하는게 아니라 한번에 한 작업을 처리하고 하나씩 산출한다. 그래서 전체 배열을 반환하는 로직보다 메모리가 적게 필요하며 첫 실행시에 갯수 제한 없이 즉시 작업을 처리하도록 명령할 수 있다. 쉽게 말해서, Generator는 기능이 붙은 Iterator(반복자)라고 볼 수 있다.</p><p>Generator는 <code>Coroutine</code>이나, <code>First-class continuations</code>처럼 흐름을 제어하는 구조적인 측면에서 구현될 수 있다.</p><blockquote><p><strong>Coroutine</strong><br>Coroutine(코루틴)은 실행 중지 및 재시작이 가능하도록 하여 non-preemptive multitasking(선제적 다중작업) 서브루틴을 일반화하는 컴퓨터 프로그램 구성 요소이다. 말이 좀 어려운데, 조금 더 펼쳐서 이야기를 해보자. 어떤 프로세스가 CPU를 할당 받으면 그 프로세스가 종료되거나 IO Request가 발생한다. 그래서 자발적으로 대기 상태로 들어갈 때 까지 계속 실행이 된다. 즉, 한 작업이 끝나고 다음 작업을 한다는 이야기이다. Coroutine은 프로그래밍 언어마다 지원하는 경우가 많다. 코루틴은 해당 로직이 동작하면서 정지하거나 재개하는 등의 행위를 할 수 있다.</p></blockquote><blockquote><p><strong>First-class continuations</strong><br>First-class continuations(1등급 연속체)는 명령의 실행 순서를 완전히 제어할 수 있는 구문이다. 지금 실행시킨 함수 호출이 끝나고 “발생시킨 함수” 혹은 “발생시키기 이전 함수”로 점프하는 데 사용된다. 이는, 프로그램의 실행 상태를 유지하는 것으로 생각할 수 있다. 설명이 어려운데, 보통 “Continuation Sandwich”(연속적인 샌드위치)로 설명한다.<br><code>주방 안의 냉장고 앞에서 샌드위치 재료를 꺼낸다고 생각해보자. 냉장고 안에서 칠면조나 빵과 같은 재료를 연속적으로 꺼내 샌드위치를 만들게 된다. 만든 샌드위치를 식탁위에 놓고 보니, 배가 차지 않을 것 같아서 샌드위치에 패티를 추가하기 위해 냉장고 앞으로 향했다. 냉장고 안에는 재료가 모두 소진되어 없었고 만든 샌드위치를 먹기위해 식탁으로 향했다.</code></p><p>연속적인 샌드위치 예제에서 알 수 있는 것은 <code>샌드위치는 프로그램 데이터</code>이며, <code>샌드위치 만들기</code> 루틴을 호출한 후 돌아오는게 아닌, <code>현재 지속되는 샌드위치 만들기</code> 루틴을 호출하여 샌드위치를 만든 다음, 실행이 중단된 곳에서 다시 진행된다.<br>대표적인 예는, <code>async</code> <code>await</code>로 들 수 있다.</p></blockquote><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>제너레이터는 CLU(1975년)이라는 언어에 처음 대두가 되었다. 이후에 나온 Icon(1977년)이라는 문자열 조작 언어에서 제너레이터는 돋보이는 특징이었다. Python부터 JavaScript ES6에 이르기까지 많은 부분에 점차 Generator가 추가되었다. (각 언어마다 이름이 다를 수 있다. C#에서는 Generator를 Iterator로 명칭한다)</p><h2 id="Why-use"><a href="#Why-use" class="headerlink" title="Why use?"></a>Why use?</h2><blockquote><p>하단의 소스코드는 JavaScript를 기준으로 설명한다.</p></blockquote><p>먼저, 일반적인 반복문을 보자</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// Symbol.iterator</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ES6 for ... of</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>동일한 값을 출력하지만, for … of 문법은 Symbol.iterator 속성을 가지는 컬렉션에 대해서 반복을 할 수 있다는 특징이 있다. 즉 iterable한 객체에 대해서 사용할 수 있다는 뜻이다. JavaScript에서 Iterable한 객체는 <code>Symbol.iterator</code>를 속성으로 가지고 있고 iterator를 반환하는 객체를 뜻한다.</p><blockquote><p>JavaScript에서는 <code>Symbol.iterator</code>로 정의하여 사용했지만 다른 언어에서는 언어 내의 스펙이 따로 있을 것이다.</p></blockquote><p>이런 규칙을 <code>Iterable Protocol (이터러블 프로토콜)</code>이라 명칭하며, 이러한 규칙을 따르는 객체를 <code>Iterable Object (이터러블 객체)</code>라고 한다.</p><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>앞서 말한대로 Symbol.iterator를 속성으로 가지고 있으며, Iterator를 반환하는 객체를 Iterable 객체라고 한다.</p><p><code>[Symbol.iterator]()</code> 객체로 반환하는 iterator 객체는 <code>next</code> 메소드를 가지고 있으며, <code>next</code> 메소드는 반환값으로 iterator 종료가 되었는가에 대한 플래그인 <code>done</code>과 값을 나타내는 <code>value</code> 두 가지를 반환한다. 이런 규칙을 <code>Iterator Protocol (이터레이터 프로토콜)</code>이라고 한다.</p><p>일반적으로 아래와 같이 하나의 객체에 Iterator Protocol과 Iterable Protocol을 구현한다.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// iterator 객체</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// iterable 객체</span>    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// iterator 객체를 반환</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  next<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// iterator 객체는 next 함수를 내장하고 있어야 한다.</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'Hello'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// iterator protocol 규칙</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this 반환</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: false, value: 'Hello' }</span></code></pre><p>해당 소스는 종료 시점 없이 계속 값으로 ‘Hello’를 반환하는 예제이다.</p><p>Iterator의 장점은 다양한 Iterable 객체에 대해 하나의 Iterator Protocol을 구현하여 순회할 수 있다는 장점이 있다.</p><h2 id="Generator-Function"><a href="#Generator-Function" class="headerlink" title="Generator Function"></a>Generator Function</h2><p>왜 Generator를 설명하는 곳에서 Iterator를 설명했는가? 그 이유는 1) Iterable과 Iterator를 알아야 이해할 수 있기 때문이며 2) JavaScript의 Generator는 위에서 설명한 일련의 과정을 쉽게 만드는 방법이기 때문이다.</p><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>예시로 덧셈과 곱셈을 하는 프로세스를 이터레이터로 구현해보자.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">calculatingIterator</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start    <span class="token keyword">this</span><span class="token punctuation">.</span>dest <span class="token operator">=</span> dest  <span class="token punctuation">}</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Iterable Protocol</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">++</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> undefined <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">calculatingIterator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: false, value: 1 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: false, value: 2 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: false, value: 20 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: true, value: undefined }</span></code></pre><p>이 코드를 ES6의 제너레이터를 사용하여 변경해보도록 하자.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">calculatingGenerator</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> value <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">else</span> value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">yield</span> value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">calculatingGenerator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: false, value: 1 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: false, value: 2 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: false, value: 20 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { done: true, value: undefined }</span></code></pre><p>제너레이터의 소스코드를 보면, 직접 iterable protocol과 iterator protocol를 구현한 객체처럼 결과가 나오는 걸 볼 수 있다. 그렇다면 Generator를 효과적으로 사용할 수 있는 비동기 예제를 통해서 사용 예를 조금 더 보도록 하자.</p><h3 id="Asynchronous-Processing"><a href="#Asynchronous-Processing" class="headerlink" title="Asynchronous Processing"></a>Asynchronous Processing</h3><p>메인 페이지에서 세션체크 후 포스트, 인기있는 포스트, 이 달의 포스트를 가져오려고 한다. 이럴 때 구상할 수 있는 방법은 아래와 같다.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">loadMainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 세션 체크</span>  <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 전체 포스트</span>  <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 인기있는 포스트</span>  <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 이 달의 포스트</span>  <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>세션체크가 끝나고 포스트리스트 부르기, 그 다음 인기있는 포스트, 그 다음…<br>순차적인 진행을 의도했으나 JavaScript에서 위와 같은 구문은 제대로 실행되지 않는다.<br>각 변수에는 올바른 값이 들어가지 않는 이유는 네트워크를 처리 하기 전에 반환이 되기 때문이다.</p><p>그렇다면 이를 해결할 수 있는 방법은 무엇일까? ES6에는 Promise라는 문법이 존재한다.</p><h4 id="Promise를-이용해서-비동기-처리"><a href="#Promise를-이용해서-비동기-처리" class="headerlink" title="Promise를 이용해서 비동기 처리"></a>Promise를 이용해서 비동기 처리</h4><p>Promise를 이용해서 비동기 처리 코드를 작성해보자.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// promise 객체 반환</span><span class="token keyword">function</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// promise 객체 반환</span><span class="token keyword">function</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// promise 객체 반환</span><span class="token keyword">function</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// promise 객체 반환</span><span class="token keyword">const</span> loadMainPage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>  resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">loadMainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">than</span><span class="token punctuation">(</span><span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>promise를 사용하게 되면, than을 통해서 동기로 실행할 수 있다. 동기로 실행할 수 있다는 말은 네트워크 작업이 처리되고, 그 이후 순차적으로 다음 함수를 방문하여 일을 처리한다는 말이다.<br>즉, <code>loadMainPage</code>는 <code>resolve(getSessionCheck())</code>를 반환하므로 Promise function이 되었고 해당 함수를 실행후 <code>.then</code>을 통해 <code>getPostList()</code> 그 다음은 <code>getFavoritePostList()</code> 그 다음은 <code>getMontlyPostList()</code>를 실행하게 된다.</p><p>하지만 위의 호출 flow는 우리가 생각했던 그런 구조와 다른 방향으로써의 해결이라는 생각이 든다. 왜냐하면 Promise를 통해 <code>.then</code>을 호출해서 다음 함수를 호출하게 되면 다음 함수에 대한 제어권이 없어지기 때문이다. 또한 실행되는 환경이 다르기 때문에 클로저나 멤버변수를 사용하기 힘들어진다.</p><h4 id="Generator를-이용해서-비동기-처리"><a href="#Generator를-이용해서-비동기-처리" class="headerlink" title="Generator를 이용해서 비동기 처리"></a>Generator를 이용해서 비동기 처리</h4><p>그렇다면 Promise가 아닌, Generator를 사용하여 처리해보자. 위의 문제점을 generator는 해결할 수 있으며 오히려 더 직관적으로 보이게 코딩할 수 있다.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">loadMainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">yield</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">yield</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">yield</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">loadMainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { value: getSessionCheck()값, done: false }</span></code></pre><p>처음 우리가 설계했던대로 얼추 비슷하게 코딩이 되었다. 그런데 조금 다른 부분이 보인다.<br>generator는 iterator를 반환하는 함수인데, 반환하기 위해서는 <code>.next()</code>함수를 통해 다음으로 넘어가야하는 문제가 있다.</p><p>그렇다면 이 부분을 해결할 수 있는 방법이 무엇일까?</p><ol><li>함수 내 호출</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span>itr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 비동기 처리 */</span>  itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// promise 객체 반환</span><span class="token keyword">function</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 비동기 처리 */</span>  itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// promise 객체 반환</span><span class="token keyword">function</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 비동기 처리 */</span>  itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// promise 객체 반환</span><span class="token keyword">function</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 비동기 처리 */</span>  itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>심플하다. 함수를 사용하고 끝나면 next()를 함수 내에서 호출해준다.<br>하지만 이렇게되면 함수간에 의존성이 생기므로 별로 좋은 코딩으로 보이지 않는다.</p><ol start="2"><li>재귀호출</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">loadMainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runner</span><span class="token punctuation">(</span>generator<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">repeatIterator</span><span class="token punctuation">(</span><span class="token punctuation">{</span> done<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// done이 true가 될 때 까지</span>    <span class="token function">repeatIterator</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//다음 iterator 호출</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 시작</span><span class="token punctuation">}</span><span class="token function">runner</span><span class="token punctuation">(</span>loadMainPage<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>재귀호출을 통해, 해당 generator에 맞는 컨디션을 제작하여 한번 호출시 연속해서 실행 할 수 있는 로직을 구현할 수 있다.</p><h4 id="번외-Async-Await를-이용하여-좀-더-normalize하기"><a href="#번외-Async-Await를-이용하여-좀-더-normalize하기" class="headerlink" title="번외 - Async/Await를 이용하여 좀 더 normalize하기"></a>번외 - Async/Await를 이용하여 좀 더 normalize하기</h4><p>한편, Generator는 caller와 callee가 명확하게 구분되어 있어 동기적 프로그래밍을 하기위해서 위의 runner를 만들어 줬는데, 이는 ES6의 Async/Await를 사용하여 우리가 궁극적으로 추구하던 방향과 비슷하게 코딩을 할 수 있다.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 비동기 처리 */</span> <span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadMainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">getSessionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">getPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">getFavoritePostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">getMontlyPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">loadMainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Javascript ES6부터 Async/Await 구문을 지원하게 되었다. 문법을 사용하여 async function, 즉 일종의 코루틴 함수로 만든다.<br><code>loadMainPage()</code>을 호출하면 순차적으로 <code>getSessionCheck()</code>, <code>getPostList()</code>, <code>getFavoritePostList()</code>, <code>getMontlyPostList()</code>를 호출한다.</p><h2 id="Finish"><a href="#Finish" class="headerlink" title="Finish"></a>Finish</h2><p>흔히 쓰고 있었지만 정의를 내리기 힘들었던 Generator를 사석에서 누군가에게 설명할 줄 알게 되었다. 또한 사용방법과 어떤 상황에서 쓰이는지, 더 좋은 대안은 무엇이 있는지도 알아보면서 과거에 이런 정의를 내리던 프로그래머들이 대단하다는 생각이 들었다.</p><p>공부를 하면서 다양한 개념을 알게 되었다. <code>Cooperative</code>, <code>Coroutine</code>, <code>Continuation</code>, <code>Concurrency</code>, <code>parallelism</code>과 같은 용어들의 정의를 쭉쭉 살펴보고 파봐야겠다. 이런 용어들의 개념을 정확히 알고 사용한다면 커뮤니케이션과 검색 키워드 그리고 개발에 많은 도움이 되지 않을까 생각한다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)" target="_blank" rel="noopener">Generator (computer_programming) - wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="noopener">Coroutine - wikipedia</a></li><li><a href="https://stackoverflow.com/questions/1022564/what-is-the-difference-between-an-iterator-and-a-generator" target="_blank" rel="noopener">what is the difference between an iterator and a generator - stack overflow</a></li><li><a href="https://en.wikipedia.org/wiki/Cooperative_multitasking" target="_blank" rel="noopener">Cooperative multitasking - wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Continuation" target="_blank" rel="noopener">Continuation - wikipedia</a></li><li><a href="https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5" target="_blank" rel="noopener">Understanding Generators in ES6 JavaScript with Examples</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="noopener">Iteration Protocol</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;얼마 전, Generator가 무엇인가요? 라는 질문을 들었을 때 대답을 명확히 하지 못했다. 많이 쓰고 있지만 실제로 사용법 혹은 대략적인 개념밖에 설명을 못해서 이 개회에 정확히 알아야겠다는 생각이 들어 Generator의 개념과 사용방법에 
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="JavaScript" scheme="https://vallista.kr/tags/JavaScript/"/>
    
      <category term="Generator" scheme="https://vallista.kr/tags/Generator/"/>
    
      <category term="Base Skill" scheme="https://vallista.kr/tags/Base-Skill/"/>
    
  </entry>
  
  <entry>
    <title>2019년 상반기 회고</title>
    <link href="https://vallista.kr/2019/07/10/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/"/>
    <id>https://vallista.kr/2019/07/10/2019년-상반기-회고/</id>
    <published>2019-07-10T08:20:29.000Z</published>
    <updated>2020-06-04T05:27:52.868Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1421809313281-48f03fa45e9f?auto=format&fit=crop&w=2205&q=80" alt="이미지1"></p><p><a href="https://vallista.kr/2019/01/05/2018%EB%85%84-%ED%9A%8C%EA%B3%A0/">2018년 회고</a>에 이어서, 올해는 상반기 회고를 먼저 작성하게 되었다.<br>올해 상반기는 나의 규칙적인 라이프사이클을 만드는데 집중했고 라이프사이클을 만들면서 점진적으로 다양한 활동을 추가했다.</p><h2 id="1월"><a href="#1월" class="headerlink" title="1월"></a>1월</h2><p>1월은 2018년을 되돌아보면서 회고를 진행했다. 회고를 하면서 2018년을 꽤 바쁘게 지냇음에도 불구하고, 2018년의 목표중 50%밖에 달성하지 못했다는 사실에 적잖이 충격이었다. 회고를 하면서 부족한 부분을 캐치했고 ‘이를 바꾸기 위해서 어떤 노력을 해야하는가’에 대한 생각을 많이했다. 당장 문제로 보이는 건 규칙적인 라이프사이클을 만들고, 그 라이프사이클안에 자연스럽게 공부와 목표를 배분하는게 중요해보였다.</p><h3 id="라이프사이클-만들기"><a href="#라이프사이클-만들기" class="headerlink" title="라이프사이클 만들기"></a>라이프사이클 만들기</h3><p>라이프사이클을 만드는 일은 생각외로 힘들었다. ‘그 누구도 나를 건들순 없으셈’하며 자유분방하게 살아왔던 지난 24년을 뒤로하고 새로운 삶의 방식을 만드는 의미이기 때문에 많은 인내심을 필요로 했고, 각오가 되어있어야 했다.</p><h4 id="규칙적인-생활"><a href="#규칙적인-생활" class="headerlink" title="규칙적인 생활"></a>규칙적인 생활</h4><p>라이프사이클을 만드는데 가장 중요한 포인트는 <code>규칙적인 생활</code>을 만드는 것이다. <code>규칙적인 생활</code>을 위해 생활내에서 이룰 수 있는 목표 몇 가지를 만들었다.</p><ul><li>아침 6시 기상하기</li><li>저녁 12시 취침하기</li><li>과음하지 않기</li></ul><p>아침 6시부터 저녁 12시까지 내가 깨어있는 시간은 총 18시간이다. 18시간을 배분한 이유는, 작년의 불규칙한 생활을 참고했을때 하루 평균 14시간 깨어있었다. 그래서 4시간을 늘려서 오전 시간에 공부를 한다면 작년보다 더 좋은 결과물을 낼 거라는 생각을 가지고 시간을 조정했다. 아침 기상시간을 늘리지 않고 저녁 12시로 땡긴 목적은 오전에 늦게 일어나면 하루가 개운하지 못하고, 지각에 쫓겨 오전에 제대로 된 시간을 보낼 수 없기 때문이다. 그래서 최대한 외부의 압박을 줄이고자 했다.</p><h4 id="생활-환경-만들기"><a href="#생활-환경-만들기" class="headerlink" title="생활 환경 만들기"></a>생활 환경 만들기</h4><p><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7796729" target="_blank" rel="noopener">피플웨어</a>에 ‘2부 사무실 환경’ 챕터를 읽어보면 회사내에서의 개발환경에 대한 중요도가 높다는 걸 알 수 있다. 업무 환경이 개발 퍼포먼스에 영향을 주는 것처럼 생활 환경도 규칙적인 생활을 만드는데 많은 도움이 될거라 생각해서 좋은 환경을 조성하려 노력했다.</p><ul><li><p>쉽게 일어날 수 있는 환경 조성<br>일찍 일어나기 위해서 여러가지 강제할 수 있는 장치를 설치했다.</p><ol><li>스마트폰 앱으로 알람을 걸어두기</li><li>알람은 누워있는 상태에서 종료할 수 있으므로 탁상시계를 구매해서 알람걸기.</li><li>탁상시계도 끄고 다시 들어갈 수 있으므로 화장실에 탁상시계 한개 더 두기</li></ol></li><li><p>쉽게 잠들 수 있는 환경 조성<br>12시에 잠이 안올 수도 있다. 그래서 일찍 잘 수 있게 독서를 하는 선택지를 만들었다.</p><ol><li>전자기기를 마주할 수 없도록 침대와 책상의 거리를 매우 멀리 떨어뜨림</li><li>침대 옆에 책장 배치</li><li>10시 ~ 12시 사이드 프로젝트 및 운동 스케쥴 잡기</li></ol></li><li><p>일어나서 피로가 풀리도록 환경 조성</p><ol><li>6시 기상 후 커피를 먹을 수 있게 네스프레소 머신 구매</li><li>오전에 생각할 시간이 적으므로 미리 옷을 꺼내놓기</li></ol></li></ul><blockquote><p><code>피플웨어</code>는 1987년에 발행되어 현재 한국에 3판까지 개정되어 나왔다.<br>‘소프트웨어의 주요 쟁점은 기술이 아닌 사람에 있다’는 주제를 가지고 진행되는 책이다.<br>협업, 회사, 인재 등의 저자들의 많은 고민이 잘 들어가 있는 훌륭한 책이므로 시간이 되면 꼭 읽어보는 걸 추천한다.</p></blockquote><p>처음부터 많은 조건을 만들어 지치면 안됐기 때문에 간단한 규칙부터 만들어서 시작했다. 1월 한 달간 생활 환경을 조성하고 규칙적인 생활을 진행했다. 처음에 진행하면서 정말 힘들었는데 3주정도 가까이 진행해보니 어느정도 할만했고 몸에 점점 익어가는 것이 느껴졌다. 제일 난이도가 높은 일은 <code>오전 6시 기상</code> 이다. 본인은 아침에 매우 약한데, 그걸 극복하는 일도 함께 했다.</p><h2 id="2월"><a href="#2월" class="headerlink" title="2월"></a>2월</h2><p>1월동안 라이프사이클에 어느정도 익숙해져 라이프사이클에 몇 가지 feature를 넣을 여유가 생겼다. 그래서 지난 2018년 회고를 회고하면서 필요한 부분을 라이프사이클에 추가할 수 있는게 있을까 고민했다.</p><h3 id="회고의-회고"><a href="#회고의-회고" class="headerlink" title="회고의 회고"></a>회고의 회고</h3><p>지난 2018년을 회고하면서 어려웠던 점은 <code>내가 1월에는 뭘했지..?</code>와 같은 기억을 되짚는 일이었다. 그래서 내년에도 똑같은 실수를 반복하지 않기위해 어딘가에 글을 남기는게 필요했다. 마침 <a href="https://www.notion.so/" target="_blank" rel="noopener">Notion</a>이라는 툴이 한국에서 Evernote를 추월하여 삽시간에 개발자와 IT 직업들에게 퍼져나갔다. 안그래도 기록을 작성할 앱이 필요하던 차에 <a href="https://www.notion.so/" target="_blank" rel="noopener">Notion</a>을 사용하기로 했다.</p><h3 id="Notion-활용하기"><a href="#Notion-활용하기" class="headerlink" title="Notion 활용하기"></a>Notion 활용하기</h3><p>일기를 작성하면서 점점 늘어가는 일기장을 관리할 수 있었으면 했고, 동일한 포맷을 매일 노가다하여 배치하는 작업이 매우 불필요한 과정이라 개선했으면 했다. 그래서 이를 개선하기 위해서 노션을 삽질하기 시작했고, 삽질의 결과로 월, 주, 일 단위의 회고와 일기, 집중을 얼마나 했는지를 작성하는 포맷을 작성했다.</p><p><a href="https://www.notion.so/gwangwhi/Report-Rules-bb1df7449a3e489985fa45a3bceb7242" target="_blank" rel="noopener">제작한 노션 포맷</a></p><p><img src="/images/2019_01_notion.png" alt="이미지1"></p><p>작성한 노션 포맷을 사람들과 공유했고, 꽤나 괜찮은 반응을 얻었다. 지금도 이 포멧을 사용하여 할 일을 배분하고, 일기를 작성하고 있다.</p><h3 id="함께자라기-독서"><a href="#함께자라기-독서" class="headerlink" title="함께자라기 독서"></a>함께자라기 독서</h3><p>김창준님의 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14341885" target="_blank" rel="noopener">함께자라기</a>를 2월 한달동안 읽었다. 이 책은 제목처럼 ‘함께’, ‘자라기’ 두 가지에 대해 초점이 맞추어져 있다. 책을 읽으면서 생각도 못했던 <code>자라는 방향</code>에 대해서 고민하는 시간이 되었다. 익숙한 일과, 어려운 일의 사이를 잘 걸치면서 작업하면 성장이 매우 훌륭하게 될 수 있다는 파트가 가장 와닿았다. 내가 지난 6년간 개발을 하면서 익숙한 코딩만 하진 않는지, 발전을 위해 코딩 방법을 새롭게 도입을 해보진 않았는지 다시금 생각하게 되었다. 그래서 몇 가지 지금 할 수 있는 새롭게 도전해보기로 한 게 몇 가지 있다.</p><ul><li>WebStorm에서 Visual Studio Code로 환경 변경</li><li>함수형으로 적극 코딩하기</li><li>웹 서핑보다 먼저 코딩하고 찾기</li></ul><p>이 세 가지 규칙을 갖고 <code>의도적 수련</code> 을 3월부터 진행해보기로 했다. 이 뿐만 아니라 여러 방면에서 생각을 하게된 게 많다. 그래서 나중에 따로 독후감을 작성할 예정이다.</p><h3 id="하드웨어-스터디-진행"><a href="#하드웨어-스터디-진행" class="headerlink" title="하드웨어 스터디 진행"></a>하드웨어 스터디 진행</h3><p>화요일 목요일마다 오전 9시부터 10시까지 한 시간씩 하드웨어 스터디를 진행했다. 하드웨어 스터디를 하면서 어셈블리와 하드웨어 구조에 대해서 알게 되었다. 우리가 흔히 쓰는 C++같은 언어들이 어셈블리로 컴파일되어 어떻게 동작하는지, 내부적으로는 어떤 패러다임으로 돌아가고 있으며 상태관리는 어떻게하는지, 컴퓨터 하드웨어가 어떻게 동작하는지와 같은 기본 지식을 공부하게 되었다.</p><p>특히, 어셈블리어 공부의 경우 코드를 짜면서 컴퓨터가 어떻게 동작을 시킬까를 생각하면서 작성하게 되었다. 예전에 비해 버그와 코드 가독성이 향상되었음을 느낀다. </p><blockquote><p>하드웨어 스터디는 ARM Cortex m4와 어셈블리를 이용해서 진행했다.</p></blockquote><h2 id="3월"><a href="#3월" class="headerlink" title="3월"></a>3월</h2><p>지난 두 달간 라이프사이클을 만들면서 어느정도 익숙해졌다. 라이프사이클에 일기 작성을 추가한지 약 한달동안 서른개 남짓한 일기를 작성했고 그러면서 설명하는 능력이 향상되고 있는걸 느낀다. 또한 스몰토크를 할 수 있는 컨텐츠도 많아졌는데, 이는 매일 매일 일기를 쓰므로 장기기억으로 남기 때문이라 생각한다. 3월에는 이런 라이프사이클을 바탕으로 실제로 공부를 진행해보려한다.</p><h3 id="타입스크립트-공부"><a href="#타입스크립트-공부" class="headerlink" title="타입스크립트 공부"></a>타입스크립트 공부</h3><p>웹 시장에서 압도적으로 많이 쓰이는 언어는 JavaScript이다. JavaScript의 여러가지 문제점은 자유롭기 때문에 불변성을 보장할 수 없는 점이 문제로 꼽혀왔다. 대표적인 예시를 몇 가지 들어보자면, 바쁜 일정 사이에서 협업을 진행하면 코드 리딩을 할 수 있는 시간이 줄어든다. 그러면서 개발자는 바삐 개발을 해야하기 때문에 코드를 정신없이 작성하게 된다. A 개발자가 foo라는 객체의 데이터를 string으로 바꿨는데, 이게 string인지, number인지 보장할 수가 없다는 말이다. 협업할 때 문제가 된다. 그래서 타입스크립트는 빠르게 웹 시장의 표준으로 자리를 잡아가고 있는 중이고, 많은 회사들이 타입스크립트를 도입하고 있다.</p><p>이러한 이유로 타입스크립트를 공부해야겠다는 판단이 들어서 타입스크립트 공부를 시작했다. 오전 시간을 주로 활용해서 공부를 했고, 3월 한달간 회사 내에서 타입스크립트 스터디를 만들어서 운영했다. 스터디를 운영하면서 타입스크립트에 빠르게 익숙해지기 위해 <a href="https://github.com/gothinkster/realworld" target="_blank" rel="noopener">Realworld</a>를 포크떠서 <a href="https://github.com/Vallista/realworld-vue-typescript" target="_blank" rel="noopener">Vue + TypeScript</a>를 진행했다. Realworld에 공식으로 올려달라고 했으나, README.md 수정 및 travis ci 붙여야 올려줄 수 있다고 하여 일단 보류해놓았다. (..)</p><h3 id="퇴근길-와인-수업"><a href="#퇴근길-와인-수업" class="headerlink" title="퇴근길 와인 수업"></a>퇴근길 와인 수업</h3><p><img src="/images/2019_02_wine.jpg" alt="이미지2"></p><p>지금 재직하고 있는 <a href="https://www.winepoint.co.kr" target="_blank" rel="noopener">와인포인트</a>는 앱 내에서 큐레이팅을 통해 고객이 와인을 추천받고 와인을 주문한 고객이 요청한 이마트24 점포로 배달해주는 서비스이다. 하지만 우리 회사는 와인을 전문적으로 알고있는 기획자가 없기 때문에 우리가 공부해서 데이터베이스 스키마를 제작하고, 앱과 웹을 기획해야했다. 그렇기 때문에 도메인 지식은 매우 중요하다. 회사 초반에는 소믈리에님이 회사내에 있어서 교육을 받았다. 하지만 와인의 세계는 방대했고 초기 교육으로는 부족하다고 느껴 <code>퇴근길 와인 수업</code>을 참가하게 되었다. 회사에 계시던 소믈리에님이 회사를 퇴직하고 사업을 하시면서 사이드로 진행하는 프로젝트인데, 와인을 테이스팅 하면서 평가하고, 품종, 국가등을 공부하는 수업이다. 퇴근길 와인 수업은 6개월간 진행되는데, 6개월 후에 내가 얼마나 성장해 있을지 기대된다.</p><h3 id="관리자-페이지-리펙토링"><a href="#관리자-페이지-리펙토링" class="headerlink" title="관리자 페이지 리펙토링"></a>관리자 페이지 리펙토링</h3><p>회사 관리자 페이지를 리팩토링했다. 일관되지 않은 구조를 Container, Presentational 형태로 일차로 나누었고, Module들에 의존된 형태를 제거했다. 이 작업을 하는데 한달 꼬박 걸렸고, 야근을 자주 했다.</p><ul><li>모바일 지원</li><li>Container, Presentational 형태로 변경 (<a href="https://kentcdodds.com/blog/prop-drilling/" target="_blank" rel="noopener">Props Drilling</a> 형태의 코드로 변경)</li><li>API 중복로직 개선</li><li>JWT 적용</li></ul><p>총 코드 줄 수를 2/3으로 줄였다. 가독성이 좋아졌고 만족스러운 구조로 잡혀서 맘에든다. 특히나 Container, Presentational로 변경하고나서 디자인 변경 속도가 1.5배는 빨라짐을 느낀다. 이는 Presentational에서만 디자인을 변경해도 되니, 폴더 선택의 영역이 줄어들었기 때문으로 보인다.</p><h3 id="피플웨어-독서"><a href="#피플웨어-독서" class="headerlink" title="피플웨어 독서"></a>피플웨어 독서</h3><p>위에서 언급했던 피플웨어를 4월 한달동안 완독했다. 피플웨어를 주요로 관통하는 주제는 소프트웨어는 ‘기술’보다 ‘사람’이 중요하다는 것이다. 이는 나도 동의한다. 기술은 언제나 변할 수 있으나, 사람은 그 기술에 언제든 익숙해질 수 있다. 가장 기억에 남는 이야기가 있다. ‘어떤 팀은 개발자들이 집중할 시간을 갖기위해, 집중하는 중이면 자신의 책상에 빨간색 천을 걸어두었다’ 이 문장을 보고 협업을 아름답게 풀어나갈 수 있구나 하는 생각이 들었다.</p><h2 id="4월"><a href="#4월" class="headerlink" title="4월"></a>4월</h2><p>본격적으로 이직을 하기위해서 움직이기 시작했다.</p><h3 id="이력서-작성"><a href="#이력서-작성" class="headerlink" title="이력서 작성"></a>이력서 작성</h3><p><a href="https://vallista.kr/resume">나의 이력서</a></p><p>이력서 작성을 할 때 필수적인 규칙을 몇 가지 정했다.</p><ul><li>웹으로 개발해서 퍼블리싱한다.</li><li>한 눈에 내 기술 스택을 확인할 수 있어야 한다.</li><li>디자인은 심플하게, 최대한 타이포그래피를 활용</li></ul><p>규칙을 정했으니, 이력서 흐름을 생각하여 목차를 작성했다.</p><ol><li>첫 인사</li><li>관심사</li><li>기술 스택</li><li>경력</li><li>대외활동</li><li>강연</li><li>수상</li></ol><p>내가 면접관이 되었다고 가정하고 구상했다. 구상해보니 경력을 보고, 기술 스택을 유추하는 행위는 매우 비효율적이라고 생각했다. 그래서 관심사와 기술 스택을 먼저 서술하여 인지한 상태에서 경력을 읽는게 효과적이라 판단하여 배치를 <code>관심사 - 기술 스택 - 경력</code>으로 진행했다.</p><p>그 외에 대외 활동, 강연, 수상은 관심사와 경력을 뒷받침 해줄 수 있다고 생각했기 때문에 뒷 부분에 추가했다.</p><p>기술을 서술할 때의 순서는 웹 프론트엔드 개발자 기준으로 작성했다. </p><ol><li>HTML/CSS</li><li>JavaScript</li><li>SPA Framework (vue, react)</li><li>Server</li><li>DevOps (Web을 Deploy 하기 위함)</li><li>그 외 (git 등..)</li></ol><p>‘프론트엔드 개발자가 원하는 기술이 무엇일까’를 곰곰이 고민해봤다. 개발자를 뽑을 때 React, Vue와 같은 Web Framework를 다루는 능력도 중요하지만, 다양한 상황에 대해 대응하기 위해서 기본 지식이 중요하다고 생각했다. 또한 여러 기업들이 React와 Vue 같은 Web Framework를 많이 사용하고 있지만 그럼에도 불구하고 jQuery나 Vanilla JavaScript 같은 코드는 많이 존재하고 지금도 코딩이 되고 있다. 그래서 HTML/CSS, JavaScript와 같은 기본기를 앞에 배치했다. </p><p>기본기 다음으로 SPA Framework를 배치했다. 읽으면서 ‘튼튼한 기본기로 SPA Framework들을 다룰 줄 안다!’으로 자연스럽게 읽혀지길 바라는 생각이었다. 하지만 생각보다 강조가 많이 되지 않은 것 같다. 모노한 전개여서 그런지, 다음 이력서를 제작할 때 핵심 기술을 강조하는 부분을 추가해야 하겠다는 생각이 들었다.</p><p>최근, Front-end 개발자는 Server 지식도 충분히 갖고 있어야 된다고 생각한다. 하나의 웹 서비스를 구성하는 요소 가운데 서버는 당연히 빠질 수 없는 요소이며, 이는 SEO, SSR와 같은 유저가 웹을 마주하게 되는 시작점에 대한 중요한 개발을 포함하는 영역이다. 또, 완벽한 서버 구현은 힘들겠지만 프로토타입용으로 웹을 만들 때 잠시 사용되는 역할의 조그마한 서버는 만들 수 있어야한다. 이러한 필요성에 따라, ‘앞에서 웹 개발을 잘할 수 있다’에서 ‘웹 개발 후 웹 배포 및 서버 개발도 할 수 있다’로 좀 더 다듬어 주는 흐름을 구성했다.</p><p>DevOps를 구축하면 귀찮은 일을 자동화하여 개발 속도를 향상 시키는데 큰 도움을 준다. 특히나 웹 배포 시나리오는 반복적인 작업을 하는 일종의 노동이다. 자동화를 하지 않으면, AWS console 접속 → ip 확인 → ip에 해당하는 서버 접속 → 서버에서 git fetch → git checkout upstream → pm2 restart 와 같은 반복적인 작업을 하게 된다. 이러한 작업을 크게 덜어주면 작업 효율이 많이 상승하므로 이러한 작업을 할 줄 아는 웹 개발자인 것을 마지막으로 어필했다.</p><p>경력은 최근 경력부터 정렬을 했다. 글만 있으니 읽는 사람이 집중하기 힘들다는 생각이 들어 프로젝트마다 Preview를 배치했다. 프로젝트마다 기간, 짧은 설명, 기술 스택, 핵심 작업을 명세했다. 특히 작업에 해당하는 영역은 어떤 효과를 얻었는지 기술을 적용한 이유와 그 기술을 통해 회사의 프로젝트가 어떤 긍정적 영향을 얻었는지 상세하게 적었다. 개발자가 기술을 선택하는 궁극적인 목표는 ‘협업을 위해’, ‘편한 개발을 위해’ 와 같은 팀 시너지를 올려서 회사의 사업이 훌륭하게 돌아가도록 하는 것이니까.</p><h3 id="면접-준비"><a href="#면접-준비" class="headerlink" title="면접 준비"></a>면접 준비</h3><p>기술 면접을 준비하기 위해서 노션에 질문을 정리했다.</p><p>기술 면접 준비는 회사에 서류와 코드 테스트에 합격하고 나서 준비하지 않았다. 그 이유는 코드 테스트를 합격하고 기술 면접을 보는 시간이 매우 짧을 걸 예상하고 있었고, 웹 개발자로 전향하고 어느정도 시간이 흐르지 않아서 기본적인 웹 개발 질문을 할거라 생각했다. 그렇기에 많은 시간이 필요하다 느껴, 두 달 전부터 시작했다.</p><p><a href="https://www.notion.so/gwangwhi/570cddfd04b64956b52efe8351e4020e" target="_blank" rel="noopener">노션 면접 준비 링크</a></p><h3 id="완벽한-공부법-독서"><a href="#완벽한-공부법-독서" class="headerlink" title="완벽한 공부법 독서"></a>완벽한 공부법 독서</h3><p><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=11433426" target="_blank" rel="noopener">완벽한 공부법</a>을 독서하기 시작했다. 온라인 상에서 유명하기도 했고, 목차를 읽어봤는데 좋은 글들이 많았기 때문이다. 이 책은 목표를 정하는 방법, 외국어 공부하는 방법, 독서를 왜 하는가? 독서를 하는 방법과 같은 실생활에서 공부에 도움을 주는 책이다. 읽으면서 많은 동기부여가 되었는데, 그 이유는 허위정보가 아닌 논문을 정리하여 팩폭을 갈궛기 때문이라 추측한다. (…)</p><h3 id="회사-프론트-웹-기술-스택-확정"><a href="#회사-프론트-웹-기술-스택-확정" class="headerlink" title="회사 프론트 웹 기술 스택 확정"></a>회사 프론트 웹 기술 스택 확정</h3><p>회사의 프론트 웹페이지 기술 스택을 올해 초부터 정하고 있었다. 그래서 길게 보면서 스택을 정리하고 있었는데 4월에 스택을 확정했다. <a href="https://www.notion.so/gwangwhi/Front-end-649cb9ad2e8f4d7fb3cb69ddc0a28b58" target="_blank" rel="noopener">와인포인트 프론트앤드</a>를 클릭해서 우리가 어떤 기술을 적용했고, 기술을 적용한 이유를 볼 수 있다.</p><h3 id="회사-지원-및-서류-작성-그리고-면접"><a href="#회사-지원-및-서류-작성-그리고-면접" class="headerlink" title="회사 지원 및 서류 작성, 그리고 면접"></a>회사 지원 및 서류 작성, 그리고 면접</h3><p>세 곳의 회사를 지원하여 서류를 작성했고 코딩테스트 그리고 면접을 봤다. 대다수의 회사가 코딩테스트 48시간 과제를 줘서 동시에 세 군대에 지원한 나는 그 스케쥴을 다 견뎌야 했고 힘든 시간이었다. 하지만 코딩테스트에 새로운 기술도 적용해보고 약간 실험형식으로 써서 재미도 있었다.</p><p><a href="https://vallista.kr/2019/07/03/%EC%9D%B4%EC%A7%81%EC%9D%84-%EC%A4%80%EB%B9%84%ED%95%98%EB%A9%B4%EC%84%9C/">이직을 준비하면서</a> 이 링크에서 더 자세히 읽을 수 있다.</p><h2 id="5월"><a href="#5월" class="headerlink" title="5월"></a>5월</h2><p>5월은 다시 이직을 하기위해 준비하는 시간이었다. 도중에 헤커톤과 같은 다양한 행사에 나갔다. 라이프사이클을 꾸준히 지키고 있어서 나의 끈기가 대단하다는 생각이 들었다.</p><h3 id="알고리즘-잡스"><a href="#알고리즘-잡스" class="headerlink" title="알고리즘 잡스"></a>알고리즘 잡스</h3><p>면접을 볼 때 라이브코딩을 항상 망쳐서 내가 알고리즘이 문제인가? 하고 5월 한달동안 알고리즘 잡스를 수강했다. 하지만 알고리즘 잡스를 수강하면서 내가 알고리즘이 필요하다는 생각이 들지 않았고 (상당히 높은 레벨의 문제를 쉽게 풀었음) 그래서 5월 말에 수강을 종료했다. 만약 알고리즘이 부족하다 하시는 분이 계신다면, 알고리즘 잡스를 추천한다. 빡세게 알고리즘만 하루에 4시간씩 코딩할 수 있다. 그리고 원하는 회사의 알고리즘 난이도까지 파악하고 있어서 스케쥴링까지 잡아주니 괜찮은 서비스인 것 같다. 그 것과 별개로 웹 프로그램으로 알고리즘을 푸는데, 본인은 불편해서 XCode에서 코딩해서 붙여넣기를 했다. 웹 프로그램이 조금 아쉬웠다.</p><h3 id="스포카-해커톤-‘무쓸모톤’-참가"><a href="#스포카-해커톤-‘무쓸모톤’-참가" class="headerlink" title="스포카 해커톤 ‘무쓸모톤’ 참가"></a>스포카 해커톤 ‘무쓸모톤’ 참가</h3><p><img src="https://spoqa.github.io/images/2019-05-29/8.png" alt="이미지3"></p><p>스포카 해커톤 ‘무쓸모톤’을 지원했다. 무쓸모톤은 세상에서 제일 쓸모없는 앱을 만드는 헤커톤이라는 의미인데, 너무 신박해서 지원을 할 수 밖에 없었다. 운이 좋았던 게 우연히 Festa를 살펴보다가 (여태까지 안보다가) 봤는데 딱 있어서 지원했다. 지원자가 많으면 짤릴수도 있다고 했는데, 다행히도 참가자 안에 들어서 개발을 할 수 있게 되었다. 본인은 8팀으로 배정을 받아 4명의 팀원들과 함께 개발을 시작하게 되었다. 초기에 아이디어를 5번정도 바꿨다. 왜 그러냐면 세상에서 정말 쓸모없어야 했기 때문이다. 더군다나 흔할 수도 있기 때문에 신중히 선택을 했다. 계속 선택을 못하고 있다가, 마지막에 의견이 나온 ‘세상에서 가장 쓸모없는 TO-DO List’를 팀원 모두 만족해했기 때문에 이걸로 정하게 되었다.</p><p>팀원중에 웹, 앱과 같은 프론트를 나 혼자밖에 하지 못해서 해커톤 내내 코딩에 매진했고, 화장실 가는 시간 외에는 코딩에만 몰입했다. 결과적으로는 7페이지 되는 분량의 기능을 전부 완성했다. 솔직히 하루만에 이렇게 만드는 사람은 많지 않다고 생각한다. (정말 힘들었다)</p><p>코드는 여기서 확인할 수 있다.<br><a href="https://github.com/Vallista/spoqa-hackathon-team-08" target="_blank" rel="noopener">스포카 해커톤 팀 08</a></p><p>기술 스택으로는 Vue.js를 사용했다. 왜냐하면 Vue.js는 모듈을 선택하는데 있어서 생각할 필요가 많이 없고 (모두 공식 커뮤니티에서 관리하기 때문에) 개발이 매우 빠르다는 장점이 있다. 그리고 몇몇 페이지는 부분적으로 <a href="https://svelte.dev/" target="_blank" rel="noopener">svelte</a>를 사용했는데, Vue.js를 쓰는데 굳이 이 친구를 쓸 일은 많이 없어보였다. html 안에서 순서와 상관없이 자유롭게 웹 코딩을 진행할 수 있고, No Virtual DOM이라는 특징이 있는데 성능 테스트를 나중에 해보고 싶다.</p><p>하룻밤동안 빡세게 작업을 하고, 최종 뽑는 과정에서 1등의 영예를 짊어질 수 있었다. 우리 프로젝트가 완성도가 제일 좋아서 뽑혔다고 다른 팀원 분들이 말씀하셨다. 보람찬 하루였다.</p><h3 id="그들은-알고리즘을-알았을까-독서"><a href="#그들은-알고리즘을-알았을까-독서" class="headerlink" title="그들은 알고리즘을 알았을까? 독서"></a>그들은 알고리즘을 알았을까? 독서</h3><p>컴퓨터의 내부 연산과 알고리즘, 자료구조를 쉽게 정리한 책이 있다고하여 구매해서 읽었다. 하지만 기대와 다르게 책의 퀄리티가 별로였다. 이 책은 기본적으로 서양 이솝우화와 셜록홈즈와 같은 저명한 소설을 읽어본 경험이 있어야 수월하게 읽힐 수 있고, 비유를 드는데 살짝 억지비유의 느낌이 있다. 또한, 결정적으로 번역을 너무 어렵게 해놓아서 이해하기가 쉽지않다. 알 수 없는 단어 선택으로 첫 장부터 모호해질 수 있다.</p><h3 id="AWS-Docker-In-Docker-Jenkins-ELB를-이용해서-블루-그린-배포-자동화"><a href="#AWS-Docker-In-Docker-Jenkins-ELB를-이용해서-블루-그린-배포-자동화" class="headerlink" title="AWS + Docker In Docker + Jenkins + ELB를 이용해서 블루 그린 배포 자동화"></a>AWS + Docker In Docker + Jenkins + ELB를 이용해서 블루 그린 배포 자동화</h3><p>배포를 할 때 노가다를 하는게 싫어서 자동화를 하고자 DinD + Jenkins로 배포 자동화를 공부했다.</p><p><a href="https://vallista.kr/2019/06/12/Docker-In-Docker-DIND-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/">Docker In Docker</a><br><a href="https://vallista.kr/2019/05/14/Jenkins/">Jenkins</a></p><p>한달 내내 이 자동화로 사이드 시간을 잡아먹혔는데 시간을 많이 소모한 걸 몇 가지 꼽아보자면</p><ul><li>Docker In Docker 삽질</li><li>AWS의 많은 기능에 익숙하지 않음 (IAM)</li><li>Jenkins 설정 삽질</li></ul><p>이 중에서도 Jenkins 설정 삽질이 제일 많이 걸렸는데 <code>Jenkins stable</code> 버전에 대해 <code>Docker Cloud</code>에서 지원하지 않아서 업데이트하는 과정에서 삽질한 게 크다. (부들부들..)</p><h2 id="6월"><a href="#6월" class="headerlink" title="6월"></a>6월</h2><p>지난 5개월간 회고를 하면서 문득 작년 하고자 했던 목표가 기억이 났다. 그 중에 지금 이뤄지지 못한게 있나 확인을 해봤는데 사이드 프로젝트를 전혀 진행하고 있지 않았고 그나마 진행하는 것들은 사이드로 공부정도의 규모밖에 되지 않았다. 그래서 이번 6월은 사이드 프로젝트를 준비하는 달로 지정하고 작업에 착수했다.</p><h3 id="샬롱-Salon-공유-블로그-프로젝트"><a href="#샬롱-Salon-공유-블로그-프로젝트" class="headerlink" title="샬롱(Salon) 공유 블로그 프로젝트"></a><strong>샬롱(Salon)</strong> 공유 블로그 프로젝트</h3><p>사건의 발단은 올해 초, 무언가 의미있는 일을 찾고있다가 문득 아이디어가 떠올랐다.</p><p><img src="/images/2019_03_screenshot.png" alt="이미지4"></p><p>모교의 후배들이랑 함께있는 톡방이 있는데, 톡방에 있는 각양각색의 친구들이 돌아가면서 한명씩만 글을써도 재미있는 글이 나올 것 같았다. 머신러닝, 딥러닝 연구실에 있는 친구, 대학교에서 복수전공 하고 있는 친구, 스타트업에서 유심칩 개발하고 있는 친구, 의료장비 업체에서 일하고 있는 친구등 다양한 친구들이 존재했기 때문에 이런 서비스를 개발하려는 의욕이 샘솟았고, 그 톡방의 개발하는 친구들 몇명을 모아서 프로젝트를 시작했다.</p><p><a href="https://github.com/elegance-social-club" target="_blank" rel="noopener">엘레강스 사교클럽</a>이라는 이름으로 깃헙에 그룹을 만들었다. ‘사람들이 생각해내지 못한 이상한 것을 만드는 그룹’이라는 의미로 이름을 지었고, 첫 프로젝트는 위에서 말한 공유 블로그 프로젝트로 시작하기로 했다. 여담이지만, 다음 프로젝트는 웹에서 동작하는 미연시 프로젝트를 만들기로 했다.</p><p>프로젝트 이름은 엘레강스 사교클럽이니, 귀족들의 모임을 착안하여 <code>샬롱</code> 이라고 지었다.</p><h4 id="기술스택"><a href="#기술스택" class="headerlink" title="기술스택"></a>기술스택</h4><p>샬롱 프로젝트는 기본적으로 웹 기반으로 돌아가기 때문에, 웹 시장에 조금 더 오래있었던 내가 프로젝트를 리드하는 그림으로 진행되었다.</p><ul><li>React.js</li><li>Redux</li><li>Redux Saga</li><li>Express.js</li><li>knex.js</li><li>PostgreSQL</li><li>AWS EC2, S3, CodeDeploy, RDS, Route53, AWS Certificate Manager</li><li>Travis CI</li><li>Gabia</li><li>Docker</li><li>Git</li><li>Github</li><li>Git Flow</li></ul><p>프론트앤드와 백앤드 모두 github master branch에 push하면 자동으로 블루 그린 배포가 진행되어 새로운 빌드가 실행되는 설계를 작성했다.</p><h4 id="배포-프로세스"><a href="#배포-프로세스" class="headerlink" title="배포 프로세스"></a>배포 프로세스</h4><ol><li>github master branch push</li><li>Webhook으로 travis CI 감지</li><li>test, build</li><li>빌드 파일 압축</li><li>빌드파일 s3에 업로드</li><li>s3에 업로드 된 파일을 Code Deploy에서 실행</li><li>EC2내의 프로젝트 경로 찾아서 프로젝트 파일 갱신</li><li>Docker Compose로 현재 instance가 3000포트로 띄워져있는지 체크하여 있으면 4000 포트 Docker Container 생성, 없으면 3000 포트 컨테이너 생성, 몇초 후 이전 띄워져있던 컨테이너 삭제</li></ol><p>이 순서대로 작업을 하니, 서버 들어가서 일일히 재배포 하는 과정을 하지 않게되어 작업 능률이 상승했다. 빌드 되는 시간동안 다른 작업을 더 할수 있다는 장점이 존재했다.</p><h3 id="글또-3기"><a href="#글또-3기" class="headerlink" title="글또 3기"></a>글또 3기</h3><p><a href="https://www.facebook.com/groups/375431516259701/" target="_blank" rel="noopener">글또</a>모임은 올해 초부터 관심있게 봐왔다. 글쓰는 걸 좋아하는 나로써는 굉장히 천국같은 모임이었고, 최근 옅어진 열정을 다시금 타오르게 시킬 수 있는 계기가 될 수 있을거라 생각했다. 그래서 이번 3기에 지원을 하게 되었고, 운이 좋게도 많은 분들이 지원했지만 그 중에서 선정이 되어 3기에 참여하게 되었다.</p><h4 id="각오"><a href="#각오" class="headerlink" title="각오"></a>각오</h4><p>글또 3기를 하면서 열정을 다시금 불타오르게 하는 계기가 될 수 있으면 한다. 과거 병특을 할 때 블로그 글을 일주일에 한 개씩은 썻었던 것 같다. 그때는 지금봐도 글의 퀄리티가 별로 좋지 못한데, 이번에 글또를 진행하면서 매일 조금씩 작성해서 2주마다 나오는 글의 퀄리티를 누가봐도 좋은 글이라고 생각할 수 있게 작성하고싶다.</p><p>올해 초부터 지금까지 라이프사이클을 만들어왔다. 그러면서 글또 3기에서 참가하게 되었는데 이 기회에 라이프사이클에 글을 작성하는 루틴을 추가하는게 목표이고, 내 각오이다. 이건 내 라이플사이클을 바꾸는 일이니까. 거대한 일이다. 꼭 이뤄보이고 싶다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1421809313281-48f03fa45e9f?auto=format&amp;fit=crop&amp;w=2205&amp;q=80&quot; alt=&quot;이미지1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="Review" scheme="https://vallista.kr/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>이직을 준비하면서</title>
    <link href="https://vallista.kr/2019/07/03/%EC%9D%B4%EC%A7%81%EC%9D%84-%EC%A4%80%EB%B9%84%ED%95%98%EB%A9%B4%EC%84%9C/"/>
    <id>https://vallista.kr/2019/07/03/이직을-준비하면서/</id>
    <published>2019-07-03T01:39:05.000Z</published>
    <updated>2020-06-04T05:27:53.050Z</updated>
    
    <content type="html"><![CDATA[<p>내가 6년차 직장인에 접어 들었을 무렵, 다니는 회사를 나와 이직을 결심하게 되었다. 물론 이 회사를 오래 다닌 건 아니지만, 직장 생활이 길어지면서 내가 어떤 회사를 좋아하고 선호하는지 점점 알게 되었고 지금의 회사도 좋지만, 조금 더 나에게 맞는 회사로 이직하고 싶은 생각이 들었다.</p><p>내가 원하는 건 빡세고 내가 만드는 프로젝트가 어느 세계(오타쿠의 세계, 와인의 세계, 등)에서 유명했으면 했다. 이 세 가지를 충족하는 회사는 많지 않아 찾는데 힘들었고, 우연치 않게 내 기준에 충족하여 타겟으로 잡은 회사는 저명한 회사였다.</p><h2 id="회사-탐색"><a href="#회사-탐색" class="headerlink" title="회사 탐색"></a>회사 탐색</h2><p>회사를 탐색하는 일은 어렵지 않았다. 다양한 경로로 회사들은 항시 개발자를 채용하고 있었고, 나 또한 몇 번의 쉬운 검색으로 회사를 찾을 수 있었다. 내가 활용한 서비스는 아래와 같다.</p><p><strong><a href="https://www.rocketpunch.com/jobs" target="_blank" rel="noopener">로켓펀치</a></strong><br>유명한 사이트 로켓펀치, 다양한 회사(특히 스타트업)가 채용하는 걸 확인할 수 있다.</p><p><strong><a href="https://www.jobplanet.co.kr/welcome/index" target="_blank" rel="noopener">잡플래닛</a></strong><br>회사 면접 질문 및 난이도를 돈 내고 열람할 수 있다. 물론 나도 참고는 했는데 도움이 되진 않았다.</p><p><strong>회사 채용 사이트</strong><br>평소 관심있던 회사 채용 사이트를 방문해서 직접 신청을 넣었다.</p><p>Vue를 사용하는 메이저 회사는 거의 없었으며, 대다수가 React를 선호했다.</p><h2 id="이력서-기획"><a href="#이력서-기획" class="headerlink" title="이력서 기획"></a>이력서 기획</h2><p>이력서를 작성하기 위해 기획을 진행했다. 기획은 크게 ‘어떤 사람이 볼 건지’, ‘어떤 생각을 갖도록 방향성을 정할 건지’ 두 가지를 중심으로 생각했다.</p><p>첫 번째로, ‘어떤 사람이 볼 건지’에 대해서 기획 했을 때 타겟이 두 분류로 되어있었다.</p><ul><li>회사 전체가 보는 이력서를 작성할 건가?</li><li>회사 내의 지원할 직군 팀원이 보는 이력서를 작성할 건가?</li></ul><p>회사 전체가 보는 이력서를 작성하는 건 내가 해당 분야에 대해 뾰족한 점이 없거나, 회사가 소규모일 때 적합하다. 이와 같은 상황은 내가 2년전 게임 업계에서 서비스 업계로 처음 진입할 때 접했다. 하지만 지금은 2년의 시간동안 프론트엔드 쪽에서 일을 해왔고, 공부를 했으니 괜찮은 상황이라고 생각하여 두 번째 안을 고르게 되었다.</p><p>두 번째로, ‘회사 내에 지원할 직군 팀원들이 보는 이력서를 기준’으로, ‘해당 팀원들이 어떤 생각을 갖도록 전개할 건지’에 대한 물음은 이미 정해져 있었다. 내 이력서를 보면서 해당 개발자가 ‘같이 한번 일해보고 싶다’ 혹은 ‘관심이 있다’를 느끼게 하고 싶었고, 조금 더 전문 영역으로 들어가면 ‘사용자 중심으로 생각하는 개발자’, ‘애니메이션을 적극 사용하여 사용자가 피로를 덜 느끼게 하는’과 같은 사용자 중심 흐름을 선호하는 개발자임을 생각하게 하고 싶었다.</p><ul><li>회사 내의 지원할 직군 팀원이 보는 이력서를 작성</li><li>사용자 중심, 애니메이션을 적극 사용하는 프론트엔드 개발자</li><li>한번쯤 같이 일하고 싶은, 열정, 관심이 있는</li></ul><h2 id="이력서-작성"><a href="#이력서-작성" class="headerlink" title="이력서 작성"></a>이력서 작성</h2><p><a href="https://vallista.kr/resume">나의 이력서</a></p><p>이력서 작성을 할 때 필수적인 규칙을 몇 가지 정했다.</p><ul><li>웹으로 개발해서 퍼블리싱한다.</li><li>한 눈에 내 기술 스택을 확인할 수 있어야 한다.</li><li>디자인은 심플하게, 최대한 타이포그래피를 활용</li></ul><p>규칙을 정했으니, 이력서 흐름을 생각하여 목차를 작성했다.</p><ol><li>첫 인사</li><li>관심사</li><li>기술 스택</li><li>경력</li><li>대외활동</li><li>강연</li><li>수상</li></ol><p>내가 면접관이 되었다고 가정하고 구상했다. 구상해보니 경력을 보고, 기술 스택을 유추하는 행위는 매우 비효율적이라고 생각했다. 그래서 관심사와 기술 스택을 먼저 서술하여 인지한 상태에서 경력을 읽는게 효과적이라 판단하여 배치를 <code>관심사 - 기술 스택 - 경력</code>으로 진행했다.</p><p>그 외에 대외 활동, 강연, 수상은 관심사와 경력을 뒷받침 해줄 수 있다고 생각했기 때문에 뒷 부분에 추가했다.</p><h3 id="기술-스택"><a href="#기술-스택" class="headerlink" title="기술 스택"></a>기술 스택</h3><p>기술을 서술할 때의 순서는 웹 프론트엔드 개발자 기준으로 작성했다. </p><ol><li>HTML/CSS</li><li>JavaScript</li><li>SPA Framework (vue, react)</li><li>Server</li><li>DevOps (Web을 Deploy 하기 위함)</li><li>그 외 (git 등..)</li></ol><p>‘프론트엔드 개발자가 원하는 기술이 무엇일까’를 곰곰이 고민해봤다. 개발자를 뽑을 때 React, Vue와 같은 Web Framework를 다루는 능력도 중요하지만, 다양한 상황에 대해 대응하기 위해서 기본 지식이 중요하다고 생각했다. 또한 여러 기업들이 React와 Vue 같은 Web Framework를 많이 사용하고 있지만 그럼에도 불구하고 jQuery나 Vanilla JavaScript 같은 코드는 많이 존재하고 지금도 코딩이 되고 있다. 그래서 HTML/CSS, JavaScript와 같은 기본기를 앞에 배치했다. </p><p>기본기 다음으로 SPA Framework를 배치했다. 읽으면서 ‘튼튼한 기본기로 SPA Framework들을 다룰 줄 안다!’으로 자연스럽게 읽혀지길 바라는 생각이었다. 하지만 생각보다 강조가 많이 되지 않은 것 같다. 모노한 전개여서 그런지, 다음 이력서를 제작할 때 핵심 기술을 강조하는 부분을 추가해야 하겠다는 생각이 들었다.</p><p>최근, Front-end 개발자는 Server 지식도 충분히 갖고 있어야 된다고 생각한다. 하나의 웹 서비스를 구성하는 요소 가운데 서버는 당연히 빠질 수 없는 요소이며, 이는 SEO, SSR와 같은 유저가 웹을 마주하게 되는 시작점에 대한 중요한 개발을 포함하는 영역이다. 또, 완벽한 서버 구현은 힘들겠지만 프로토타입용으로 웹을 만들 때 잠시 사용되는 역할의 조그마한 서버는 만들 수 있어야한다. 이러한 필요성에 따라, ‘앞에서 웹 개발을 잘할 수 있다’에서 ‘웹 개발 후 웹 배포 및 서버 개발도 할 수 있다’로 좀 더 다듬어 주는 흐름을 구성했다.</p><p>DevOps를 구축하면 귀찮은 일을 자동화하여 개발 속도를 향상 시키는데 큰 도움을 준다. 특히나 웹 배포 시나리오는 반복적인 작업을 하는 일종의 노동이다. 자동화를 하지 않으면, AWS console 접속 → ip 확인 → ip에 해당하는 서버 접속 → 서버에서 git fetch → git checkout upstream → pm2 restart 와 같은 반복적인 작업을 하게 된다. 이러한 작업을 크게 덜어주면 작업 효율이 많이 상승하므로 이러한 작업을 할 줄 아는 웹 개발자인 것을 마지막으로 어필했다.</p><h3 id="경력"><a href="#경력" class="headerlink" title="경력"></a>경력</h3><p>경력은 최근 경력부터 정렬을 했다. 글만 있으니 읽는 사람이 집중하기 힘들다는 생각이 들어 프로젝트마다 Preview를 배치했다. 프로젝트마다 기간, 짧은 설명, 기술 스택, 핵심 작업을 명세했다. 특히 작업에 해당하는 영역은 어떤 효과를 얻었는지 기술을 적용한 이유와 그 기술을 통해 회사의 프로젝트가 어떤 긍정적 영향을 얻었는지 상세하게 적었다. 개발자가 기술을 선택하는 궁극적인 목표는 ‘협업을 위해’, ‘편한 개발을 위해’ 와 같은 팀 시너지를 올려서 회사의 사업이 훌륭하게 돌아가도록 하는 것이니까.</p><h2 id="이력서-제출"><a href="#이력서-제출" class="headerlink" title="이력서 제출"></a>이력서 제출</h2><p>이력서를 제출 할 때, “회사의 응답이 일주일 내로 오지 않는다면 다음 회사를 넣도록 하자” 라는 규칙을 정하고 움직였다. 이렇게 규칙을 잡은 까닭에 대해 이야기 해보면,</p><ul><li>일주일동안 메일을 보지 않는 회사라면 흠..</li><li>일주일은 나에게 매우 긴 시간이다.</li></ul><p>그래서 규칙을 생각하며 3개의 회사에 지원했다.</p><ul><li>토스</li><li>라프텔</li><li>카카오</li></ul><h3 id="토스"><a href="#토스" class="headerlink" title="토스"></a>토스</h3><p>토스는 나에게 너무나 매력적인 회사이다. 디자인부터 애니메이션까지 새로운 서비스가 추가될 때마다 항상 내 안에서 큰 인상을 남기고 있었다. 이는 토스 카드 페이지에서 절정을 꽃 피웠는데, 작년부터 토스에 지원해서 한번 일해보고 싶다는 생각이 토스 카드 페이지에서 절정을 맞이했고 그래서 이번 기회에 토스에 이력서를 넣었다. 하지만, 토스는 일주일 간 나에게 연락이 오지 않았다. 그래서 일주일이 넘어가던 때, 다른 회사에 이력서를 넣으면서 토스 리크루트 페이스북 페이지에 메시지를 보냈다. 메시지를 보내자마자 2일 안에 서류 합격했다는 메일이 왔다. </p><p>토스 지원하고 아직도 깊게 인상이 남았던 건. 전형을 합격할 때마다 리쿠르트 매니저님께 전화가 오면서 항상 친절하게 응대 해주셨던게 기억에 남는다. 그러면서 토스라는 회사에 꼭 합격하고 싶다는 생각이 들었고 이러한 응대가 중요하구나 라는 생각이 절로 들었다.</p><h3 id="라프텔"><a href="#라프텔" class="headerlink" title="라프텔"></a>라프텔</h3><p>라프텔은 애니메이션 스트리밍 서비스를 운영하는 회사이다. 몇 년전 부터 애니메이션을 볼 때 사용하던, 관심있게 보던 서비스였다. 로켓펀치를 둘러보던차, 익숙한 라프텔의 아이콘이 보여서 덜컥 지원하게 되었다. 처음에는 로켓펀치를 맹신할 수 없어 회사 홈페이지에서 지원서를 보냈으나 라프텔도 마찬가지로 일주일간 연락이 없어서 로켓펀치로 다시 지원하게 됐다. 로켓펀치로 지원하고 3일정도 지나자 서류 합격했다는 통보가 메일에 있었다.</p><h3 id="카카오"><a href="#카카오" class="headerlink" title="카카오"></a>카카오</h3><p>카카오는 누구나 알만큼 큰 대기업이다. (중견기업으로 분류되어 있지만 영향력이나 그룹의 크기로 보면 대기업같다.) 주변 카카오를 다니는 지인이 말하는 카카오는 개발자에게 천국같은 곳이었고, 탄력적이고 수평적인 문화가 존재하는 훌륭한 곳이었다. 마침 카카오의 공고 중 프론트엔드 개발자를 구인한다는 공고가 올라와 있어서 지원을 했고, 3일 안에 서류 전형을 합격했다는 연락이 왔다.</p><p>세 곳의 서류 전형을 합격한 만큼, 이력서 준비를 빡세게 한 보람이 있었다. </p><h2 id="코드-테스트"><a href="#코드-테스트" class="headerlink" title="코드 테스트"></a>코드 테스트</h2><p>그런데, 여기서 일이 일어난다. 토스와 라프텔, 카카오를 일주일 단위로 지원을 했으나, 연락이 온 시기는 비슷한 시기였고, 해당 시기에 코드 테스트를 몰아서 보는 현상이 발생했다. 그래서 일주일 동안 세 곳의 코드 테스트를 하느라 잠을 거의 자지 못했다. </p><h3 id="라프텔-1"><a href="#라프텔-1" class="headerlink" title="라프텔"></a>라프텔</h3><p>첫 코드 테스트는 라프텔이었다. 라프텔의 코드 테스트는 정한 날짜, 시간으로부터 48시간 동안 해당 과제를 완성해야했다. 그래서 토요일 주말에 날잡고 코딩테스트를 보았다. 첫 코드 테스트를 보는 것이다 보니, “잘 짜야지~” 하는 마음가짐이 오버하게 만들었고, 간단한 코드 테스트에 프레임워크가 되어버리는 일이 발생했다. (…) 실제로 만들기위해서 48시간의 40시간은 코딩했다. 41시간 정도 될 무렵, 과제를 제출했고 며칠 후 라프텔에서 코드 테스트를 합격했다는 메일이 날라왔다.</p><h3 id="카카오-1"><a href="#카카오-1" class="headerlink" title="카카오"></a>카카오</h3><p>쉴 틈 없이 카카오 코드 테스트 메일이 날라왔고, 조금 휴식을 취한 후 수요일 점심부터 저녁 전까지 카카오 코드 테스트를 봤다. 카카오 코드 테스트의 문제 설명은 전부 영어로 되어 있었고, 영어를 해석 못하는 사람을 일차적으로 거르겠구나 라는 생각을 했다. 코드 테스트는 약 5시간 정도 보았고 마지막 과제에서 코드를 짜는데 막히는 부분이 있어 해당 부분에서 시간을 많이 썻으나, 과제는 다 만들어서 제출했다. 며칠 후, 카카오도 코드 테스트를 합격했다는 메일이 날라왔다.</p><h3 id="토스-1"><a href="#토스-1" class="headerlink" title="토스"></a>토스</h3><p>수요일날 카카오 코드 테스트를 보고, 며칠 후인 토요일날 토스 코드 테스트를 봤다. 토스도 마찬가지로 제한시간동안 개발하는 과제였다. 토스도 40시간 정도 코딩해서 보냈다. 보낼 때가 일요일이었는데, 일주일간 거의 잠도 못자고 작업만 하는 바람에 힘들어서 뻗어버렸다. 며칠 후, 토스에서 코드 테스트에 합격했다는 메일이 날라왔다.</p><p>이렇게 코드 테스트를 보면서 계속 성장했던 거 같다. 혼자 헤커톤을 세 탕 뛰는 느낌이었고 확실히 웹 프레임워크를 다루는 실력이 점점 늘어나는 걸 느꼈다. 그런데, 다음번에 지원할 때는 2주 간격으로 지원해야겠다는 생각이 들었다. 타이트하게 코드 테스트를 준비하니 심적으로 압박도 되었고 적어도 휴식을 위해 일주일이라는 텀은 있어야 할 거 같았다.</p><h2 id="기술-면접-준비"><a href="#기술-면접-준비" class="headerlink" title="기술 면접 준비"></a>기술 면접 준비</h2><p>기술 면접을 준비하기 위해서 노션에 질문을 정리했다.</p><p>기술 면접 준비는 회사에 서류와 코드 테스트에 합격하고 나서 준비하지 않았다. 그 이유는 코드 테스트를 합격하고 기술 면접을 보는 시간이 매우 짧을 걸 예상하고 있었고, 웹 개발자로 전향하고 어느정도 시간이 흐르지 않아서 기본적인 웹 개발 질문을 할거라 생각했다. 그렇기에 많은 시간이 필요하다 느껴, 두 달 전부터 시작했다. </p><p>두 달 동안 많은 걸 공부하고 부족한 점을 보완해서 글을 작성했다. 모르는 부분이 있으면 근처 지인에게 물어보기도 하고, 나름 준비를 열심히 했다는 생각에 고양되어 있었다.</p><h2 id="기술-면접"><a href="#기술-면접" class="headerlink" title="기술 면접"></a>기술 면접</h2><p>결론만 말하면 라프텔과 토스 둘 다 면접에서 떨어졌고, 카카오는 내가 면접을 캔슬했다.</p><h3 id="라프텔-면접"><a href="#라프텔-면접" class="headerlink" title="라프텔 면접"></a>라프텔 면접</h3><p>라프텔 면접에서 인상 깊었던 점은 상세한 코드 피드백과 ‘어떻게 합리적인 생각을 하는가’ 두 가지가 기억에 많이 남는다. 처음 회사에 들어와서 면접을 기다리는 동안, ‘어떻게 합리적인 생각을 하는가’에 대한 질문을 하나 면접관님이 던지셨다. 던지신 그 질문은 내가 여태까지 마주했던 질문의 유형과 전혀 다른 처음 보는 유형의 질문이었다. (나중에 찾아보니 컨설턴트 면접 시 많이 물어보는 질문의 유형이라고 한다) 기다리면서 곰곰이 질문에 대한 답을 생각해봤다. 질문에 들어가서 생각한 대답을 드렸고, 면접관님께서는 질문에 대한 피드백과 이 질문의 의도를 이야기 해주셨다. 그 후 면접이 시작되면서 상세하게 내가 짠 코드를 리뷰 해주셨고, 대다수의 질문은 React 관련 질문이었고, 부가적으로 기본적인 알고리즘 능력 라이브코딩 테스트를 봤다.</p><p>면접 질문을 보면서 “준비를 열심히 하셨구나” 생각이 들 정도의 퀄리티 있는 면접이라고 느꼇다. 하지만 떨어짐을 직감했고 면접을 진행하면서 React 관련 질문과 라이브 코딩에서 내 자신도 용납하지 못할 정도로 많은 부분을 답변을 못했으며 라이브 코딩도 재대로 풀지 못했다.</p><p>면접이 끝나고 React 개발자를 뽑는데 React 관련 지식을 공부하지 않았던 게 가장 큰 패착이라 생각했다. 라이브 코딩을 할 거라는 생각을 전혀 못해서 당황 하다가 제대로 못 본 것도 한 몫 했던 것 같다. </p><p>라이브 코딩을 보면서 안절부절하는 나를 보셨는지, 면접관님께서 “이런 상황에서는 당황할 수 있으니 먼저 키보드에서 손을 때고 머리속에서 정리를 한 후에 코딩을 하는게 좋을 것 같다” 라는 말을 하셨다. 지금 생각해보면 훌륭한 피드백이라 생각한다. 라프텔 면접을 보고 지금까지 약 1달이라는 시간 동안 생각을 정리하고 코딩에 들어가는 훈련을 통해 성장했음을 느낀다. 라프텔 면접에서 많은 걸 경험했다.</p><p><strong>라프텔 면접에서 느낀 점</strong></p><ul><li>다양한 질문에 대한 생각을 하게 됨 (한정된 시야에서 조금 트인 느낌)</li><li>해당 직군에 대한 기술을 많이 물어보니 당연히 해당 기술을 공부해야 한다, React 개발자라고 한다면 React 기본 지식 정도는 알고 가야 한다.</li><li>먼저 키보드에 손이 가서 코딩하는 게 별로 좋지 못하다. 생각을 정리하고 코드를 작성해보자.</li><li>기본적인 웹 개발 지식은 스킵하고, React와 같은 실무 지식을 많이 물어본다.</li></ul><h3 id="토스-면접"><a href="#토스-면접" class="headerlink" title="토스 면접"></a>토스 면접</h3><p>토스 면접일짜를 잡기까지 너무나 친절한 리크루터의 응대가 좋았다. 서류테스트, 코딩테스트, 면접일짜 확정까지의 일련의 일을 깔끔하게 처리해주셨고, 이런 경험은 카카오나 네이버 같은 대기업보다 훨씬 좋았던 기억이다. 토스에서 말하는 ‘인재 유치는 스피드전’ 이라는게 무엇인지 감이 확 왔다. </p><p>토스 면접은 세 분의 면접관이 들어오셨고 저녁 7시 30분쯤부터 시작했다. 처음은 코딩 테스트의 코드 리뷰로 시작했다. 면접을 보시는 개발자분들이 내 코드를 여러모로 많이 보셨다는 걸 느꼈다. 그 중에 몇 가지를 꼽는다면</p><ul><li>왜 상태를 Store가 아니라 container에 명세하셨나요?</li><li>아이템 데이터를 가져올 때 전체를 다 갖고오시네요? 왜 id로 가져오지 않았나요?</li><li>변수명을 왜 저렇게 지으셨나요?</li><li>Atomic Design에서 template을 어떤 용도로 사용하셨나요? 왜 vue에서는 Atomic Design 적용이 어려울까요?</li><li>왜 TypeScript 적용을 안하셨나요?</li></ul><p>설계의 미숙함이나 API 데이터포맷까지 확인했다는 점에서 얼마나 신중하게 뽑는지를 알 수 있었고, 코드 리뷰가 어느정도 끝나고 라이브 코딩으로 넘어갔다.</p><p>라이브 코딩은 자료구조 관련해서 알고 있는가를 검증 하려는 것 같아보이는 문제였다. 라이브 코딩이 끝나고 대략 1시간 30분 정도 시간이 지나있었다. </p><p><strong>토스 면접에서 느낀 점</strong></p><ul><li>코드 리뷰를 높은 수준으로 받았다. 회사의 코드리뷰 문화를 엿볼 수 있었고 내부적으로 빡세게 진행한다고 느꼇다.</li><li>모든 코드에는 논리가 있어야 함을 느꼈다. 내가 조금 놓친 부분에 대해서 이야기를 듣길 원했다.</li><li>TypeScript를 적용했다면 더 높은 피드백을 받을 수 있을 것 같았다. 내부적으로 TypeScript를 적극적으로 사용함을 느꼈다.</li><li>토스도 라이브코딩 테스트를 보았는데 라이브코딩 하면서 당황하는 것 좀 고쳐야겠다.</li><li>전반적으로 빡센 인터뷰였다.</li></ul><h3 id="카카오-면접-진행-취소"><a href="#카카오-면접-진행-취소" class="headerlink" title="카카오 면접 진행 취소"></a>카카오 면접 진행 취소</h3><p>라프텔과 토스 면접을 보면서 나에게 무엇이 부족할까 곰곰이 고민했다. 그래서 알고리즘이 문제인가?를 생각하고 있었다. 그러던 중, 카카오 면접 후기를 보았는데 카카오는 2차 면접에서 매우 빡세게 알고리즘을 질문한다고 했다. 그러면서 2차 면접에 떨어지면 1년간 지원을 못한다는 이야기가 문득 기억나서 원격 인터뷰 단계에서 취소한다고 카카오에 메일로 전달했다. </p><p>알고리즘을 조금 더 확실하게 공부하고 지원 해야겠다는 생각과 함께 면접 진행을 취소했고, 전반적으로 나에게 부족한 기술을 조금 더 공부하기로 했다. </p><h2 id="면접-그-후"><a href="#면접-그-후" class="headerlink" title="면접 그 후"></a>면접 그 후</h2><p>다양한 회사 면접의 경험은 나에게 큰 양분이 되었고, 부족한 점을 정리하게 되었다.</p><p><strong>React.js + TypeScript</strong></p><p>React.js를 메인스택으로 가져오기 위해 회사 메인 프로젝트와 사이드 프로젝트 그리고 리뉴얼 할 이력서 페이지를 React로 변경했다. 하루 10시간 이상을 React코드와 마주했으며 다양한 환경에 대해 구축을 해보고 나름대로 장점과 단점을 구별해봤다.</p><p>웹을 개발할 때 모든 환경에서 TypeScript를 적극적으로 활용하였다.</p><ul><li><a href="https://www.notion.so/aad725d6-a8ce-4722-83ed-4eda44522db0" target="_blank" rel="noopener">Redux</a></li><li><a href="https://www.notion.so/df136c58-2c1b-4459-b22c-7df8cae32e20" target="_blank" rel="noopener">Next.js 에서 alias 적용하는 방법</a></li><li><a href="https://www.notion.so/a4b13e25-b67a-40af-87d3-c084a29c895c" target="_blank" rel="noopener">React.js</a></li><li><a href="https://www.notion.so/39c86520-7e78-4173-b74a-e2837c7df655" target="_blank" rel="noopener">Winepoint</a> <a href="https://www.notion.so/649cb9ad-2e8f-4d7f-b3cb-69ddc0a28b58" target="_blank" rel="noopener">Front-end</a></li><li><a href="https://salon.elegancesocialclub.co.kr/#/" target="_blank" rel="noopener">사이드프로젝트</a>, <a href="https://github.com/elegance-social-club" target="_blank" rel="noopener">사이드프로젝트 github</a></li></ul><p><strong>라이브코딩</strong></p><p>알고리즘 및 라이브코딩에 익숙해지기 위해서 알고리즘 학원을 다니기 시작했다.</p><p>하지만 다닌지 약 한달이 되는 시간 동안, 나에게 알고리즘은 문제가 아니라는 걸 판단했다. 그 이유는 내가 문제를 푸는 속도나 알고리즘 답안을 내는 걸 보면 괜찮은 수준이라는 걸 확인했기 때문이다.</p><p>그래서 라이브코딩은 경험을 좀 더 많이 쌓는게 옳바르다고 생각했다.</p><h2 id="끝으로"><a href="#끝으로" class="headerlink" title="끝으로"></a>끝으로</h2><p>아직 이직의 꿈을 꾸고있다. 나와 최고로 맞는 회사를 찾기 위해서 정처없이 여행을 하는 중이고 머지않아 찾을 수 있을거라는 생각이 든다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;내가 6년차 직장인에 접어 들었을 무렵, 다니는 회사를 나와 이직을 결심하게 되었다. 물론 이 회사를 오래 다닌 건 아니지만, 직장 생활이 길어지면서 내가 어떤 회사를 좋아하고 선호하는지 점점 알게 되었고 지금의 회사도 좋지만, 조금 더 나에게 
      
    
    </summary>
    
    
      <category term="이직" scheme="https://vallista.kr/tags/%EC%9D%B4%EC%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>Docker In Docker (DIND) 설정하기</title>
    <link href="https://vallista.kr/2019/05/30/Docker-In-Docker-DIND-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/"/>
    <id>https://vallista.kr/2019/05/30/Docker-In-Docker-DIND-설정하기/</id>
    <published>2019-05-30T07:33:52.000Z</published>
    <updated>2020-06-04T05:27:52.900Z</updated>
    
    <content type="html"><![CDATA[<p>Docker in Docker를 설정하는 이유 첫 번째로 보안의 위험이 있다.</p><p>특히나, Jenkins등의 CI를 사용하는 환경에서 Jenkins가 Docker를 실행할 때, Jenkins나 Docker가 해킹당하면 서버 전체의 권한이 뚫리는거랑 마찬가지이다. 그러므로 소스코드 유출 및 사용자에게 Serve 할 때 문제가 일어나게 된다. 그러므로 Docker로 한번 더 감싸서 Docker Wrapper에 권한을 하나 더 만든다. 그 다음 Docker Wrapper의 가상 환경에 jenkins와 docker 이미지를 만들고 가상 환경의 서버에서 jenkins와 docker 인스턴스를 실행시킨다. 이렇게 되면 jenkins, docker서버가 해킹당하더라도 docker wrapper instance만 해킹이 되기 때문에 안전하다.</p><p>두 번째는 백업이다.</p><p>jenkins와 docker가 단독으로 instance로써 작동할 때 서버가 꺼지거나 하면 백업이 쉽지 않다. 하지만 docker wrapper로 감싸게 되면 백업에 용이하다.</p><h2 id="Docker-In-Docker-dind-설정"><a href="#Docker-In-Docker-dind-설정" class="headerlink" title="Docker In Docker(dind) 설정"></a>Docker In Docker(dind) 설정</h2><p>1) <a href="https://github.com/jpetazzo/dind" target="_blank" rel="noopener">jpetazzo/dind</a><br>2) <a href="http://seapy.com/2083" target="_blank" rel="noopener">Jenkins를 이용한 Docker 빌드</a></p><p>위의 자료를 참고했다. 프로젝트에 아래의 파일들을 적용한다.</p><ul><li>Dockerfile</li></ul><pre class=" language-bash"><code class="language-bash">FROM jenkins:2.60.3MAINTAINER jerome.petazzoni@docker.comUSER root<span class="token comment" spellcheck="true"># Let's start with some basic stuff.</span>RUN <span class="token function">apt-get</span> update -qq <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -qqy \    apt-transport-https \    ca-certificates \    curl \    lxc \    iptables \    ca-certificates<span class="token comment" spellcheck="true"># Install Docker from Docker Inc. repositories.</span>RUN curl -sSL https://get.docker.com/ <span class="token operator">|</span> sh<span class="token comment" spellcheck="true"># Install the magic wrapper.</span>ADD ./wrapdocker /usr/local/bin/wrapdockerRUN <span class="token function">chmod</span> +x /usr/local/bin/wrapdocker<span class="token comment" spellcheck="true"># Define additional metadata for our image.</span>VOLUME /var/lib/dockerENV JAVA_ARGS -Xms512m -Xmx1024mCMD <span class="token punctuation">[</span><span class="token string">"/usr/local/bin/wrapdocker"</span><span class="token punctuation">]</span>ADD jenkins_dind.sh /usr/local/bin/jenkins_dind.shRUN <span class="token function">chmod</span> +x /usr/local/bin/jenkins_dind.shCMD <span class="token punctuation">[</span><span class="token string">"/usr/local/bin/jenkins_dind.sh"</span><span class="token punctuation">]</span></code></pre><ul><li>wrapdocker</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># Ensure that all nodes in /dev/mapper correspond to mapped devices currently loaded by the device-mapper kernel driver</span>dmsetup mknodes<span class="token comment" spellcheck="true"># First, make sure that cgroups are mounted correctly.</span>CGROUP<span class="token operator">=</span>/sys/fs/cgroup<span class="token keyword">:</span> <span class="token punctuation">{</span>LOG:<span class="token operator">=</span>stdio<span class="token punctuation">}</span><span class="token punctuation">[</span> -d <span class="token variable">$CGROUP</span> <span class="token punctuation">]</span> <span class="token operator">||</span>        <span class="token function">mkdir</span> <span class="token variable">$CGROUP</span>mountpoint -q <span class="token variable">$CGROUP</span> <span class="token operator">||</span>        <span class="token function">mount</span> -n -t tmpfs -o uid<span class="token operator">=</span>0,gid<span class="token operator">=</span>0,mode<span class="token operator">=</span>0755 cgroup <span class="token variable">$CGROUP</span> <span class="token operator">||</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"Could not make a tmpfs mount. Did you use --privileged?"</span>                <span class="token keyword">exit</span> 1        <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -d /sys/kernel/security <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> mountpoint -q /sys/kernel/security<span class="token keyword">then</span>    <span class="token function">mount</span> -t securityfs none /sys/kernel/security <span class="token operator">||</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Could not mount /sys/kernel/security."</span>        <span class="token keyword">echo</span> <span class="token string">"AppArmor detection and --privileged mode might break."</span>    <span class="token punctuation">}</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># Mount the cgroup hierarchies exactly as they are in the parent system.</span><span class="token keyword">for</span> SUBSYS <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d: -f2 /proc/1/cgroup<span class="token variable">)</span></span><span class="token keyword">do</span>        <span class="token punctuation">[</span> -d <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span>        mountpoint -q <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span> <span class="token operator">||</span>                <span class="token function">mount</span> -n -t cgroup -o <span class="token variable">$SUBSYS</span> cgroup <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span>        <span class="token comment" spellcheck="true"># The two following sections address a bug which manifests itself</span>        <span class="token comment" spellcheck="true"># by a cryptic "lxc-start: no ns_cgroup option specified" when</span>        <span class="token comment" spellcheck="true"># trying to start containers withina container.</span>        <span class="token comment" spellcheck="true"># The bug seems to appear when the cgroup hierarchies are not</span>        <span class="token comment" spellcheck="true"># mounted on the exact same directories in the host, and in the</span>        <span class="token comment" spellcheck="true"># container.</span>        <span class="token comment" spellcheck="true"># Named, control-less cgroups are mounted with "-o name=foo"</span>        <span class="token comment" spellcheck="true"># (and appear as such under /proc/&lt;pid>/cgroup) but are usually</span>        <span class="token comment" spellcheck="true"># mounted on a directory named "foo" (without the "name=" prefix).</span>        <span class="token comment" spellcheck="true"># Systemd and OpenRC (and possibly others) both create such a</span>        <span class="token comment" spellcheck="true"># cgroup. To avoid the aforementioned bug, we symlink "foo" to</span>        <span class="token comment" spellcheck="true"># "name=foo". This shouldn't have any adverse effect.</span>        <span class="token keyword">echo</span> <span class="token variable">$SUBSYS</span> <span class="token operator">|</span> <span class="token function">grep</span> -q ^name<span class="token operator">=</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>                NAME<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token keyword">echo</span> $SUBSYS <span class="token operator">|</span> <span class="token function">sed</span> s/^name<span class="token operator">=</span>//<span class="token variable">)</span></span>                <span class="token function">ln</span> -s <span class="token variable">$SUBSYS</span> <span class="token variable">$CGROUP</span>/<span class="token variable">$NAME</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># Likewise, on at least one system, it has been reported that</span>        <span class="token comment" spellcheck="true"># systemd would mount the CPU and CPU accounting controllers</span>        <span class="token comment" spellcheck="true"># (respectively "cpu" and "cpuacct") with "-o cpuacct,cpu"</span>        <span class="token comment" spellcheck="true"># but on a directory called "cpu,cpuacct" (note the inversion</span>        <span class="token comment" spellcheck="true"># in the order of the groups). This tries to work around it.</span>        <span class="token punctuation">[</span> <span class="token variable">$SUBSYS</span> <span class="token operator">=</span> cpuacct,cpu <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> -s <span class="token variable">$SUBSYS</span> <span class="token variable">$CGROUP</span>/cpu,cpuacct<span class="token keyword">done</span><span class="token comment" spellcheck="true"># Note: as I write those lines, the LXC userland tools cannot setup</span><span class="token comment" spellcheck="true"># a "sub-container" properly if the "devices" cgroup is not in its</span><span class="token comment" spellcheck="true"># own hierarchy. Let's detect this and issue a warning.</span><span class="token function">grep</span> -q :devices: /proc/1/cgroup <span class="token operator">||</span>        <span class="token keyword">echo</span> <span class="token string">"WARNING: the 'devices' cgroup should be in its own hierarchy."</span><span class="token function">grep</span> -qw devices /proc/1/cgroup <span class="token operator">||</span>        <span class="token keyword">echo</span> <span class="token string">"WARNING: it looks like the 'devices' cgroup is not mounted."</span><span class="token comment" spellcheck="true"># Now, close extraneous file descriptors.</span><span class="token function">pushd</span> /proc/self/fd <span class="token operator">></span>/dev/null<span class="token keyword">for</span> FD <span class="token keyword">in</span> *<span class="token keyword">do</span>        <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$FD</span>"</span> <span class="token keyword">in</span>        <span class="token comment" spellcheck="true"># Keep stdin/stdout/stderr</span>        <span class="token punctuation">[</span>012<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Nuke everything else</span>        *<span class="token punctuation">)</span>                <span class="token function">eval</span> <span class="token function">exec</span> <span class="token string">"<span class="token variable">$FD</span>>&amp;-"</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        esac<span class="token keyword">done</span><span class="token function">popd</span> <span class="token operator">></span>/dev/null<span class="token comment" spellcheck="true"># If a pidfile is still around (for example after a container restart),</span><span class="token comment" spellcheck="true"># delete it so that docker can start.</span><span class="token function">rm</span> -rf /var/run/docker.pid<span class="token comment" spellcheck="true"># If we were given a PORT environment variable, start as a simple daemon;</span><span class="token comment" spellcheck="true"># otherwise, spawn a shell as well</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$PORT</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token function">exec</span> dockerd -H 0.0.0.0:<span class="token variable">$PORT</span> -H unix:///var/run/docker.sock \                <span class="token variable">$DOCKER_DAEMON_ARGS</span><span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$LOG</span>"</span> <span class="token operator">==</span> <span class="token string">"file"</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>                dockerd <span class="token variable">$DOCKER_DAEMON_ARGS</span> <span class="token operator">&amp;</span><span class="token operator">></span>/var/log/docker.log <span class="token operator">&amp;</span>        <span class="token keyword">else</span>                dockerd <span class="token variable">$DOCKER_DAEMON_ARGS</span> <span class="token operator">&amp;</span>        <span class="token keyword">fi</span>        <span class="token variable"><span class="token punctuation">((</span> timeout <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">+</span> SECONDS <span class="token punctuation">))</span></span>        <span class="token keyword">until</span> docker info <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1        <span class="token keyword">do</span>                <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span> SECONDS <span class="token operator">>=</span> timeout <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>                        <span class="token keyword">echo</span> <span class="token string">'Timed out trying to connect to internal docker host.'</span> <span class="token operator">></span><span class="token operator">&amp;</span>2                        <span class="token keyword">break</span>                <span class="token keyword">fi</span>                <span class="token function">sleep</span> 1        <span class="token keyword">done</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">exec</span> <span class="token string">"<span class="token variable">$@</span>"</span>        <span class="token function">exec</span> <span class="token function">bash</span> --login<span class="token keyword">fi</span></code></pre><ul><li>jenkins_dind.sh</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>CGROUP<span class="token operator">=</span>/sys/fs/cgroup<span class="token punctuation">[</span> -d <span class="token variable">$CGROUP</span> <span class="token punctuation">]</span> <span class="token operator">||</span>  <span class="token function">mkdir</span> <span class="token variable">$CGROUP</span>mountpoint -q <span class="token variable">$CGROUP</span> <span class="token operator">||</span>  <span class="token function">mount</span> -n -t tmpfs -o uid<span class="token operator">=</span>0,gid<span class="token operator">=</span>0,mode<span class="token operator">=</span>0755 cgroup <span class="token variable">$CGROUP</span> <span class="token operator">||</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Could not make a tmpfs mount. Did you use -privileged?"</span>    <span class="token keyword">exit</span> 1  <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Mount the cgroup hierarchies exactly as they are in the parent system.</span><span class="token keyword">for</span> SUBSYS <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d: -f2 /proc/1/cgroup<span class="token variable">)</span></span><span class="token keyword">do</span>  <span class="token punctuation">[</span> -d <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span>  mountpoint -q <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span> <span class="token operator">||</span>    <span class="token function">mount</span> -n -t cgroup -o <span class="token variable">$SUBSYS</span> cgroup <span class="token variable">$CGROUP</span>/<span class="token variable">$SUBSYS</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># Now, close extraneous file descriptors.</span><span class="token function">pushd</span> /proc/self/fd<span class="token keyword">for</span> FD <span class="token keyword">in</span> *<span class="token keyword">do</span>  <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$FD</span>"</span> <span class="token keyword">in</span>  <span class="token comment" spellcheck="true"># Keep stdin/stdout/stderr</span>  <span class="token punctuation">[</span>012<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># Nuke everything else</span>  *<span class="token punctuation">)</span>    <span class="token function">eval</span> <span class="token function">exec</span> <span class="token string">"<span class="token variable">$FD</span>>&amp;-"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>  esac<span class="token keyword">done</span><span class="token function">popd</span>docker -d <span class="token operator">&amp;</span><span class="token function">exec</span> /usr/bin/java -jar /usr/share/jenkins/jenkins.war</code></pre><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>1) <a href="https://nodejs.org/ko/docs/guides/nodejs-docker-webapp/" target="_blank" rel="noopener">Node.js 웹 앱의 도커라이징 | Node.js</a><br>2) <a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html" target="_blank" rel="noopener">초보를 위한 도커 안내서 - 도커란 무엇인가?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker in Docker를 설정하는 이유 첫 번째로 보안의 위험이 있다.&lt;/p&gt;
&lt;p&gt;특히나, Jenkins등의 CI를 사용하는 환경에서 Jenkins가 Docker를 실행할 때, Jenkins나 Docker가 해킹당하면 서버 전체의 권한이
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://vallista.kr/tags/Docker/"/>
    
      <category term="DinD" scheme="https://vallista.kr/tags/DinD/"/>
    
      <category term="Docker In Docker" scheme="https://vallista.kr/tags/Docker-In-Docker/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="https://vallista.kr/2019/05/28/Jenkins/"/>
    <id>https://vallista.kr/2019/05/28/Jenkins/</id>
    <published>2019-05-28T02:11:30.000Z</published>
    <updated>2020-06-04T05:27:52.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-설치"><a href="#1-설치" class="headerlink" title="#1 설치"></a>#1 설치</h2><ol><li><p>Jenkins</p><p> <a href="https://www.leafcats.com/215" target="_blank" rel="noopener">Docker Container로 Jenkins 설치</a></p><p> <a href="https://taetaetae.github.io/2018/02/08/github-with-jenkins/" target="_blank" rel="noopener">Github과 Jenkins 연동하기</a></p></li><li><p>jenkins 관리 &gt; 플러그인 관리 &gt; 설치가능 탭 &gt; git 검색 &gt; github intergration plugin 다운로드</p></li><li><p>jenkins 관리 &gt; configure global security &gt; CSRF Protection &gt; disable</p></li><li><p>jenkins 실행 서버</p><pre><code> $ ssh-keygen -t rsa -f id_rsa</code></pre></li><li><p>Credentials &gt; System &gt; Global Credentials &gt; Add Credentials</p><ul><li>kind - ssh username with private key<ul><li>scope - global</li><li>ID - 유니크 이름</li><li>Description - 설명</li><li>UserName - 유저 이름</li><li>Private Key - jenkins 서버(jenkins가 돌아가는 운영체제) 에서 ssh-keygen으로 입력한 값 중 id_ksa 파일</li><li>Passphrase - 비밀번호</li></ul></li></ul></li><li><p>Github Repository &gt; Settings &gt; Deploy Keys &gt; Add Deploy Key &gt; Title, Key 입력 (key = ssh-keygen 으로 발급받은 id_rsa.pub)</p></li></ol><h2 id="2-작업-생성"><a href="#2-작업-생성" class="headerlink" title="#2 작업 생성"></a>#2 작업 생성</h2><ol><li><p>새로운 Item으로 작업 생성</p></li><li><p>Freestyle Project, Pipeline 용도에 맞게 생성</p></li><li><p>아래의 사진 처럼 셋팅</p><p> <img src="/images/jenkins_1.png" alt></p><p> <img src="/images/jenkins_2.png" alt></p></li><li><p>Pipeline script from SCM (pipeline일 때), SCM → Git, Repository에는 ssh주소를 적어준다. 그리고 만들어놓은 Credentials를 사용.</p><p> <img src="/images/jenkins_3.png" alt></p></li></ol><h2 id="3-Jenkins-File로-Pipeline-설정"><a href="#3-Jenkins-File로-Pipeline-설정" class="headerlink" title="#3 Jenkins File로 Pipeline 설정"></a>#3 Jenkins File로 Pipeline 설정</h2><p><a href="https://medium.com/@dillson/triggering-a-jenkins-pipeline-on-git-push-321d29a98cf3" target="_blank" rel="noopener">Triggering a Jenkins Pipeline on ‘git push’</a></p><blockquote><p>Jenkinsfile 실행 시 cannot connect to the docker daemon issue</p><p><a href="https://stackoverflow.com/questions/38105308/jenkins-cant-connect-to-docker-daemon" target="_blank" rel="noopener">Jenkins: Can’t connect to Docker daemon</a></p><p><a href="https://stackoverflow.com/questions/21871479/docker-cant-connect-to-docker-daemon" target="_blank" rel="noopener">Docker can’t connect to docker daemon</a></p><ol><li><p>docker가 실행되어 있는지 확인</p></li><li><p>docker group 권한 주기</p><pre><code>sudo groupadd dockersudo usermod -aG docker $(whoami)</code></pre></li><li><p>sudo service docker start</p></li></ol><p>sudo service docker start 하면 docker 실행되면서 daemon도 실행됨.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-설치&quot;&gt;&lt;a href=&quot;#1-설치&quot; class=&quot;headerlink&quot; title=&quot;#1 설치&quot;&gt;&lt;/a&gt;#1 설치&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jenkins&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://www.leafcats.com/2
      
    
    </summary>
    
    
      <category term="Tech" scheme="https://vallista.kr/tags/Tech/"/>
    
      <category term="Jenkins" scheme="https://vallista.kr/tags/Jenkins/"/>
    
      <category term="DevOps" scheme="https://vallista.kr/tags/DevOps/"/>
    
  </entry>
  
</feed>
